
f1_freertos_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  0800b6d0  0800b6d0  0000c6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d8  0800c2d8  0000e084  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2d8  0800c2d8  0000e084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2d8  0800c2d8  0000e084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d8  0800c2d8  0000d2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2dc  0800c2dc  0000d2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800c2e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc0  20000084  0800c364  0000e084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001044  0800c364  0000f044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176cf  00000000  00000000  0000e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403b  00000000  00000000  0002577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  000297b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001035  00000000  00000000  0002ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdc3  00000000  00000000  0002bd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c312  00000000  00000000  00048ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bad8  00000000  00000000  00064dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001008c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f8  00000000  00000000  00100908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00107200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b6b4 	.word	0x0800b6b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	0800b6b4 	.word	0x0800b6b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <vApplicationGetIdleTaskMemory+0x28>)
 8001110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	4a05      	ldr	r2, [pc, #20]	@ (800112c <vApplicationGetIdleTaskMemory+0x2c>)
 8001116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200000a0 	.word	0x200000a0
 800112c:	20000140 	.word	0x20000140

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	@ (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	@ (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	@ (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	@ 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	@ 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	60da      	str	r2, [r3, #12]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	615a      	str	r2, [r3, #20]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	4907      	ldr	r1, [pc, #28]	@ (80012b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4313      	orrs	r3, r2
 8001296:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4013      	ands	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80012be:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6053      	str	r3, [r2, #4]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40010000 	.word	0x40010000
 80012d4:	00000000 	.word	0x00000000

080012d8 <get_NTC_temp>:

/********************************************* ntc vars *******************************************/
float NTC_temp;
uint16_t Ntc_R;
float get_NTC_temp (uint32_t variable)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	/* calc. ntc resistance */
	Ntc_R = ((NTC_UP_R)/((4095.0/variable) - 1));
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff f877 	bl	80003d4 <__aeabi_ui2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	a137      	add	r1, pc, #220	@ (adr r1, 80013c8 <get_NTC_temp+0xf0>)
 80012ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012f0:	f7ff fa14 	bl	800071c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b37      	ldr	r3, [pc, #220]	@ (80013e0 <get_NTC_temp+0x108>)
 8001302:	f7fe ff29 	bl	8000158 <__aeabi_dsub>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	a131      	add	r1, pc, #196	@ (adr r1, 80013d0 <get_NTC_temp+0xf8>)
 800130c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001310:	f7ff fa04 	bl	800071c <__aeabi_ddiv>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fbac 	bl	8000a78 <__aeabi_d2uiz>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <get_NTC_temp+0x10c>)
 8001326:	801a      	strh	r2, [r3, #0]

	/* temp */
	float Ntc_Ln = log(Ntc_R);
 8001328:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <get_NTC_temp+0x10c>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f851 	bl	80003d4 <__aeabi_ui2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f009 ffcf 	bl	800b2dc <log>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fbb7 	bl	8000ab8 <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	60fb      	str	r3, [r7, #12]
	/* calc. temperature */
	return ((1.0/(A + B*Ntc_Ln + C*Ntc_Ln*Ntc_Ln*Ntc_Ln)) - 273.15);
 800134e:	4926      	ldr	r1, [pc, #152]	@ (80013e8 <get_NTC_temp+0x110>)
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f7ff fd0f 	bl	8000d74 <__aeabi_fmul>
 8001356:	4603      	mov	r3, r0
 8001358:	4924      	ldr	r1, [pc, #144]	@ (80013ec <get_NTC_temp+0x114>)
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fc02 	bl	8000b64 <__addsf3>
 8001360:	4603      	mov	r3, r0
 8001362:	461c      	mov	r4, r3
 8001364:	4922      	ldr	r1, [pc, #136]	@ (80013f0 <get_NTC_temp+0x118>)
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff fd04 	bl	8000d74 <__aeabi_fmul>
 800136c:	4603      	mov	r3, r0
 800136e:	68f9      	ldr	r1, [r7, #12]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fcff 	bl	8000d74 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fcfa 	bl	8000d74 <__aeabi_fmul>
 8001380:	4603      	mov	r3, r0
 8001382:	4619      	mov	r1, r3
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff fbed 	bl	8000b64 <__addsf3>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f843 	bl	8000418 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	f04f 0000 	mov.w	r0, #0
 800139a:	4911      	ldr	r1, [pc, #68]	@ (80013e0 <get_NTC_temp+0x108>)
 800139c:	f7ff f9be 	bl	800071c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	a30b      	add	r3, pc, #44	@ (adr r3, 80013d8 <get_NTC_temp+0x100>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7fe fed3 	bl	8000158 <__aeabi_dsub>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fb7d 	bl	8000ab8 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40affe00 	.word	0x40affe00
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40c77000 	.word	0x40c77000
 80013d8:	66666666 	.word	0x66666666
 80013dc:	40711266 	.word	0x40711266
 80013e0:	3ff00000 	.word	0x3ff00000
 80013e4:	20000480 	.word	0x20000480
 80013e8:	3984b6ca 	.word	0x3984b6ca
 80013ec:	3a6d5285 	.word	0x3a6d5285
 80013f0:	34212a0d 	.word	0x34212a0d

080013f4 <WriteComm>:
//static uint8_t   ONRL[]={0x01};
//static uint8_t   OFRL[]={0x00};
bool Relay_ON_cmd = false;

static bool WriteComm(uint8_t *pBuff, uint8_t nSize)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	return HAL_UART_Transmit(&huart3, pBuff, nSize, 1);
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	b29a      	uxth	r2, r3
 8001404:	2301      	movs	r3, #1
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4806      	ldr	r0, [pc, #24]	@ (8001424 <WriteComm+0x30>)
 800140a:	f003 fc01 	bl	8004c10 <HAL_UART_Transmit>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf14      	ite	ne
 8001414:	2301      	movne	r3, #1
 8001416:	2300      	moveq	r3, #0
 8001418:	b2db      	uxtb	r3, r3
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000408 	.word	0x20000408

08001428 <HAL_UART_RxCpltCallback>:
//	else
//		return false;
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_UART_RxCpltCallback+0x74>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d12a      	bne.n	8001492 <HAL_UART_RxCpltCallback+0x6a>
//				  if (memcmp(nRxData3,Rx_OFRL,3) == 1)
//					  Relay_ON_cmd = false;
//				  else if (memcmp(nRxData3,Rx_ONRL,3)==1)
//					  Relay_ON_cmd = true;

				  if (nRxData3[0] == Rx_OFRL[0] &&
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <HAL_UART_RxCpltCallback+0x78>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d10f      	bne.n	8001468 <HAL_UART_RxCpltCallback+0x40>
					  nRxData3[1] == Rx_OFRL[1] &&
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_UART_RxCpltCallback+0x78>)
 800144a:	785a      	ldrb	r2, [r3, #1]
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_UART_RxCpltCallback+0x7c>)
 800144e:	785b      	ldrb	r3, [r3, #1]
				  if (nRxData3[0] == Rx_OFRL[0] &&
 8001450:	429a      	cmp	r2, r3
 8001452:	d109      	bne.n	8001468 <HAL_UART_RxCpltCallback+0x40>
					  nRxData3[2] == Rx_OFRL[2])
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_UART_RxCpltCallback+0x78>)
 8001456:	789a      	ldrb	r2, [r3, #2]
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_UART_RxCpltCallback+0x7c>)
 800145a:	789b      	ldrb	r3, [r3, #2]
					  nRxData3[1] == Rx_OFRL[1] &&
 800145c:	429a      	cmp	r2, r3
 800145e:	d103      	bne.n	8001468 <HAL_UART_RxCpltCallback+0x40>
					  Relay_ON_cmd = false;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_UART_RxCpltCallback+0x80>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
				  else if (nRxData3[0] == Rx_ONRL[0] &&
					  nRxData3[1] == Rx_ONRL[1] &&
					  nRxData3[2] == Rx_ONRL[2])
					  Relay_ON_cmd = true;
	}
}
 8001466:	e014      	b.n	8001492 <HAL_UART_RxCpltCallback+0x6a>
				  else if (nRxData3[0] == Rx_ONRL[0] &&
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <HAL_UART_RxCpltCallback+0x78>)
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_UART_RxCpltCallback+0x84>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d10e      	bne.n	8001492 <HAL_UART_RxCpltCallback+0x6a>
					  nRxData3[1] == Rx_ONRL[1] &&
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_UART_RxCpltCallback+0x78>)
 8001476:	785a      	ldrb	r2, [r3, #1]
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_UART_RxCpltCallback+0x84>)
 800147a:	785b      	ldrb	r3, [r3, #1]
				  else if (nRxData3[0] == Rx_ONRL[0] &&
 800147c:	429a      	cmp	r2, r3
 800147e:	d108      	bne.n	8001492 <HAL_UART_RxCpltCallback+0x6a>
					  nRxData3[2] == Rx_ONRL[2])
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_UART_RxCpltCallback+0x78>)
 8001482:	789a      	ldrb	r2, [r3, #2]
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_UART_RxCpltCallback+0x84>)
 8001486:	789b      	ldrb	r3, [r3, #2]
					  nRxData3[1] == Rx_ONRL[1] &&
 8001488:	429a      	cmp	r2, r3
 800148a:	d102      	bne.n	8001492 <HAL_UART_RxCpltCallback+0x6a>
					  Relay_ON_cmd = true;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_UART_RxCpltCallback+0x80>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000408 	.word	0x20000408
 80014a0:	20000514 	.word	0x20000514
 80014a4:	2000000c 	.word	0x2000000c
 80014a8:	20000517 	.word	0x20000517
 80014ac:	20000008 	.word	0x20000008

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b0c0      	sub	sp, #256	@ 0x100
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b6:	f001 f81b 	bl	80024f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ba:	f000 f927 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014be:	f000 fabb 	bl	8001a38 <MX_GPIO_Init>
  MX_DMA_Init();
 80014c2:	f000 fa9b 	bl	80019fc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014c6:	f000 fa07 	bl	80018d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80014ca:	f000 fa6d 	bl	80019a8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80014ce:	f000 f979 	bl	80017c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80014d2:	f000 f9d3 	bl	800187c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80014d6:	f006 fb97 	bl	8007c08 <ssd1306_Init>
  display_Bat_InitInfo();
 80014da:	f006 fdad 	bl	8008038 <display_Bat_InitInfo>

  UARTStdioConfig(USART1,USART1_IRQn, true);
 80014de:	2201      	movs	r2, #1
 80014e0:	2125      	movs	r1, #37	@ 0x25
 80014e2:	4873      	ldr	r0, [pc, #460]	@ (80016b0 <main+0x200>)
 80014e4:	f006 ffbe 	bl	8008464 <UARTStdioConfig>
  UARTprintf("***UARTprintf configured***\n");
 80014e8:	4872      	ldr	r0, [pc, #456]	@ (80016b4 <main+0x204>)
 80014ea:	f007 fa47 	bl	800897c <UARTprintf>

//  HAL_ADC_Start_DMA(&hadc1, adc_value, NUM_CHANNELS);

  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014f4:	4870      	ldr	r0, [pc, #448]	@ (80016b8 <main+0x208>)
 80014f6:	f002 f998 	bl	800382a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001500:	486d      	ldr	r0, [pc, #436]	@ (80016b8 <main+0x208>)
 8001502:	f002 f992 	bl	800382a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800150c:	486a      	ldr	r0, [pc, #424]	@ (80016b8 <main+0x208>)
 800150e:	f002 f98c 	bl	800382a <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart3, (uint8_t *)nRxData, 3);
 8001512:	2203      	movs	r2, #3
 8001514:	4969      	ldr	r1, [pc, #420]	@ (80016bc <main+0x20c>)
 8001516:	486a      	ldr	r0, [pc, #424]	@ (80016c0 <main+0x210>)
 8001518:	f003 fbfd 	bl	8004d16 <HAL_UART_Receive_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_Temp_ESP */
  osMessageQDef(Queue_Temp_ESP, 16, uint16_t);
 800151c:	4b69      	ldr	r3, [pc, #420]	@ (80016c4 <main+0x214>)
 800151e:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Temp_ESPHandle = osMessageCreate(osMessageQ(Queue_Temp_ESP), NULL);
 8001528:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fd3a 	bl	8005fa8 <osMessageCreate>
 8001534:	4603      	mov	r3, r0
 8001536:	4a64      	ldr	r2, [pc, #400]	@ (80016c8 <main+0x218>)
 8001538:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_Temp_OLED */
  osMessageQDef(Queue_Temp_OLED, 16, uint16_t);
 800153a:	4b62      	ldr	r3, [pc, #392]	@ (80016c4 <main+0x214>)
 800153c:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 8001540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Temp_OLEDHandle = osMessageCreate(osMessageQ(Queue_Temp_OLED), NULL);
 8001546:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fd2b 	bl	8005fa8 <osMessageCreate>
 8001552:	4603      	mov	r3, r0
 8001554:	4a5d      	ldr	r2, [pc, #372]	@ (80016cc <main+0x21c>)
 8001556:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_Volt_ESP */
  osMessageQDef(Queue_Volt_ESP, 16, uint16_t);
 8001558:	4b5a      	ldr	r3, [pc, #360]	@ (80016c4 <main+0x214>)
 800155a:	f107 04d0 	add.w	r4, r7, #208	@ 0xd0
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Volt_ESPHandle = osMessageCreate(osMessageQ(Queue_Volt_ESP), NULL);
 8001564:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fd1c 	bl	8005fa8 <osMessageCreate>
 8001570:	4603      	mov	r3, r0
 8001572:	4a57      	ldr	r2, [pc, #348]	@ (80016d0 <main+0x220>)
 8001574:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_Volt_OLED */
  osMessageQDef(Queue_Volt_OLED, 16, uint16_t);
 8001576:	4b53      	ldr	r3, [pc, #332]	@ (80016c4 <main+0x214>)
 8001578:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 800157c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Volt_OLEDHandle = osMessageCreate(osMessageQ(Queue_Volt_OLED), NULL);
 8001582:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f004 fd0d 	bl	8005fa8 <osMessageCreate>
 800158e:	4603      	mov	r3, r0
 8001590:	4a50      	ldr	r2, [pc, #320]	@ (80016d4 <main+0x224>)
 8001592:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_Volt_Actuator */
  osMessageQDef(Queue_Volt_Actuator, 16, uint16_t);
 8001594:	4b4b      	ldr	r3, [pc, #300]	@ (80016c4 <main+0x214>)
 8001596:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800159a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Volt_ActuatorHandle = osMessageCreate(osMessageQ(Queue_Volt_Actuator), NULL);
 80015a0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fcfe 	bl	8005fa8 <osMessageCreate>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a4a      	ldr	r2, [pc, #296]	@ (80016d8 <main+0x228>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_Curr_ESP */
  osMessageQDef(Queue_Curr_ESP, 16, uint16_t);
 80015b2:	4b44      	ldr	r3, [pc, #272]	@ (80016c4 <main+0x214>)
 80015b4:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 80015b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Curr_ESPHandle = osMessageCreate(osMessageQ(Queue_Curr_ESP), NULL);
 80015be:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fcef 	bl	8005fa8 <osMessageCreate>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a43      	ldr	r2, [pc, #268]	@ (80016dc <main+0x22c>)
 80015ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Queue_Curr_OLED */
  osMessageQDef(Queue_Curr_OLED, 16, uint16_t);
 80015d0:	4b3c      	ldr	r3, [pc, #240]	@ (80016c4 <main+0x214>)
 80015d2:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80015d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Curr_OLEDHandle = osMessageCreate(osMessageQ(Queue_Curr_OLED), NULL);
 80015dc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fce0 	bl	8005fa8 <osMessageCreate>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a3d      	ldr	r2, [pc, #244]	@ (80016e0 <main+0x230>)
 80015ec:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ActuatorTask */
  osThreadDef(ActuatorTask, Actuator_Task, osPriorityNormal, 0, 128);
 80015ee:	4b3d      	ldr	r3, [pc, #244]	@ (80016e4 <main+0x234>)
 80015f0:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80015f4:	461d      	mov	r5, r3
 80015f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ActuatorTaskHandle = osThreadCreate(osThread(ActuatorTask), NULL);
 8001602:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fc6d 	bl	8005ee8 <osThreadCreate>
 800160e:	4603      	mov	r3, r0
 8001610:	4a35      	ldr	r2, [pc, #212]	@ (80016e8 <main+0x238>)
 8001612:	6013      	str	r3, [r2, #0]

  /* definition and creation of TxtoESPTask */
  osThreadDef(TxtoESPTask, Tx_toESP_Task, osPriorityNormal, 0, 128);
 8001614:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <main+0x23c>)
 8001616:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800161a:	461d      	mov	r5, r3
 800161c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TxtoESPTaskHandle = osThreadCreate(osThread(TxtoESPTask), NULL);
 8001628:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fc5a 	bl	8005ee8 <osThreadCreate>
 8001634:	4603      	mov	r3, r0
 8001636:	4a2e      	ldr	r2, [pc, #184]	@ (80016f0 <main+0x240>)
 8001638:	6013      	str	r3, [r2, #0]

  /* definition and creation of getBattTask */
  osThreadDef(getBattTask, getBatt_info_Task, osPriorityNormal, 0, 128);
 800163a:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <main+0x244>)
 800163c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001640:	461d      	mov	r5, r3
 8001642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800164a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  getBattTaskHandle = osThreadCreate(osThread(getBattTask), NULL);
 800164e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fc47 	bl	8005ee8 <osThreadCreate>
 800165a:	4603      	mov	r3, r0
 800165c:	4a26      	ldr	r2, [pc, #152]	@ (80016f8 <main+0x248>)
 800165e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SwitchTask */
  osThreadDef(SwitchTask, Switch_Task, osPriorityNormal, 0, 128);
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <main+0x24c>)
 8001662:	f107 0420 	add.w	r4, r7, #32
 8001666:	461d      	mov	r5, r3
 8001668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SwitchTaskHandle = osThreadCreate(osThread(SwitchTask), NULL);
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f004 fc34 	bl	8005ee8 <osThreadCreate>
 8001680:	4603      	mov	r3, r0
 8001682:	4a1f      	ldr	r2, [pc, #124]	@ (8001700 <main+0x250>)
 8001684:	6013      	str	r3, [r2, #0]

  /* definition and creation of OLEDTask */
  osThreadDef(OLEDTask, OLED_Task, osPriorityNormal, 0, 128);
 8001686:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <main+0x254>)
 8001688:	1d3c      	adds	r4, r7, #4
 800168a:	461d      	mov	r5, r3
 800168c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OLEDTaskHandle = osThreadCreate(osThread(OLEDTask), NULL);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f004 fc23 	bl	8005ee8 <osThreadCreate>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <main+0x258>)
 80016a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016a8:	f004 fc17 	bl	8005eda <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <main+0x1fc>
 80016b0:	40013800 	.word	0x40013800
 80016b4:	0800b6d0 	.word	0x0800b6d0
 80016b8:	40011000 	.word	0x40011000
 80016bc:	2000048c 	.word	0x2000048c
 80016c0:	20000408 	.word	0x20000408
 80016c4:	0800b6f0 	.word	0x0800b6f0
 80016c8:	20000464 	.word	0x20000464
 80016cc:	20000468 	.word	0x20000468
 80016d0:	2000046c 	.word	0x2000046c
 80016d4:	20000470 	.word	0x20000470
 80016d8:	20000474 	.word	0x20000474
 80016dc:	20000478 	.word	0x20000478
 80016e0:	2000047c 	.word	0x2000047c
 80016e4:	0800b710 	.word	0x0800b710
 80016e8:	20000450 	.word	0x20000450
 80016ec:	0800b738 	.word	0x0800b738
 80016f0:	20000454 	.word	0x20000454
 80016f4:	0800b760 	.word	0x0800b760
 80016f8:	20000458 	.word	0x20000458
 80016fc:	0800b788 	.word	0x0800b788
 8001700:	2000045c 	.word	0x2000045c
 8001704:	0800b7b0 	.word	0x0800b7b0
 8001708:	20000460 	.word	0x20000460

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	@ 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001716:	2228      	movs	r2, #40	@ 0x28
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f007 fc47 	bl	8008fae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174a:	2301      	movs	r3, #1
 800174c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174e:	2302      	movs	r3, #2
 8001750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001758:	f44f 13a0 	mov.w	r3, #1310720	@ 0x140000
 800175c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fd3e 	bl	80041e4 <HAL_RCC_OscConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800176e:	f000 fc45 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	230f      	movs	r3, #15
 8001774:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001782:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2102      	movs	r1, #2
 800178e:	4618      	mov	r0, r3
 8001790:	f002 ffaa 	bl	80046e8 <HAL_RCC_ClockConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800179a:	f000 fc2f 	bl	8001ffc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800179e:	2302      	movs	r3, #2
 80017a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80017a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 f92a 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017b6:	f000 fc21 	bl	8001ffc <Error_Handler>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3750      	adds	r7, #80	@ 0x50
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <MX_ADC1_Init+0xb0>)
 80017d6:	4a28      	ldr	r2, [pc, #160]	@ (8001878 <MX_ADC1_Init+0xb4>)
 80017d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <MX_ADC1_Init+0xb0>)
 80017dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <MX_ADC1_Init+0xb0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <MX_ADC1_Init+0xb0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <MX_ADC1_Init+0xb0>)
 80017f0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80017f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <MX_ADC1_Init+0xb0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <MX_ADC1_Init+0xb0>)
 80017fe:	2203      	movs	r2, #3
 8001800:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001802:	481c      	ldr	r0, [pc, #112]	@ (8001874 <MX_ADC1_Init+0xb0>)
 8001804:	f000 fefa 	bl	80025fc <HAL_ADC_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800180e:	f000 fbf5 	bl	8001ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001812:	2302      	movs	r3, #2
 8001814:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001816:	2301      	movs	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <MX_ADC1_Init+0xb0>)
 8001824:	f001 f8bc 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800182e:	f000 fbe5 	bl	8001ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001832:	2303      	movs	r3, #3
 8001834:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001836:	2302      	movs	r3, #2
 8001838:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4619      	mov	r1, r3
 800183e:	480d      	ldr	r0, [pc, #52]	@ (8001874 <MX_ADC1_Init+0xb0>)
 8001840:	f001 f8ae 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800184a:	f000 fbd7 	bl	8001ffc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800184e:	2304      	movs	r3, #4
 8001850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001852:	2303      	movs	r3, #3
 8001854:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <MX_ADC1_Init+0xb0>)
 800185c:	f001 f8a0 	bl	80029a0 <HAL_ADC_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001866:	f000 fbc9 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000340 	.word	0x20000340
 8001878:	40012400 	.word	0x40012400

0800187c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_I2C1_Init+0x50>)
 8001882:	4a13      	ldr	r2, [pc, #76]	@ (80018d0 <MX_I2C1_Init+0x54>)
 8001884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_I2C1_Init+0x50>)
 8001888:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <MX_I2C1_Init+0x58>)
 800188a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_I2C1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_I2C1_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_I2C1_Init+0x50>)
 800189a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800189e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_I2C1_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_I2C1_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_I2C1_Init+0x50>)
 80018ba:	f001 ffe7 	bl	800388c <HAL_I2C_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c4:	f000 fb9a 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200003b4 	.word	0x200003b4
 80018d0:	40005400 	.word	0x40005400
 80018d4:	000186a0 	.word	0x000186a0

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	@ 0x30
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001900:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001904:	f7ff fcbe 	bl	8001284 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001908:	2008      	movs	r0, #8
 800190a:	f7ff fcbb 	bl	8001284 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800190e:	f244 0340 	movw	r3, #16448	@ 0x4040
 8001912:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001914:	2309      	movs	r3, #9
 8001916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	481e      	ldr	r0, [pc, #120]	@ (80019a0 <MX_USART1_UART_Init+0xc8>)
 8001926:	f004 f853 	bl	80059d0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800192a:	f248 0380 	movw	r3, #32896	@ 0x8080
 800192e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001930:	2304      	movs	r3, #4
 8001932:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4819      	ldr	r0, [pc, #100]	@ (80019a0 <MX_USART1_UART_Init+0xc8>)
 800193a:	f004 f849 	bl	80059d0 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 800193e:	f7ff fcb9 	bl	80012b4 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001942:	f7ff fbf5 	bl	8001130 <__NVIC_GetPriorityGrouping>
 8001946:	4603      	mov	r3, r0
 8001948:	2200      	movs	r2, #0
 800194a:	2105      	movs	r1, #5
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fc43 	bl	80011d8 <NVIC_EncodePriority>
 8001952:	4603      	mov	r3, r0
 8001954:	4619      	mov	r1, r3
 8001956:	2025      	movs	r0, #37	@ 0x25
 8001958:	f7ff fc14 	bl	8001184 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800195c:	2025      	movs	r0, #37	@ 0x25
 800195e:	f7ff fbf5 	bl	800114c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001962:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001966:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001974:	230c      	movs	r3, #12
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <MX_USART1_UART_Init+0xcc>)
 8001988:	f004 fa30 	bl	8005dec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_USART1_UART_Init+0xcc>)
 800198e:	f7ff fc64 	bl	800125a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001992:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <MX_USART1_UART_Init+0xcc>)
 8001994:	f7ff fc52 	bl	800123c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	3730      	adds	r7, #48	@ 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40013800 	.word	0x40013800

080019a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <MX_USART3_UART_Init+0x50>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <MX_USART3_UART_Init+0x4c>)
 80019e0:	f003 f8c6 	bl	8004b70 <HAL_UART_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ea:	f000 fb07 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000408 	.word	0x20000408
 80019f8:	40004800 	.word	0x40004800

080019fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <MX_DMA_Init+0x38>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <MX_DMA_Init+0x38>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <MX_DMA_Init+0x38>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	200b      	movs	r0, #11
 8001a20:	f001 fa8f 	bl	8002f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a24:	200b      	movs	r0, #11
 8001a26:	f001 faa8 	bl	8002f7a <HAL_NVIC_EnableIRQ>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a2c      	ldr	r2, [pc, #176]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a64:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a26      	ldr	r2, [pc, #152]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b24      	ldr	r3, [pc, #144]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a20      	ldr	r2, [pc, #128]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a1a      	ldr	r2, [pc, #104]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <MX_GPIO_Init+0xcc>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD_Pin|Buzz_Pin|Relay_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001ab2:	4815      	ldr	r0, [pc, #84]	@ (8001b08 <MX_GPIO_Init+0xd0>)
 8001ab4:	f001 feb9 	bl	800382a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_GPIO_Port, SW_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2120      	movs	r1, #32
 8001abc:	4813      	ldr	r0, [pc, #76]	@ (8001b0c <MX_GPIO_Init+0xd4>)
 8001abe:	f001 feb4 	bl	800382a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_Pin Buzz_Pin Relay_Pin */
  GPIO_InitStruct.Pin = LD_Pin|Buzz_Pin|Relay_Pin;
 8001ac2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480b      	ldr	r0, [pc, #44]	@ (8001b08 <MX_GPIO_Init+0xd0>)
 8001adc:	f001 fd0a 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_GPIO_Init+0xd4>)
 8001af8:	f001 fcfc 	bl	80034f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40010800 	.word	0x40010800

08001b10 <Actuator_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Actuator_Task */
void Actuator_Task(void const * argument)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b1e:	4825      	ldr	r0, [pc, #148]	@ (8001bb4 <Actuator_Task+0xa4>)
 8001b20:	f001 fe83 	bl	800382a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b2a:	4822      	ldr	r0, [pc, #136]	@ (8001bb4 <Actuator_Task+0xa4>)
 8001b2c:	f001 fe7d 	bl	800382a <HAL_GPIO_WritePin>
//		  if (memcmp(nRxData3,Rx_OFRL,3) == 1)
//			  Relay_ON_cmd = false;
//		  else if (memcmp(nRxData3,Rx_ONRL,3)==1)
//			  Relay_ON_cmd = true;

	  HAL_UART_Receive_IT(&huart3, (uint8_t *)nRxData3, 3);
 8001b30:	2203      	movs	r2, #3
 8001b32:	4921      	ldr	r1, [pc, #132]	@ (8001bb8 <Actuator_Task+0xa8>)
 8001b34:	4821      	ldr	r0, [pc, #132]	@ (8001bbc <Actuator_Task+0xac>)
 8001b36:	f003 f8ee 	bl	8004d16 <HAL_UART_Receive_IT>

	  uint16_t Volt;
		xQueueReceive(Queue_Volt_ActuatorHandle, &Volt, 3); //get volt
 8001b3a:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <Actuator_Task+0xb0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f107 010e 	add.w	r1, r7, #14
 8001b42:	2203      	movs	r2, #3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 fd4d 	bl	80065e4 <xQueueReceive>
		if (Volt < 1024)
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b50:	d214      	bcs.n	8001b7c <Actuator_Task+0x6c>
		{
			HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
 8001b52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b56:	4817      	ldr	r0, [pc, #92]	@ (8001bb4 <Actuator_Task+0xa4>)
 8001b58:	f001 fe7f 	bl	800385a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(Buzz_GPIO_Port, Buzz_Pin, 1);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b62:	4814      	ldr	r0, [pc, #80]	@ (8001bb4 <Actuator_Task+0xa4>)
 8001b64:	f001 fe61 	bl	800382a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6e:	4811      	ldr	r0, [pc, #68]	@ (8001bb4 <Actuator_Task+0xa4>)
 8001b70:	f001 fe5b 	bl	800382a <HAL_GPIO_WritePin>
			UARTprintf("Actuator_Task: LOW POWER !!!\n");
 8001b74:	4813      	ldr	r0, [pc, #76]	@ (8001bc4 <Actuator_Task+0xb4>)
 8001b76:	f006 ff01 	bl	800897c <UARTprintf>
 8001b7a:	e016      	b.n	8001baa <Actuator_Task+0x9a>
		}
		else if (Relay_ON_cmd){
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <Actuator_Task+0xb8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <Actuator_Task+0x88>
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, 1);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b8a:	480a      	ldr	r0, [pc, #40]	@ (8001bb4 <Actuator_Task+0xa4>)
 8001b8c:	f001 fe4d 	bl	800382a <HAL_GPIO_WritePin>
			UARTprintf("Actuator_Task: Relay ON\n");
 8001b90:	480e      	ldr	r0, [pc, #56]	@ (8001bcc <Actuator_Task+0xbc>)
 8001b92:	f006 fef3 	bl	800897c <UARTprintf>
 8001b96:	e008      	b.n	8001baa <Actuator_Task+0x9a>
		}
		else{
			HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <Actuator_Task+0xa4>)
 8001ba0:	f001 fe43 	bl	800382a <HAL_GPIO_WritePin>
			UARTprintf("Actuator_Task: Relay OFF\n");
 8001ba4:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <Actuator_Task+0xc0>)
 8001ba6:	f006 fee9 	bl	800897c <UARTprintf>
		}

//	  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, 1);

		osDelay(50);
 8001baa:	2032      	movs	r0, #50	@ 0x32
 8001bac:	f004 f9e8 	bl	8005f80 <osDelay>
  {
 8001bb0:	e7b2      	b.n	8001b18 <Actuator_Task+0x8>
 8001bb2:	bf00      	nop
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	20000514 	.word	0x20000514
 8001bbc:	20000408 	.word	0x20000408
 8001bc0:	20000474 	.word	0x20000474
 8001bc4:	0800b7cc 	.word	0x0800b7cc
 8001bc8:	20000517 	.word	0x20000517
 8001bcc:	0800b7ec 	.word	0x0800b7ec
 8001bd0:	0800b808 	.word	0x0800b808

08001bd4 <Tx_toESP_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tx_toESP_Task */
void Tx_toESP_Task(void const * argument)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tx_toESP_Task */
  /* Infinite loop */
  for(;;)
  {
		nTxData[0] = Tx_STX[0];
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <Tx_toESP_Task+0xa0>)
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001be2:	701a      	strb	r2, [r3, #0]
		uint16_t Temp;
		xQueueReceive(Queue_Temp_ESPHandle, &Temp, 3);
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <Tx_toESP_Task+0xa8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f107 010e 	add.w	r1, r7, #14
 8001bec:	2203      	movs	r2, #3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 fcf8 	bl	80065e4 <xQueueReceive>
		nTxData[1] = (Temp>>8)&(0xFF);
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001bfe:	705a      	strb	r2, [r3, #1]
		nTxData[2] = (Temp>>0)&(0xFF);
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001c06:	709a      	strb	r2, [r3, #2]

		uint16_t Volt;
		xQueueReceive(Queue_Volt_ESPHandle, &Volt, 3);
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <Tx_toESP_Task+0xac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f107 010c 	add.w	r1, r7, #12
 8001c10:	2203      	movs	r2, #3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fce6 	bl	80065e4 <xQueueReceive>
		nTxData[3] = (Volt>>8)&(0xFF);
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001c22:	70da      	strb	r2, [r3, #3]
		nTxData[4] = (Volt>>0)&(0xFF);
 8001c24:	89bb      	ldrh	r3, [r7, #12]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001c2a:	711a      	strb	r2, [r3, #4]

		uint16_t Curr;
		xQueueReceive(Queue_Curr_ESPHandle, &Curr, 3);
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <Tx_toESP_Task+0xb0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f107 010a 	add.w	r1, r7, #10
 8001c34:	2203      	movs	r2, #3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fcd4 	bl	80065e4 <xQueueReceive>
		nTxData[5] = (Curr>>8)&(0xFF);
 8001c3c:	897b      	ldrh	r3, [r7, #10]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001c46:	715a      	strb	r2, [r3, #5]
		nTxData[6] = (Curr>>0)&(0xFF);
 8001c48:	897b      	ldrh	r3, [r7, #10]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001c4e:	719a      	strb	r2, [r3, #6]


		nTxData[7] = Tx_ETX[0];
 8001c50:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <Tx_toESP_Task+0xb4>)
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001c56:	71da      	strb	r2, [r3, #7]

		taskENTER_CRITICAL();
 8001c58:	f005 feb8 	bl	80079cc <vPortEnterCritical>
		WriteComm(nTxData, MAX_TxLEN);
 8001c5c:	2108      	movs	r1, #8
 8001c5e:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <Tx_toESP_Task+0xa4>)
 8001c60:	f7ff fbc8 	bl	80013f4 <WriteComm>
		taskEXIT_CRITICAL();
 8001c64:	f005 fee2 	bl	8007a2c <vPortExitCritical>


    osDelay(50);
 8001c68:	2032      	movs	r0, #50	@ 0x32
 8001c6a:	f004 f989 	bl	8005f80 <osDelay>
  {
 8001c6e:	bf00      	nop
 8001c70:	e7b4      	b.n	8001bdc <Tx_toESP_Task+0x8>
 8001c72:	bf00      	nop
 8001c74:	20000000 	.word	0x20000000
 8001c78:	2000050c 	.word	0x2000050c
 8001c7c:	20000464 	.word	0x20000464
 8001c80:	2000046c 	.word	0x2000046c
 8001c84:	20000478 	.word	0x20000478
 8001c88:	20000004 	.word	0x20000004

08001c8c <getBatt_info_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getBatt_info_Task */
void getBatt_info_Task(void const * argument)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getBatt_info_Task */
  /* Infinite loop */
  for(;;)
  {
		while (HAL_ADC_Start_DMA(&hadc1, adc_value, NUM_CHANNELS)!=HAL_OK);
 8001c94:	bf00      	nop
 8001c96:	2203      	movs	r2, #3
 8001c98:	491d      	ldr	r1, [pc, #116]	@ (8001d10 <getBatt_info_Task+0x84>)
 8001c9a:	481e      	ldr	r0, [pc, #120]	@ (8001d14 <getBatt_info_Task+0x88>)
 8001c9c:	f000 fd86 	bl	80027ac <HAL_ADC_Start_DMA>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f7      	bne.n	8001c96 <getBatt_info_Task+0xa>
//		UARTprintf("ADC_Task: Got Temp.s\n");


		xQueueSend(Queue_Temp_ESPHandle, &adc_value[0], 3);
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <getBatt_info_Task+0x8c>)
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	2300      	movs	r3, #0
 8001cac:	2203      	movs	r2, #3
 8001cae:	4918      	ldr	r1, [pc, #96]	@ (8001d10 <getBatt_info_Task+0x84>)
 8001cb0:	f004 fb96 	bl	80063e0 <xQueueGenericSend>
		xQueueSend(Queue_Volt_ESPHandle, &adc_value[1], 3);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <getBatt_info_Task+0x90>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2203      	movs	r2, #3
 8001cbc:	4918      	ldr	r1, [pc, #96]	@ (8001d20 <getBatt_info_Task+0x94>)
 8001cbe:	f004 fb8f 	bl	80063e0 <xQueueGenericSend>
		xQueueSend(Queue_Curr_ESPHandle, &adc_value[2], 3);
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <getBatt_info_Task+0x98>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2203      	movs	r2, #3
 8001cca:	4917      	ldr	r1, [pc, #92]	@ (8001d28 <getBatt_info_Task+0x9c>)
 8001ccc:	f004 fb88 	bl	80063e0 <xQueueGenericSend>

		xQueueSend(Queue_Temp_OLEDHandle, &adc_value[0], 3);
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <getBatt_info_Task+0xa0>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	490d      	ldr	r1, [pc, #52]	@ (8001d10 <getBatt_info_Task+0x84>)
 8001cda:	f004 fb81 	bl	80063e0 <xQueueGenericSend>
		xQueueSend(Queue_Volt_OLEDHandle, &adc_value[1], 3);
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <getBatt_info_Task+0xa4>)
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	490e      	ldr	r1, [pc, #56]	@ (8001d20 <getBatt_info_Task+0x94>)
 8001ce8:	f004 fb7a 	bl	80063e0 <xQueueGenericSend>
		xQueueSend(Queue_Curr_OLEDHandle, &adc_value[2], 3);
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <getBatt_info_Task+0xa8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <getBatt_info_Task+0x9c>)
 8001cf6:	f004 fb73 	bl	80063e0 <xQueueGenericSend>

		xQueueSend(Queue_Volt_ActuatorHandle, &adc_value[1], 3);
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <getBatt_info_Task+0xac>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2203      	movs	r2, #3
 8001d02:	4907      	ldr	r1, [pc, #28]	@ (8001d20 <getBatt_info_Task+0x94>)
 8001d04:	f004 fb6c 	bl	80063e0 <xQueueGenericSend>

    osDelay(200);
 8001d08:	20c8      	movs	r0, #200	@ 0xc8
 8001d0a:	f004 f939 	bl	8005f80 <osDelay>
		while (HAL_ADC_Start_DMA(&hadc1, adc_value, NUM_CHANNELS)!=HAL_OK);
 8001d0e:	e7c1      	b.n	8001c94 <getBatt_info_Task+0x8>
 8001d10:	20000484 	.word	0x20000484
 8001d14:	20000340 	.word	0x20000340
 8001d18:	20000464 	.word	0x20000464
 8001d1c:	2000046c 	.word	0x2000046c
 8001d20:	20000486 	.word	0x20000486
 8001d24:	20000478 	.word	0x20000478
 8001d28:	20000488 	.word	0x20000488
 8001d2c:	20000468 	.word	0x20000468
 8001d30:	20000470 	.word	0x20000470
 8001d34:	2000047c 	.word	0x2000047c
 8001d38:	20000474 	.word	0x20000474

08001d3c <Switch_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Switch_Task */
void Switch_Task(void const * argument)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Switch_Task */
  /* Infinite loop */
  for(;;)
  {
		if (HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin)==1) {
 8001d44:	2120      	movs	r1, #32
 8001d46:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <Switch_Task+0x2c>)
 8001d48:	f001 fd58 	bl	80037fc <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d103      	bne.n	8001d5a <Switch_Task+0x1e>
			UARTprintf("SW_Task: Button Pressed\n");
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <Switch_Task+0x30>)
 8001d54:	f006 fe12 	bl	800897c <UARTprintf>
 8001d58:	e002      	b.n	8001d60 <Switch_Task+0x24>
//			HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);
		}
		else {
			UARTprintf("SW_Task: Button Released\n");
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <Switch_Task+0x34>)
 8001d5c:	f006 fe0e 	bl	800897c <UARTprintf>
		}
    osDelay(50);
 8001d60:	2032      	movs	r0, #50	@ 0x32
 8001d62:	f004 f90d 	bl	8005f80 <osDelay>
		if (HAL_GPIO_ReadPin(SW_GPIO_Port, SW_Pin)==1) {
 8001d66:	e7ed      	b.n	8001d44 <Switch_Task+0x8>
 8001d68:	40010800 	.word	0x40010800
 8001d6c:	0800b824 	.word	0x0800b824
 8001d70:	0800b840 	.word	0x0800b840
 8001d74:	00000000 	.word	0x00000000

08001d78 <OLED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OLED_Task */
void OLED_Task(void const * argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	@ 0x40
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


		initBff(Temp_str, 4);
 8001d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d84:	2104      	movs	r1, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f006 f9d4 	bl	8008134 <initBff>
		initBff(Volt_str, 4);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	2104      	movs	r1, #4
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 f9ce 	bl	8008134 <initBff>
		initBff(Curr_str, 4);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f006 f9c8 	bl	8008134 <initBff>
		initBff(Level_str, 4);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	2104      	movs	r1, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f006 f9c2 	bl	8008134 <initBff>

		xQueueReceive(Queue_Temp_OLEDHandle, &Temp, 3);//get temp
 8001db0:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe8 <OLED_Task+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 8001db8:	2203      	movs	r2, #3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fc12 	bl	80065e4 <xQueueReceive>

		xQueueReceive(Queue_Volt_OLEDHandle, &Volt, 3);//get volt
 8001dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8001fec <OLED_Task+0x274>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 fc0a 	bl	80065e4 <xQueueReceive>

		xQueueReceive(Queue_Curr_OLEDHandle, &Curr, 3);//get current
 8001dd0:	4b87      	ldr	r3, [pc, #540]	@ (8001ff0 <OLED_Task+0x278>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f107 012a 	add.w	r1, r7, #42	@ 0x2a
 8001dd8:	2203      	movs	r2, #3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 fc02 	bl	80065e4 <xQueueReceive>



		Temp_val = get_NTC_temp(Temp);
 8001de0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fa78 	bl	80012d8 <get_NTC_temp>
 8001de8:	63f8      	str	r0, [r7, #60]	@ 0x3c
		gcvt(Temp_val, 4, Temp_str);
 8001dea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001dec:	f7fe fb14 	bl	8000418 <__aeabi_f2d>
 8001df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df4:	2204      	movs	r2, #4
 8001df6:	f006 ffb1 	bl	8008d5c <gcvt>

		Volt_val = (float)((Volt*3.3/4020.0)/ratio_VSS);
 8001dfa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe faf9 	bl	80003f4 <__aeabi_i2d>
 8001e02:	a36b      	add	r3, pc, #428	@ (adr r3, 8001fb0 <OLED_Task+0x238>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fb5e 	bl	80004c8 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	a368      	add	r3, pc, #416	@ (adr r3, 8001fb8 <OLED_Task+0x240>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fc7f 	bl	800071c <__aeabi_ddiv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	a366      	add	r3, pc, #408	@ (adr r3, 8001fc0 <OLED_Task+0x248>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fc76 	bl	800071c <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7fe fe3e 	bl	8000ab8 <__aeabi_d2f>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
		Volt_val = (Volt_val < 3.0) ? 0 : Volt_val;
 8001e40:	496c      	ldr	r1, [pc, #432]	@ (8001ff4 <OLED_Task+0x27c>)
 8001e42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e44:	f7ff f934 	bl	80010b0 <__aeabi_fcmplt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <OLED_Task+0xdc>
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e000      	b.n	8001e56 <OLED_Task+0xde>
 8001e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38
		gcvt(Volt_val, 5, Volt_str);
 8001e58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e5a:	f7fe fadd 	bl	8000418 <__aeabi_f2d>
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	2205      	movs	r2, #5
 8001e64:	f006 ff7a 	bl	8008d5c <gcvt>

		Level_val = (float)(71.35*((Volt*3.3/4020.0)/ratio_VSS) - 494.9);
 8001e68:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fac2 	bl	80003f4 <__aeabi_i2d>
 8001e70:	a34f      	add	r3, pc, #316	@ (adr r3, 8001fb0 <OLED_Task+0x238>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fb27 	bl	80004c8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	a34d      	add	r3, pc, #308	@ (adr r3, 8001fb8 <OLED_Task+0x240>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fc48 	bl	800071c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	a34a      	add	r3, pc, #296	@ (adr r3, 8001fc0 <OLED_Task+0x248>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fc3f 	bl	800071c <__aeabi_ddiv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	a348      	add	r3, pc, #288	@ (adr r3, 8001fc8 <OLED_Task+0x250>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fb0c 	bl	80004c8 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	a345      	add	r3, pc, #276	@ (adr r3, 8001fd0 <OLED_Task+0x258>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe f94b 	bl	8000158 <__aeabi_dsub>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fdf5 	bl	8000ab8 <__aeabi_d2f>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	637b      	str	r3, [r7, #52]	@ 0x34
		Level_val = (Level_val > 100.0) ? 100.0 : ((Level_val < 0.0) ? 0.00 : Level_val);
 8001ed2:	4949      	ldr	r1, [pc, #292]	@ (8001ff8 <OLED_Task+0x280>)
 8001ed4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001ed6:	f7ff f909 	bl	80010ec <__aeabi_fcmpgt>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <OLED_Task+0x16c>
 8001ee0:	4b45      	ldr	r3, [pc, #276]	@ (8001ff8 <OLED_Task+0x280>)
 8001ee2:	e00b      	b.n	8001efc <OLED_Task+0x184>
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001eea:	f7ff f8e1 	bl	80010b0 <__aeabi_fcmplt>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <OLED_Task+0x182>
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e000      	b.n	8001efc <OLED_Task+0x184>
 8001efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efc:	637b      	str	r3, [r7, #52]	@ 0x34
		gcvt(Level_val, 6, Level_str);
 8001efe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001f00:	f7fe fa8a 	bl	8000418 <__aeabi_f2d>
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	2206      	movs	r2, #6
 8001f0a:	f006 ff27 	bl	8008d5c <gcvt>


		Curr_val = (float)((Curr/4020.0*3.3)*4.2083 - 11.022);
 8001f0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fa6f 	bl	80003f4 <__aeabi_i2d>
 8001f16:	a328      	add	r3, pc, #160	@ (adr r3, 8001fb8 <OLED_Task+0x240>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fbfe 	bl	800071c <__aeabi_ddiv>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	a321      	add	r3, pc, #132	@ (adr r3, 8001fb0 <OLED_Task+0x238>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe facb 	bl	80004c8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	a327      	add	r3, pc, #156	@ (adr r3, 8001fd8 <OLED_Task+0x260>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fac2 	bl	80004c8 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	a324      	add	r3, pc, #144	@ (adr r3, 8001fe0 <OLED_Task+0x268>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe f901 	bl	8000158 <__aeabi_dsub>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fdab 	bl	8000ab8 <__aeabi_d2f>
 8001f62:	4603      	mov	r3, r0
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
//		Curr_val = (float)(Curr/4020.0*3.3);
		Curr_val = (Volt_val ==0) ? 0.0000 : Curr_val;
 8001f66:	f04f 0100 	mov.w	r1, #0
 8001f6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f6c:	f7ff f896 	bl	800109c <__aeabi_fcmpeq>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <OLED_Task+0x202>
 8001f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f78:	e001      	b.n	8001f7e <OLED_Task+0x206>
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	@ 0x30
		gcvt(Curr_val, 5, Curr_str);
 8001f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f82:	f7fe fa49 	bl	8000418 <__aeabi_f2d>
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	f006 fee6 	bl	8008d5c <gcvt>


//		taskENTER_CRITICAL();
		display_Bat_Info(Level_str, Volt_str, Curr_str, Temp_str);
 8001f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f94:	f107 0214 	add.w	r2, r7, #20
 8001f98:	f107 011c 	add.w	r1, r7, #28
 8001f9c:	f107 000c 	add.w	r0, r7, #12
 8001fa0:	f006 f870 	bl	8008084 <display_Bat_Info>
//		display_Bat_Info("100.0", "8.33", "2.67", "40.7");
//		taskEXIT_CRITICAL();


    osDelay(150);
 8001fa4:	2096      	movs	r0, #150	@ 0x96
 8001fa6:	f003 ffeb 	bl	8005f80 <osDelay>
  {
 8001faa:	e6e9      	b.n	8001d80 <OLED_Task+0x8>
 8001fac:	f3af 8000 	nop.w
 8001fb0:	66666666 	.word	0x66666666
 8001fb4:	400a6666 	.word	0x400a6666
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	40af6800 	.word	0x40af6800
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	3fc823ee 	.word	0x3fc823ee
 8001fc8:	66666666 	.word	0x66666666
 8001fcc:	4051d666 	.word	0x4051d666
 8001fd0:	66666666 	.word	0x66666666
 8001fd4:	407eee66 	.word	0x407eee66
 8001fd8:	985f06f7 	.word	0x985f06f7
 8001fdc:	4010d54c 	.word	0x4010d54c
 8001fe0:	95810625 	.word	0x95810625
 8001fe4:	40260b43 	.word	0x40260b43
 8001fe8:	20000468 	.word	0x20000468
 8001fec:	20000470 	.word	0x20000470
 8001ff0:	2000047c 	.word	0x2000047c
 8001ff4:	40400000 	.word	0x40400000
 8001ff8:	42c80000 	.word	0x42c80000

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <Error_Handler+0x8>

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_MspInit+0x68>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <HAL_MspInit+0x68>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6193      	str	r3, [r2, #24]
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_MspInit+0x68>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_MspInit+0x68>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_MspInit+0x68>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <HAL_MspInit+0x68>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	210f      	movs	r1, #15
 8002042:	f06f 0001 	mvn.w	r0, #1
 8002046:	f000 ff7c 	bl	8002f42 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_MspInit+0x6c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_MspInit+0x6c>)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40010000 	.word	0x40010000

08002078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a28      	ldr	r2, [pc, #160]	@ (8002134 <HAL_ADC_MspInit+0xbc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d149      	bne.n	800212c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002098:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_ADC_MspInit+0xc0>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <HAL_ADC_MspInit+0xc0>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <HAL_ADC_MspInit+0xc0>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <HAL_ADC_MspInit+0xc0>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a20      	ldr	r2, [pc, #128]	@ (8002138 <HAL_ADC_MspInit+0xc0>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002138 <HAL_ADC_MspInit+0xc0>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80020c8:	231c      	movs	r3, #28
 80020ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020cc:	2303      	movs	r3, #3
 80020ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4619      	mov	r1, r3
 80020d6:	4819      	ldr	r0, [pc, #100]	@ (800213c <HAL_ADC_MspInit+0xc4>)
 80020d8:	f001 fa0c 	bl	80034f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020dc:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 80020de:	4a19      	ldr	r2, [pc, #100]	@ (8002144 <HAL_ADC_MspInit+0xcc>)
 80020e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 80020f0:	2280      	movs	r2, #128	@ 0x80
 80020f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 80020f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020fc:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 80020fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002102:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002104:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 8002106:	2220      	movs	r2, #32
 8002108:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 800210c:	2200      	movs	r2, #0
 800210e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002110:	480b      	ldr	r0, [pc, #44]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 8002112:	f000 ff4d 	bl	8002fb0 <HAL_DMA_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800211c:	f7ff ff6e 	bl	8001ffc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 8002124:	621a      	str	r2, [r3, #32]
 8002126:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <HAL_ADC_MspInit+0xc8>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800212c:	bf00      	nop
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40012400 	.word	0x40012400
 8002138:	40021000 	.word	0x40021000
 800213c:	40010800 	.word	0x40010800
 8002140:	20000370 	.word	0x20000370
 8002144:	40020008 	.word	0x40020008

08002148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_I2C_MspInit+0x90>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d132      	bne.n	80021ce <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002168:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <HAL_I2C_MspInit+0x94>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <HAL_I2C_MspInit+0x94>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_I2C_MspInit+0x94>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002180:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002186:	2312      	movs	r3, #18
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4812      	ldr	r0, [pc, #72]	@ (80021e0 <HAL_I2C_MspInit+0x98>)
 8002196:	f001 f9ad 	bl	80034f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800219a:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_I2C_MspInit+0x9c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b0:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <HAL_I2C_MspInit+0x9c>)
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <HAL_I2C_MspInit+0x94>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a08      	ldr	r2, [pc, #32]	@ (80021dc <HAL_I2C_MspInit+0x94>)
 80021bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_I2C_MspInit+0x94>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	@ 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40005400 	.word	0x40005400
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	40010000 	.word	0x40010000

080021e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_UART_MspInit+0x9c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d139      	bne.n	800227c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <HAL_UART_MspInit+0xa0>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4a1e      	ldr	r2, [pc, #120]	@ (8002288 <HAL_UART_MspInit+0xa0>)
 800220e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <HAL_UART_MspInit+0xa0>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_UART_MspInit+0xa0>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <HAL_UART_MspInit+0xa0>)
 8002226:	f043 0308 	orr.w	r3, r3, #8
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_UART_MspInit+0xa0>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800223c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4619      	mov	r1, r3
 800224c:	480f      	ldr	r0, [pc, #60]	@ (800228c <HAL_UART_MspInit+0xa4>)
 800224e:	f001 f951 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4619      	mov	r1, r3
 8002266:	4809      	ldr	r0, [pc, #36]	@ (800228c <HAL_UART_MspInit+0xa4>)
 8002268:	f001 f944 	bl	80034f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2105      	movs	r1, #5
 8002270:	2027      	movs	r0, #39	@ 0x27
 8002272:	f000 fe66 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002276:	2027      	movs	r0, #39	@ 0x27
 8002278:	f000 fe7f 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004800 	.word	0x40004800
 8002288:	40021000 	.word	0x40021000
 800228c:	40010c00 	.word	0x40010c00

08002290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <NMI_Handler+0x4>

08002298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <MemManage_Handler+0x4>

080022a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c8:	f000 f958 	bl	800257c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022cc:	f005 f97e 	bl	80075cc <xTaskGetSchedulerState>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022d6:	f005 fbf7 	bl	8007ac8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <DMA1_Channel1_IRQHandler+0x10>)
 80022e6:	f000 ffd1 	bl	800328c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000370 	.word	0x20000370

080022f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTStdioIntHandler();
 80022f8:	f006 fbbe 	bl	8008a78 <UARTStdioIntHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <USART3_IRQHandler+0x10>)
 8002306:	f002 fd2b 	bl	8004d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000408 	.word	0x20000408

08002314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return 1;
 8002318:	2301      	movs	r3, #1
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <_kill>:

int _kill(int pid, int sig)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800232c:	f006 fef4 	bl	8009118 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	2216      	movs	r2, #22
 8002334:	601a      	str	r2, [r3, #0]
  return -1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_exit>:

void _exit (int status)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800234a:	f04f 31ff 	mov.w	r1, #4294967295
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffe7 	bl	8002322 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <_exit+0x12>

08002358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e00a      	b.n	8002380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800236a:	f3af 8000 	nop.w
 800236e:	4601      	mov	r1, r0
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	b2ca      	uxtb	r2, r1
 8002378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	dbf0      	blt.n	800236a <_read+0x12>
  }

  return len;
 8002388:	687b      	ldr	r3, [r7, #4]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e009      	b.n	80023b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	60ba      	str	r2, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbf1      	blt.n	80023a4 <_write+0x12>
  }
  return len;
 80023c0:	687b      	ldr	r3, [r7, #4]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_close>:

int _close(int file)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	605a      	str	r2, [r3, #4]
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <_isatty>:

int _isatty(int file)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002434:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <_sbrk+0x5c>)
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <_sbrk+0x60>)
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002440:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <_sbrk+0x64>)
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <_sbrk+0x68>)
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d207      	bcs.n	800246c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800245c:	f006 fe5c 	bl	8009118 <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	220c      	movs	r2, #12
 8002464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	e009      	b.n	8002480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002472:	4b07      	ldr	r3, [pc, #28]	@ (8002490 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <_sbrk+0x64>)
 800247c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20005000 	.word	0x20005000
 800248c:	00000400 	.word	0x00000400
 8002490:	20000518 	.word	0x20000518
 8002494:	20001048 	.word	0x20001048

08002498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a4:	f7ff fff8 	bl	8002498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a8:	480b      	ldr	r0, [pc, #44]	@ (80024d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024aa:	490c      	ldr	r1, [pc, #48]	@ (80024dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024ac:	4a0c      	ldr	r2, [pc, #48]	@ (80024e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024c0:	4c09      	ldr	r4, [pc, #36]	@ (80024e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ce:	f006 fe29 	bl	8009124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024d2:	f7fe ffed 	bl	80014b0 <main>
  bx lr
 80024d6:	4770      	bx	lr
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80024e0:	0800c2e0 	.word	0x0800c2e0
  ldr r2, =_sbss
 80024e4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80024e8:	20001044 	.word	0x20001044

080024ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC1_2_IRQHandler>
	...

080024f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_Init+0x28>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a07      	ldr	r2, [pc, #28]	@ (8002518 <HAL_Init+0x28>)
 80024fa:	f043 0310 	orr.w	r3, r3, #16
 80024fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002500:	2003      	movs	r0, #3
 8002502:	f000 fd13 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002506:	200f      	movs	r0, #15
 8002508:	f000 f808 	bl	800251c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800250c:	f7ff fd7c 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_InitTick+0x54>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_InitTick+0x58>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fd2b 	bl	8002f96 <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f000 fcf3 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	@ (8002578 <HAL_InitTick+0x5c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000010 	.word	0x20000010
 8002574:	20000018 	.word	0x20000018
 8002578:	20000014 	.word	0x20000014

0800257c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_IncTick+0x1c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_IncTick+0x20>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a03      	ldr	r2, [pc, #12]	@ (800259c <HAL_IncTick+0x20>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	20000018 	.word	0x20000018
 800259c:	2000051c 	.word	0x2000051c

080025a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b02      	ldr	r3, [pc, #8]	@ (80025b0 <HAL_GetTick+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	2000051c 	.word	0x2000051c

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffe0 	bl	80025a0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000018 	.word	0x20000018

080025fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0be      	b.n	800279c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fd1c 	bl	8002078 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 faff 	bl	8002c44 <ADC_ConversionStop_Disable>
 8002646:	4603      	mov	r3, r0
 8002648:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8099 	bne.w	800278a <HAL_ADC_Init+0x18e>
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 8095 	bne.w	800278a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002668:	f023 0302 	bic.w	r3, r3, #2
 800266c:	f043 0202 	orr.w	r2, r3, #2
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800267c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7b1b      	ldrb	r3, [r3, #12]
 8002682:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002684:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	4313      	orrs	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002694:	d003      	beq.n	800269e <HAL_ADC_Init+0xa2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_ADC_Init+0xa8>
 800269e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a2:	e000      	b.n	80026a6 <HAL_ADC_Init+0xaa>
 80026a4:	2300      	movs	r3, #0
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7d1b      	ldrb	r3, [r3, #20]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d119      	bne.n	80026e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7b1b      	ldrb	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	035a      	lsls	r2, r3, #13
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	e00b      	b.n	80026e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4b28      	ldr	r3, [pc, #160]	@ (80027a4 <HAL_ADC_Init+0x1a8>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	430b      	orrs	r3, r1
 800270e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002718:	d003      	beq.n	8002722 <HAL_ADC_Init+0x126>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d104      	bne.n	800272c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	3b01      	subs	r3, #1
 8002728:	051b      	lsls	r3, r3, #20
 800272a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	430a      	orrs	r2, r1
 800273e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <HAL_ADC_Init+0x1ac>)
 8002748:	4013      	ands	r3, r2
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	429a      	cmp	r2, r3
 800274e:	d10b      	bne.n	8002768 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	f023 0303 	bic.w	r3, r3, #3
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002766:	e018      	b.n	800279a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	f023 0312 	bic.w	r3, r3, #18
 8002770:	f043 0210 	orr.w	r2, r3, #16
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002788:	e007      	b.n	800279a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800279a:	7dfb      	ldrb	r3, [r7, #23]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	ffe1f7fd 	.word	0xffe1f7fd
 80027a8:	ff1f0efe 	.word	0xff1f0efe

080027ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a64      	ldr	r2, [pc, #400]	@ (8002954 <HAL_ADC_Start_DMA+0x1a8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_ADC_Start_DMA+0x24>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a63      	ldr	r2, [pc, #396]	@ (8002958 <HAL_ADC_Start_DMA+0x1ac>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d106      	bne.n	80027de <HAL_ADC_Start_DMA+0x32>
 80027d0:	4b60      	ldr	r3, [pc, #384]	@ (8002954 <HAL_ADC_Start_DMA+0x1a8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 80b3 	bne.w	8002944 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_Start_DMA+0x40>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0ae      	b.n	800294a <HAL_ADC_Start_DMA+0x19e>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f9cb 	bl	8002b90 <ADC_Enable>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f040 809a 	bne.w	800293a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a4e      	ldr	r2, [pc, #312]	@ (8002958 <HAL_ADC_Start_DMA+0x1ac>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d105      	bne.n	8002830 <HAL_ADC_Start_DMA+0x84>
 8002824:	4b4b      	ldr	r3, [pc, #300]	@ (8002954 <HAL_ADC_Start_DMA+0x1a8>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d115      	bne.n	800285c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002846:	2b00      	cmp	r3, #0
 8002848:	d026      	beq.n	8002898 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002852:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800285a:	e01d      	b.n	8002898 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002860:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a39      	ldr	r2, [pc, #228]	@ (8002954 <HAL_ADC_Start_DMA+0x1a8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_ADC_Start_DMA+0xd0>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a38      	ldr	r2, [pc, #224]	@ (8002958 <HAL_ADC_Start_DMA+0x1ac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10d      	bne.n	8002898 <HAL_ADC_Start_DMA+0xec>
 800287c:	4b35      	ldr	r3, [pc, #212]	@ (8002954 <HAL_ADC_Start_DMA+0x1a8>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002890:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	f023 0206 	bic.w	r2, r3, #6
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028b0:	e002      	b.n	80028b8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_ADC_Start_DMA+0x1b0>)
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a24      	ldr	r2, [pc, #144]	@ (8002960 <HAL_ADC_Start_DMA+0x1b4>)
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a23      	ldr	r2, [pc, #140]	@ (8002964 <HAL_ADC_Start_DMA+0x1b8>)
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0202 	mvn.w	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a18      	ldr	r0, [r3, #32]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	334c      	adds	r3, #76	@ 0x4c
 80028fc:	4619      	mov	r1, r3
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f000 fbaf 	bl	8003064 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002910:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002914:	d108      	bne.n	8002928 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002924:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002926:	e00f      	b.n	8002948 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002936:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002938:	e006      	b.n	8002948 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002942:	e001      	b.n	8002948 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002948:	7dfb      	ldrb	r3, [r7, #23]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40012400 	.word	0x40012400
 8002958:	40012800 	.word	0x40012800
 800295c:	08002cc7 	.word	0x08002cc7
 8002960:	08002d43 	.word	0x08002d43
 8002964:	08002d5f 	.word	0x08002d5f

08002968 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x20>
 80029bc:	2302      	movs	r3, #2
 80029be:	e0dc      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x1da>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d81c      	bhi.n	8002a0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b05      	subs	r3, #5
 80029e2:	221f      	movs	r2, #31
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	4019      	ands	r1, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	3b05      	subs	r3, #5
 80029fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a08:	e03c      	b.n	8002a84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d81c      	bhi.n	8002a4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b23      	subs	r3, #35	@ 0x23
 8002a24:	221f      	movs	r2, #31
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	4019      	ands	r1, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b23      	subs	r3, #35	@ 0x23
 8002a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a4a:	e01b      	b.n	8002a84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b41      	subs	r3, #65	@ 0x41
 8002a5e:	221f      	movs	r2, #31
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4019      	ands	r1, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3b41      	subs	r3, #65	@ 0x41
 8002a78:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	d91c      	bls.n	8002ac6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b1e      	subs	r3, #30
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4019      	ands	r1, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6898      	ldr	r0, [r3, #8]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3b1e      	subs	r3, #30
 8002ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	e019      	b.n	8002afa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6919      	ldr	r1, [r3, #16]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4019      	ands	r1, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6898      	ldr	r0, [r3, #8]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	fa00 f203 	lsl.w	r2, r0, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d003      	beq.n	8002b0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b06:	2b11      	cmp	r3, #17
 8002b08:	d132      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b84 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d125      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d126      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d11a      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3a:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a13      	ldr	r2, [pc, #76]	@ (8002b8c <HAL_ADC_ConfigChannel+0x1ec>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9a      	lsrs	r2, r3, #18
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x1b2>
 8002b5e:	e007      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	40012400 	.word	0x40012400
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d040      	beq.n	8002c30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <ADC_Enable+0xac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <ADC_Enable+0xb0>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	0c9b      	lsrs	r3, r3, #18
 8002bca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bcc:	e002      	b.n	8002bd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f9      	bne.n	8002bce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bda:	f7ff fce1 	bl	80025a0 <HAL_GetTick>
 8002bde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002be0:	e01f      	b.n	8002c22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be2:	f7ff fcdd 	bl	80025a0 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d918      	bls.n	8002c22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d011      	beq.n	8002c22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d1d8      	bne.n	8002be2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000010 	.word	0x20000010
 8002c40:	431bde83 	.word	0x431bde83

08002c44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d12e      	bne.n	8002cbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c6e:	f7ff fc97 	bl	80025a0 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c74:	e01b      	b.n	8002cae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c76:	f7ff fc93 	bl	80025a0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d914      	bls.n	8002cae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d10d      	bne.n	8002cae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c96:	f043 0210 	orr.w	r2, r3, #16
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e007      	b.n	8002cbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d0dc      	beq.n	8002c76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d127      	bne.n	8002d30 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cf6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cfa:	d115      	bne.n	8002d28 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d111      	bne.n	8002d28 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff fe1d 	bl	8002968 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d2e:	e004      	b.n	8002d3a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff fe12 	bl	800297a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7ff fe01 	bl	800298c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <__NVIC_SetPriorityGrouping>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4906      	ldr	r1, [pc, #24]	@ (8002e2c <__NVIC_EnableIRQ+0x34>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	@ (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff90 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff2d 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff42 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff35 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e043      	b.n	800304e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <HAL_DMA_Init+0xa8>)
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a22      	ldr	r2, [pc, #136]	@ (800305c <HAL_DMA_Init+0xac>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	009a      	lsls	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <HAL_DMA_Init+0xb0>)
 8002fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ffa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ffe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	bffdfff8 	.word	0xbffdfff8
 800305c:	cccccccd 	.word	0xcccccccd
 8003060:	40020000 	.word	0x40020000

08003064 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_DMA_Start_IT+0x20>
 8003080:	2302      	movs	r3, #2
 8003082:	e04b      	b.n	800311c <HAL_DMA_Start_IT+0xb8>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d13a      	bne.n	800310e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f9eb 	bl	8003498 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 020e 	orr.w	r2, r2, #14
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e00f      	b.n	80030fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 020a 	orr.w	r2, r2, #10
 80030fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e005      	b.n	800311a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2204      	movs	r2, #4
 8003140:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e020      	b.n	8003190 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 020e 	bic.w	r2, r2, #14
 800315c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f202 	lsl.w	r2, r1, r2
 800317c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
	...

0800319c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d005      	beq.n	80031c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2204      	movs	r2, #4
 80031b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	e051      	b.n	8003264 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 020e 	bic.w	r2, r2, #14
 80031ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a22      	ldr	r2, [pc, #136]	@ (8003270 <HAL_DMA_Abort_IT+0xd4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d029      	beq.n	800323e <HAL_DMA_Abort_IT+0xa2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a21      	ldr	r2, [pc, #132]	@ (8003274 <HAL_DMA_Abort_IT+0xd8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d022      	beq.n	800323a <HAL_DMA_Abort_IT+0x9e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003278 <HAL_DMA_Abort_IT+0xdc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01a      	beq.n	8003234 <HAL_DMA_Abort_IT+0x98>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1e      	ldr	r2, [pc, #120]	@ (800327c <HAL_DMA_Abort_IT+0xe0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d012      	beq.n	800322e <HAL_DMA_Abort_IT+0x92>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <HAL_DMA_Abort_IT+0xe4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00a      	beq.n	8003228 <HAL_DMA_Abort_IT+0x8c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <HAL_DMA_Abort_IT+0xe8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d102      	bne.n	8003222 <HAL_DMA_Abort_IT+0x86>
 800321c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003220:	e00e      	b.n	8003240 <HAL_DMA_Abort_IT+0xa4>
 8003222:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003226:	e00b      	b.n	8003240 <HAL_DMA_Abort_IT+0xa4>
 8003228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800322c:	e008      	b.n	8003240 <HAL_DMA_Abort_IT+0xa4>
 800322e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003232:	e005      	b.n	8003240 <HAL_DMA_Abort_IT+0xa4>
 8003234:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003238:	e002      	b.n	8003240 <HAL_DMA_Abort_IT+0xa4>
 800323a:	2310      	movs	r3, #16
 800323c:	e000      	b.n	8003240 <HAL_DMA_Abort_IT+0xa4>
 800323e:	2301      	movs	r3, #1
 8003240:	4a11      	ldr	r2, [pc, #68]	@ (8003288 <HAL_DMA_Abort_IT+0xec>)
 8003242:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
    } 
  }
  return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40020008 	.word	0x40020008
 8003274:	4002001c 	.word	0x4002001c
 8003278:	40020030 	.word	0x40020030
 800327c:	40020044 	.word	0x40020044
 8003280:	40020058 	.word	0x40020058
 8003284:	4002006c 	.word	0x4002006c
 8003288:	40020000 	.word	0x40020000

0800328c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	2204      	movs	r2, #4
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d04f      	beq.n	8003354 <HAL_DMA_IRQHandler+0xc8>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04a      	beq.n	8003354 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a66      	ldr	r2, [pc, #408]	@ (800347c <HAL_DMA_IRQHandler+0x1f0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d029      	beq.n	800333a <HAL_DMA_IRQHandler+0xae>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a65      	ldr	r2, [pc, #404]	@ (8003480 <HAL_DMA_IRQHandler+0x1f4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0xaa>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a63      	ldr	r2, [pc, #396]	@ (8003484 <HAL_DMA_IRQHandler+0x1f8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01a      	beq.n	8003330 <HAL_DMA_IRQHandler+0xa4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a62      	ldr	r2, [pc, #392]	@ (8003488 <HAL_DMA_IRQHandler+0x1fc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0x9e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a60      	ldr	r2, [pc, #384]	@ (800348c <HAL_DMA_IRQHandler+0x200>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00a      	beq.n	8003324 <HAL_DMA_IRQHandler+0x98>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a5f      	ldr	r2, [pc, #380]	@ (8003490 <HAL_DMA_IRQHandler+0x204>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d102      	bne.n	800331e <HAL_DMA_IRQHandler+0x92>
 8003318:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800331c:	e00e      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 800331e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003322:	e00b      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 8003324:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003328:	e008      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 800332a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800332e:	e005      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 8003330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003334:	e002      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 8003336:	2340      	movs	r3, #64	@ 0x40
 8003338:	e000      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 800333a:	2304      	movs	r3, #4
 800333c:	4a55      	ldr	r2, [pc, #340]	@ (8003494 <HAL_DMA_IRQHandler+0x208>)
 800333e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8094 	beq.w	8003472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003352:	e08e      	b.n	8003472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	2202      	movs	r2, #2
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d056      	beq.n	8003412 <HAL_DMA_IRQHandler+0x186>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d051      	beq.n	8003412 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020a 	bic.w	r2, r2, #10
 800338a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a38      	ldr	r2, [pc, #224]	@ (800347c <HAL_DMA_IRQHandler+0x1f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d029      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x166>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a37      	ldr	r2, [pc, #220]	@ (8003480 <HAL_DMA_IRQHandler+0x1f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_IRQHandler+0x162>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a35      	ldr	r2, [pc, #212]	@ (8003484 <HAL_DMA_IRQHandler+0x1f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01a      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x15c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a34      	ldr	r2, [pc, #208]	@ (8003488 <HAL_DMA_IRQHandler+0x1fc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d012      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x156>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a32      	ldr	r2, [pc, #200]	@ (800348c <HAL_DMA_IRQHandler+0x200>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00a      	beq.n	80033dc <HAL_DMA_IRQHandler+0x150>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a31      	ldr	r2, [pc, #196]	@ (8003490 <HAL_DMA_IRQHandler+0x204>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x14a>
 80033d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033d4:	e00e      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033da:	e00b      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e0:	e008      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033e6:	e005      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033ec:	e002      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033ee:	2320      	movs	r3, #32
 80033f0:	e000      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033f2:	2302      	movs	r3, #2
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <HAL_DMA_IRQHandler+0x208>)
 80033f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d034      	beq.n	8003472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003410:	e02f      	b.n	8003472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2208      	movs	r2, #8
 8003418:	409a      	lsls	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d028      	beq.n	8003474 <HAL_DMA_IRQHandler+0x1e8>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d023      	beq.n	8003474 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020e 	bic.w	r2, r2, #14
 800343a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
    }
  }
  return;
 8003472:	bf00      	nop
 8003474:	bf00      	nop
}
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40020008 	.word	0x40020008
 8003480:	4002001c 	.word	0x4002001c
 8003484:	40020030 	.word	0x40020030
 8003488:	40020044 	.word	0x40020044
 800348c:	40020058 	.word	0x40020058
 8003490:	4002006c 	.word	0x4002006c
 8003494:	40020000 	.word	0x40020000

08003498 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d108      	bne.n	80034d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034d6:	e007      	b.n	80034e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b08b      	sub	sp, #44	@ 0x2c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e169      	b.n	80037dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003508:	2201      	movs	r2, #1
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8158 	bne.w	80037d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a9a      	ldr	r2, [pc, #616]	@ (8003794 <HAL_GPIO_Init+0x2a0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d05e      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003530:	4a98      	ldr	r2, [pc, #608]	@ (8003794 <HAL_GPIO_Init+0x2a0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d875      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003536:	4a98      	ldr	r2, [pc, #608]	@ (8003798 <HAL_GPIO_Init+0x2a4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d058      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 800353c:	4a96      	ldr	r2, [pc, #600]	@ (8003798 <HAL_GPIO_Init+0x2a4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d86f      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003542:	4a96      	ldr	r2, [pc, #600]	@ (800379c <HAL_GPIO_Init+0x2a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d052      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003548:	4a94      	ldr	r2, [pc, #592]	@ (800379c <HAL_GPIO_Init+0x2a8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d869      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800354e:	4a94      	ldr	r2, [pc, #592]	@ (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04c      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003554:	4a92      	ldr	r2, [pc, #584]	@ (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d863      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800355a:	4a92      	ldr	r2, [pc, #584]	@ (80037a4 <HAL_GPIO_Init+0x2b0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d046      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003560:	4a90      	ldr	r2, [pc, #576]	@ (80037a4 <HAL_GPIO_Init+0x2b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d85d      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003566:	2b12      	cmp	r3, #18
 8003568:	d82a      	bhi.n	80035c0 <HAL_GPIO_Init+0xcc>
 800356a:	2b12      	cmp	r3, #18
 800356c:	d859      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <HAL_GPIO_Init+0x80>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035db 	.word	0x080035db
 8003580:	0800361d 	.word	0x0800361d
 8003584:	08003623 	.word	0x08003623
 8003588:	08003623 	.word	0x08003623
 800358c:	08003623 	.word	0x08003623
 8003590:	08003623 	.word	0x08003623
 8003594:	08003623 	.word	0x08003623
 8003598:	08003623 	.word	0x08003623
 800359c:	08003623 	.word	0x08003623
 80035a0:	08003623 	.word	0x08003623
 80035a4:	08003623 	.word	0x08003623
 80035a8:	08003623 	.word	0x08003623
 80035ac:	08003623 	.word	0x08003623
 80035b0:	08003623 	.word	0x08003623
 80035b4:	08003623 	.word	0x08003623
 80035b8:	080035d1 	.word	0x080035d1
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	4a79      	ldr	r2, [pc, #484]	@ (80037a8 <HAL_GPIO_Init+0x2b4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035c6:	e02c      	b.n	8003622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	623b      	str	r3, [r7, #32]
          break;
 80035ce:	e029      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	3304      	adds	r3, #4
 80035d6:	623b      	str	r3, [r7, #32]
          break;
 80035d8:	e024      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	3308      	adds	r3, #8
 80035e0:	623b      	str	r3, [r7, #32]
          break;
 80035e2:	e01f      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	330c      	adds	r3, #12
 80035ea:	623b      	str	r3, [r7, #32]
          break;
 80035ec:	e01a      	b.n	8003624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035f6:	2304      	movs	r3, #4
 80035f8:	623b      	str	r3, [r7, #32]
          break;
 80035fa:	e013      	b.n	8003624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003604:	2308      	movs	r3, #8
 8003606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	611a      	str	r2, [r3, #16]
          break;
 800360e:	e009      	b.n	8003624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003610:	2308      	movs	r3, #8
 8003612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	615a      	str	r2, [r3, #20]
          break;
 800361a:	e003      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
          break;
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x130>
          break;
 8003622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2bff      	cmp	r3, #255	@ 0xff
 8003628:	d801      	bhi.n	800362e <HAL_GPIO_Init+0x13a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	e001      	b.n	8003632 <HAL_GPIO_Init+0x13e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2bff      	cmp	r3, #255	@ 0xff
 8003638:	d802      	bhi.n	8003640 <HAL_GPIO_Init+0x14c>
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x152>
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	3b08      	subs	r3, #8
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	210f      	movs	r1, #15
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	431a      	orrs	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b1 	beq.w	80037d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003674:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <HAL_GPIO_Init+0x2b8>)
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4a4c      	ldr	r2, [pc, #304]	@ (80037ac <HAL_GPIO_Init+0x2b8>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6193      	str	r3, [r2, #24]
 8003680:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_GPIO_Init+0x2b8>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800368c:	4a48      	ldr	r2, [pc, #288]	@ (80037b0 <HAL_GPIO_Init+0x2bc>)
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	220f      	movs	r2, #15
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a40      	ldr	r2, [pc, #256]	@ (80037b4 <HAL_GPIO_Init+0x2c0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_GPIO_Init+0x1ec>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a3f      	ldr	r2, [pc, #252]	@ (80037b8 <HAL_GPIO_Init+0x2c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00d      	beq.n	80036dc <HAL_GPIO_Init+0x1e8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3e      	ldr	r2, [pc, #248]	@ (80037bc <HAL_GPIO_Init+0x2c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_GPIO_Init+0x1e4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3d      	ldr	r2, [pc, #244]	@ (80037c0 <HAL_GPIO_Init+0x2cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_GPIO_Init+0x1e0>
 80036d0:	2303      	movs	r3, #3
 80036d2:	e006      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e004      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d8:	2302      	movs	r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036e0:	2300      	movs	r3, #0
 80036e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e4:	f002 0203 	and.w	r2, r2, #3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4093      	lsls	r3, r2
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036f2:	492f      	ldr	r1, [pc, #188]	@ (80037b0 <HAL_GPIO_Init+0x2bc>)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800370c:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	492c      	ldr	r1, [pc, #176]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800371a:	4b2a      	ldr	r3, [pc, #168]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	43db      	mvns	r3, r3
 8003722:	4928      	ldr	r1, [pc, #160]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003724:	4013      	ands	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003734:	4b23      	ldr	r3, [pc, #140]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4922      	ldr	r1, [pc, #136]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	43db      	mvns	r3, r3
 800374a:	491e      	ldr	r1, [pc, #120]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800374c:	4013      	ands	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800375c:	4b19      	ldr	r3, [pc, #100]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	4918      	ldr	r1, [pc, #96]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800376a:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4914      	ldr	r1, [pc, #80]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d021      	beq.n	80037c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	490e      	ldr	r1, [pc, #56]	@ (80037c4 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e021      	b.n	80037d6 <HAL_GPIO_Init+0x2e2>
 8003792:	bf00      	nop
 8003794:	10320000 	.word	0x10320000
 8003798:	10310000 	.word	0x10310000
 800379c:	10220000 	.word	0x10220000
 80037a0:	10210000 	.word	0x10210000
 80037a4:	10120000 	.word	0x10120000
 80037a8:	10110000 	.word	0x10110000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40010c00 	.word	0x40010c00
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	4909      	ldr	r1, [pc, #36]	@ (80037f8 <HAL_GPIO_Init+0x304>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	3301      	adds	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f47f ae8e 	bne.w	8003508 <HAL_GPIO_Init+0x14>
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	372c      	adds	r7, #44	@ 0x2c
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e001      	b.n	800381e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	460b      	mov	r3, r1
 8003834:	807b      	strh	r3, [r7, #2]
 8003836:	4613      	mov	r3, r2
 8003838:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383a:	787b      	ldrb	r3, [r7, #1]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003840:	887a      	ldrh	r2, [r7, #2]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003846:	e003      	b.n	8003850 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	041a      	lsls	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	611a      	str	r2, [r3, #16]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800386c:	887a      	ldrh	r2, [r7, #2]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	041a      	lsls	r2, r3, #16
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	43d9      	mvns	r1, r3
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	400b      	ands	r3, r1
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]
}
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e12b      	b.n	8003af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe fc48 	bl	8002148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2224      	movs	r2, #36	@ 0x24
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038f0:	f001 f842 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 80038f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a81      	ldr	r2, [pc, #516]	@ (8003b00 <HAL_I2C_Init+0x274>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d807      	bhi.n	8003910 <HAL_I2C_Init+0x84>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a80      	ldr	r2, [pc, #512]	@ (8003b04 <HAL_I2C_Init+0x278>)
 8003904:	4293      	cmp	r3, r2
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e006      	b.n	800391e <HAL_I2C_Init+0x92>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a7d      	ldr	r2, [pc, #500]	@ (8003b08 <HAL_I2C_Init+0x27c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	bf94      	ite	ls
 8003918:	2301      	movls	r3, #1
 800391a:	2300      	movhi	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0e7      	b.n	8003af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a78      	ldr	r2, [pc, #480]	@ (8003b0c <HAL_I2C_Init+0x280>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a6a      	ldr	r2, [pc, #424]	@ (8003b00 <HAL_I2C_Init+0x274>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d802      	bhi.n	8003960 <HAL_I2C_Init+0xd4>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	3301      	adds	r3, #1
 800395e:	e009      	b.n	8003974 <HAL_I2C_Init+0xe8>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	4a69      	ldr	r2, [pc, #420]	@ (8003b10 <HAL_I2C_Init+0x284>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	3301      	adds	r3, #1
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	430b      	orrs	r3, r1
 800397a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003986:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	495c      	ldr	r1, [pc, #368]	@ (8003b00 <HAL_I2C_Init+0x274>)
 8003990:	428b      	cmp	r3, r1
 8003992:	d819      	bhi.n	80039c8 <HAL_I2C_Init+0x13c>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e59      	subs	r1, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fbb1 f3f3 	udiv	r3, r1, r3
 80039a2:	1c59      	adds	r1, r3, #1
 80039a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039a8:	400b      	ands	r3, r1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_I2C_Init+0x138>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1e59      	subs	r1, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c2:	e051      	b.n	8003a68 <HAL_I2C_Init+0x1dc>
 80039c4:	2304      	movs	r3, #4
 80039c6:	e04f      	b.n	8003a68 <HAL_I2C_Init+0x1dc>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d111      	bne.n	80039f4 <HAL_I2C_Init+0x168>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e58      	subs	r0, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	440b      	add	r3, r1
 80039de:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e012      	b.n	8003a1a <HAL_I2C_Init+0x18e>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1e58      	subs	r0, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	0099      	lsls	r1, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Init+0x196>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e022      	b.n	8003a68 <HAL_I2C_Init+0x1dc>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10e      	bne.n	8003a48 <HAL_I2C_Init+0x1bc>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1e58      	subs	r0, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	440b      	add	r3, r1
 8003a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a46:	e00f      	b.n	8003a68 <HAL_I2C_Init+0x1dc>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1e58      	subs	r0, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	0099      	lsls	r1, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	6809      	ldr	r1, [r1, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6911      	ldr	r1, [r2, #16]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68d2      	ldr	r2, [r2, #12]
 8003aa2:	4311      	orrs	r1, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	000186a0 	.word	0x000186a0
 8003b04:	001e847f 	.word	0x001e847f
 8003b08:	003d08ff 	.word	0x003d08ff
 8003b0c:	431bde83 	.word	0x431bde83
 8003b10:	10624dd3 	.word	0x10624dd3

08003b14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	460b      	mov	r3, r1
 8003b28:	813b      	strh	r3, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b2e:	f7fe fd37 	bl	80025a0 <HAL_GetTick>
 8003b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	f040 80d9 	bne.w	8003cf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2319      	movs	r3, #25
 8003b48:	2201      	movs	r2, #1
 8003b4a:	496d      	ldr	r1, [pc, #436]	@ (8003d00 <HAL_I2C_Mem_Write+0x1ec>)
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f971 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Mem_Write+0x56>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e0c5      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d007      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2221      	movs	r2, #33	@ 0x21
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2240      	movs	r2, #64	@ 0x40
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a4d      	ldr	r2, [pc, #308]	@ (8003d04 <HAL_I2C_Mem_Write+0x1f0>)
 8003bd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bd2:	88f8      	ldrh	r0, [r7, #6]
 8003bd4:	893a      	ldrh	r2, [r7, #8]
 8003bd6:	8979      	ldrh	r1, [r7, #10]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4603      	mov	r3, r0
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f890 	bl	8003d08 <I2C_RequestMemoryWrite>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d052      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e081      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fa36 	bl	8004068 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06b      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d11b      	bne.n	8003c94 <HAL_I2C_Mem_Write+0x180>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d017      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1aa      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fa29 	bl	80040f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d107      	bne.n	8003cc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e016      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	00100002 	.word	0x00100002
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	813b      	strh	r3, [r7, #8]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f878 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d58:	d103      	bne.n	8003d62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e05f      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	6a3a      	ldr	r2, [r7, #32]
 8003d7a:	492d      	ldr	r1, [pc, #180]	@ (8003e30 <I2C_RequestMemoryWrite+0x128>)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8d3 	bl	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e04c      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f95e 	bl	8004068 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d107      	bne.n	8003dca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e02b      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e021      	b.n	8003e24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de0:	893b      	ldrh	r3, [r7, #8]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f938 	bl	8004068 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d107      	bne.n	8003e16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e005      	b.n	8003e26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1a:	893b      	ldrh	r3, [r7, #8]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	00010002 	.word	0x00010002

08003e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e44:	e048      	b.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d044      	beq.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fe fba7 	bl	80025a0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d139      	bne.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d10d      	bne.n	8003e8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	43da      	mvns	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	e00c      	b.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d116      	bne.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e023      	b.n	8003f20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10d      	bne.n	8003efe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4013      	ands	r3, r2
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	e00c      	b.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	43da      	mvns	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d093      	beq.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f36:	e071      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f46:	d123      	bne.n	8003f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e067      	b.n	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d041      	beq.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f98:	f7fe fb02 	bl	80025a0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d136      	bne.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d10c      	bne.n	8003fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e00b      	b.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e021      	b.n	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10c      	bne.n	8004040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e00b      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af6d 	bne.w	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004074:	e034      	b.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f886 	bl	8004188 <I2C_IsAcknowledgeFailed>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e034      	b.n	80040f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d028      	beq.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fe fa87 	bl	80025a0 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11d      	bne.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b80      	cmp	r3, #128	@ 0x80
 80040b0:	d016      	beq.n	80040e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e007      	b.n	80040f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	2b80      	cmp	r3, #128	@ 0x80
 80040ec:	d1c3      	bne.n	8004076 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004104:	e034      	b.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f83e 	bl	8004188 <I2C_IsAcknowledgeFailed>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e034      	b.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d028      	beq.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411e:	f7fe fa3f 	bl	80025a0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	d302      	bcc.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11d      	bne.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d016      	beq.n	8004170 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d1c3      	bne.n	8004106 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419e:	d11b      	bne.n	80041d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	f043 0204 	orr.w	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e272      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8087 	beq.w	8004312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004204:	4b92      	ldr	r3, [pc, #584]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b04      	cmp	r3, #4
 800420e:	d00c      	beq.n	800422a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004210:	4b8f      	ldr	r3, [pc, #572]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d112      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e>
 800421c:	4b8c      	ldr	r3, [pc, #560]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004228:	d10b      	bne.n	8004242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422a:	4b89      	ldr	r3, [pc, #548]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d06c      	beq.n	8004310 <HAL_RCC_OscConfig+0x12c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d168      	bne.n	8004310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e24c      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x76>
 800424c:	4b80      	ldr	r3, [pc, #512]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a7f      	ldr	r2, [pc, #508]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e02e      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x98>
 8004262:	4b7b      	ldr	r3, [pc, #492]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7a      	ldr	r2, [pc, #488]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b78      	ldr	r3, [pc, #480]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a77      	ldr	r2, [pc, #476]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e01d      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0xbc>
 8004286:	4b72      	ldr	r3, [pc, #456]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a71      	ldr	r2, [pc, #452]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800428c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b6f      	ldr	r3, [pc, #444]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6e      	ldr	r2, [pc, #440]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0xd4>
 80042a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b68      	ldr	r3, [pc, #416]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a67      	ldr	r2, [pc, #412]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d013      	beq.n	80042e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe f96e 	bl	80025a0 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fe f96a 	bl	80025a0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e200      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b5d      	ldr	r3, [pc, #372]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0xe4>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe f95a 	bl	80025a0 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe f956 	bl	80025a0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	@ 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e1ec      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	4b53      	ldr	r3, [pc, #332]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x10c>
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800431e:	4b4c      	ldr	r3, [pc, #304]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800432a:	4b49      	ldr	r3, [pc, #292]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b08      	cmp	r3, #8
 8004334:	d11c      	bne.n	8004370 <HAL_RCC_OscConfig+0x18c>
 8004336:	4b46      	ldr	r3, [pc, #280]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	4b43      	ldr	r3, [pc, #268]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_RCC_OscConfig+0x176>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e1c0      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435a:	4b3d      	ldr	r3, [pc, #244]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4939      	ldr	r1, [pc, #228]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436e:	e03a      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	4b36      	ldr	r3, [pc, #216]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fe f90f 	bl	80025a0 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004386:	f7fe f90b 	bl	80025a0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e1a1      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b2d      	ldr	r3, [pc, #180]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4927      	ldr	r1, [pc, #156]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	e015      	b.n	80043e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b26      	ldr	r3, [pc, #152]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe f8ee 	bl	80025a0 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fe f8ea 	bl	80025a0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e180      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03a      	beq.n	8004468 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d019      	beq.n	800442e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b17      	ldr	r3, [pc, #92]	@ (8004458 <HAL_RCC_OscConfig+0x274>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004400:	f7fe f8ce 	bl	80025a0 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004408:	f7fe f8ca 	bl	80025a0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e160      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <HAL_RCC_OscConfig+0x26c>)
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004426:	2001      	movs	r0, #1
 8004428:	f000 face 	bl	80049c8 <RCC_Delay>
 800442c:	e01c      	b.n	8004468 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442e:	4b0a      	ldr	r3, [pc, #40]	@ (8004458 <HAL_RCC_OscConfig+0x274>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004434:	f7fe f8b4 	bl	80025a0 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443a:	e00f      	b.n	800445c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443c:	f7fe f8b0 	bl	80025a0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d908      	bls.n	800445c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e146      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	42420000 	.word	0x42420000
 8004458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	4b92      	ldr	r3, [pc, #584]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e9      	bne.n	800443c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a6 	beq.w	80045c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447a:	4b8b      	ldr	r3, [pc, #556]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	4b88      	ldr	r3, [pc, #544]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4a87      	ldr	r2, [pc, #540]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004490:	61d3      	str	r3, [r2, #28]
 8004492:	4b85      	ldr	r3, [pc, #532]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b82      	ldr	r3, [pc, #520]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b7f      	ldr	r3, [pc, #508]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7e      	ldr	r2, [pc, #504]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fe f871 	bl	80025a0 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fe f86d 	bl	80025a0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	@ 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e103      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b75      	ldr	r3, [pc, #468]	@ (80046ac <HAL_RCC_OscConfig+0x4c8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x312>
 80044e8:	4b6f      	ldr	r3, [pc, #444]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4a6e      	ldr	r2, [pc, #440]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6213      	str	r3, [r2, #32]
 80044f4:	e02d      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x334>
 80044fe:	4b6a      	ldr	r3, [pc, #424]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a69      	ldr	r2, [pc, #420]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	4b67      	ldr	r3, [pc, #412]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4a66      	ldr	r2, [pc, #408]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6213      	str	r3, [r2, #32]
 8004516:	e01c      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b05      	cmp	r3, #5
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x356>
 8004520:	4b61      	ldr	r3, [pc, #388]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4a60      	ldr	r2, [pc, #384]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	6213      	str	r3, [r2, #32]
 800452c:	4b5e      	ldr	r3, [pc, #376]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	4a5d      	ldr	r2, [pc, #372]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6213      	str	r3, [r2, #32]
 8004538:	e00b      	b.n	8004552 <HAL_RCC_OscConfig+0x36e>
 800453a:	4b5b      	ldr	r3, [pc, #364]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a5a      	ldr	r2, [pc, #360]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	4b58      	ldr	r3, [pc, #352]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	4a57      	ldr	r2, [pc, #348]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d015      	beq.n	8004586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe f821 	bl	80025a0 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fe f81d 	bl	80025a0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0b1      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	4b4b      	ldr	r3, [pc, #300]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ee      	beq.n	8004562 <HAL_RCC_OscConfig+0x37e>
 8004584:	e014      	b.n	80045b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fe f80b 	bl	80025a0 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458c:	e00a      	b.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fe f807 	bl	80025a0 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e09b      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a4:	4b40      	ldr	r3, [pc, #256]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ee      	bne.n	800458e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b6:	4b3c      	ldr	r3, [pc, #240]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4a3b      	ldr	r2, [pc, #236]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8087 	beq.w	80046da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045cc:	4b36      	ldr	r3, [pc, #216]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d061      	beq.n	800469c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d146      	bne.n	800466e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e0:	4b33      	ldr	r3, [pc, #204]	@ (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fd ffdb 	bl	80025a0 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd ffd7 	bl	80025a0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e06d      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004600:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004614:	d108      	bne.n	8004628 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004616:	4b24      	ldr	r3, [pc, #144]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4921      	ldr	r1, [pc, #132]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004628:	4b1f      	ldr	r3, [pc, #124]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a19      	ldr	r1, [r3, #32]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	430b      	orrs	r3, r1
 800463a:	491b      	ldr	r1, [pc, #108]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fd ffab 	bl	80025a0 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd ffa7 	bl	80025a0 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e03d      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004660:	4b11      	ldr	r3, [pc, #68]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x46a>
 800466c:	e035      	b.n	80046da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b10      	ldr	r3, [pc, #64]	@ (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fd ff94 	bl	80025a0 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fd ff90 	bl	80025a0 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e026      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCC_OscConfig+0x4c4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x498>
 800469a:	e01e      	b.n	80046da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e019      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40007000 	.word	0x40007000
 80046b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_OscConfig+0x500>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000

080046e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0d0      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046fc:	4b6a      	ldr	r3, [pc, #424]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d910      	bls.n	800472c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b67      	ldr	r3, [pc, #412]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 0207 	bic.w	r2, r3, #7
 8004712:	4965      	ldr	r1, [pc, #404]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b63      	ldr	r3, [pc, #396]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0b8      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d020      	beq.n	800477a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004744:	4b59      	ldr	r3, [pc, #356]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4a58      	ldr	r2, [pc, #352]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800474e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800475c:	4b53      	ldr	r3, [pc, #332]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a52      	ldr	r2, [pc, #328]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004766:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004768:	4b50      	ldr	r3, [pc, #320]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	494d      	ldr	r1, [pc, #308]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d040      	beq.n	8004808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	4b47      	ldr	r3, [pc, #284]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d115      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07f      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a6:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e073      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06b      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c6:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f023 0203 	bic.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4936      	ldr	r1, [pc, #216]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d8:	f7fd fee2 	bl	80025a0 <HAL_GetTick>
 80047dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e0:	f7fd fede 	bl	80025a0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e053      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	4b2d      	ldr	r3, [pc, #180]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 020c 	and.w	r2, r3, #12
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	429a      	cmp	r2, r3
 8004806:	d1eb      	bne.n	80047e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004808:	4b27      	ldr	r3, [pc, #156]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d210      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b24      	ldr	r3, [pc, #144]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 0207 	bic.w	r2, r3, #7
 800481e:	4922      	ldr	r1, [pc, #136]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e032      	b.n	800489e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004844:	4b19      	ldr	r3, [pc, #100]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4916      	ldr	r1, [pc, #88]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004862:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	490e      	ldr	r1, [pc, #56]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004876:	f000 f821 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 800487a:	4602      	mov	r2, r0
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	490a      	ldr	r1, [pc, #40]	@ (80048b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004888:	5ccb      	ldrb	r3, [r1, r3]
 800488a:	fa22 f303 	lsr.w	r3, r2, r3
 800488e:	4a09      	ldr	r2, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004892:	4b09      	ldr	r3, [pc, #36]	@ (80048b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fe40 	bl	800251c <HAL_InitTick>

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40022000 	.word	0x40022000
 80048ac:	40021000 	.word	0x40021000
 80048b0:	0800b8ec 	.word	0x0800b8ec
 80048b4:	20000010 	.word	0x20000010
 80048b8:	20000014 	.word	0x20000014

080048bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x94>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x30>
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x36>
 80048ea:	e027      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ee:	613b      	str	r3, [r7, #16]
      break;
 80048f0:	e027      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	0c9b      	lsrs	r3, r3, #18
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048fc:	5cd3      	ldrb	r3, [r2, r3]
 80048fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800490a:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x94>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	0c5b      	lsrs	r3, r3, #17
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	4a11      	ldr	r2, [pc, #68]	@ (800495c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004916:	5cd3      	ldrb	r3, [r2, r3]
 8004918:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x98>)
 800491e:	fb03 f202 	mul.w	r2, r3, r2
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e004      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	613b      	str	r3, [r7, #16]
      break;
 800493a:	e002      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x98>)
 800493e:	613b      	str	r3, [r7, #16]
      break;
 8004940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004942:	693b      	ldr	r3, [r7, #16]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
 8004954:	007a1200 	.word	0x007a1200
 8004958:	0800b904 	.word	0x0800b904
 800495c:	0800b914 	.word	0x0800b914
 8004960:	003d0900 	.word	0x003d0900

08004964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b02      	ldr	r3, [pc, #8]	@ (8004974 <HAL_RCC_GetHCLKFreq+0x10>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr
 8004974:	20000010 	.word	0x20000010

08004978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800497c:	f7ff fff2 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	0800b8fc 	.word	0x0800b8fc

080049a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049a4:	f7ff ffde 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	0adb      	lsrs	r3, r3, #11
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4903      	ldr	r1, [pc, #12]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000
 80049c4:	0800b8fc 	.word	0x0800b8fc

080049c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049d0:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <RCC_Delay+0x34>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004a00 <RCC_Delay+0x38>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	0a5b      	lsrs	r3, r3, #9
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049e4:	bf00      	nop
  }
  while (Delay --);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1e5a      	subs	r2, r3, #1
 80049ea:	60fa      	str	r2, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f9      	bne.n	80049e4 <RCC_Delay+0x1c>
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	20000010 	.word	0x20000010
 8004a00:	10624dd3 	.word	0x10624dd3

08004a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d07d      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a24:	4b4f      	ldr	r3, [pc, #316]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10d      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a30:	4b4c      	ldr	r3, [pc, #304]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	4a4b      	ldr	r2, [pc, #300]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	61d3      	str	r3, [r2, #28]
 8004a3c:	4b49      	ldr	r3, [pc, #292]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	4b46      	ldr	r3, [pc, #280]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d118      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a58:	4b43      	ldr	r3, [pc, #268]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a42      	ldr	r2, [pc, #264]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a64:	f7fd fd9c 	bl	80025a0 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6a:	e008      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6c:	f7fd fd98 	bl	80025a0 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e06d      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a8a:	4b36      	ldr	r3, [pc, #216]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02e      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d027      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004abe:	4a29      	ldr	r2, [pc, #164]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d014      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fd fd67 	bl	80025a0 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fd fd63 	bl	80025a0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e036      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aec:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ee      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4917      	ldr	r1, [pc, #92]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b10:	4b14      	ldr	r3, [pc, #80]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	4a13      	ldr	r2, [pc, #76]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b28:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	490b      	ldr	r1, [pc, #44]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b46:	4b07      	ldr	r3, [pc, #28]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4904      	ldr	r1, [pc, #16]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42420440 	.word	0x42420440

08004b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e042      	b.n	8004c08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fd fb26 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	@ 0x24
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fdc5 	bl	8005744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	@ 0x28
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d16d      	bne.n	8004d0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_UART_Transmit+0x2c>
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e066      	b.n	8004d0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2221      	movs	r2, #33	@ 0x21
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c4e:	f7fd fca7 	bl	80025a0 <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c68:	d108      	bne.n	8004c7c <HAL_UART_Transmit+0x6c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	e003      	b.n	8004c84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c84:	e02a      	b.n	8004cdc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2180      	movs	r1, #128	@ 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fb14 	bl	80052be <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e036      	b.n	8004d0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e007      	b.n	8004cce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1cf      	bne.n	8004c86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	2140      	movs	r1, #64	@ 0x40
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fae4 	bl	80052be <UART_WaitOnFlagUntilTimeout>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e006      	b.n	8004d0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d112      	bne.n	8004d56 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_UART_Receive_IT+0x26>
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e00b      	b.n	8004d58 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fb24 	bl	800539a <UART_Start_Receive_IT>
 8004d52:	4603      	mov	r3, r0
 8004d54:	e000      	b.n	8004d58 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
  }
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b0ba      	sub	sp, #232	@ 0xe8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x66>
 8004db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fc01 	bl	80055c6 <UART_Receive_IT>
      return;
 8004dc4:	e25b      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80de 	beq.w	8004f8c <HAL_UART_IRQHandler+0x22c>
 8004dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 80d1 	beq.w	8004f8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_UART_IRQHandler+0xae>
 8004df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	f043 0201 	orr.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <HAL_UART_IRQHandler+0xd2>
 8004e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f043 0202 	orr.w	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xf6>
 8004e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <HAL_UART_IRQHandler+0x126>
 8004e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	f043 0208 	orr.w	r2, r3, #8
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 81f2 	beq.w	8005274 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_UART_IRQHandler+0x14e>
 8004e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb8c 	bl	80055c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <HAL_UART_IRQHandler+0x17a>
 8004ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04f      	beq.n	8004f7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fa96 	bl	800540c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d041      	beq.n	8004f72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1d9      	bne.n	8004eee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d013      	beq.n	8004f6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f46:	4a7e      	ldr	r2, [pc, #504]	@ (8005140 <HAL_UART_IRQHandler+0x3e0>)
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe f924 	bl	800319c <HAL_DMA_Abort_IT>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f64:	4610      	mov	r0, r2
 8004f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	e00e      	b.n	8004f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f993 	bl	8005296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e00a      	b.n	8004f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f98f 	bl	8005296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e006      	b.n	8004f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f98b 	bl	8005296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f86:	e175      	b.n	8005274 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	bf00      	nop
    return;
 8004f8a:	e173      	b.n	8005274 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f040 814f 	bne.w	8005234 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8148 	beq.w	8005234 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8141 	beq.w	8005234 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80b6 	beq.w	8005144 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8145 	beq.w	8005278 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	f080 813e 	bcs.w	8005278 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005002:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b20      	cmp	r3, #32
 800500c:	f000 8088 	beq.w	8005120 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005026:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800502a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800502e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800503c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005048:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1d9      	bne.n	8005010 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3314      	adds	r3, #20
 8005062:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800506c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005080:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005084:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005088:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005092:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e1      	bne.n	800505c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e3      	bne.n	8005098 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f0:	f023 0310 	bic.w	r3, r3, #16
 80050f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005102:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005104:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e3      	bne.n	80050de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe f802 	bl	8003124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800512e:	b29b      	uxth	r3, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	b29b      	uxth	r3, r3
 8005134:	4619      	mov	r1, r3
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8b6 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800513c:	e09c      	b.n	8005278 <HAL_UART_IRQHandler+0x518>
 800513e:	bf00      	nop
 8005140:	080054d1 	.word	0x080054d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800514c:	b29b      	uxth	r3, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 808e 	beq.w	800527c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8089 	beq.w	800527c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800517a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800518e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800519c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	623b      	str	r3, [r7, #32]
   return(result);
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e3      	bne.n	80051a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0310 	bic.w	r3, r3, #16
 80051fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	330c      	adds	r3, #12
 8005208:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800520c:	61fa      	str	r2, [r7, #28]
 800520e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	69b9      	ldr	r1, [r7, #24]
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	617b      	str	r3, [r7, #20]
   return(result);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e3      	bne.n	80051e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f83b 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005232:	e023      	b.n	800527c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <HAL_UART_IRQHandler+0x4f4>
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f953 	bl	80054f8 <UART_Transmit_IT>
    return;
 8005252:	e014      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00e      	beq.n	800527e <HAL_UART_IRQHandler+0x51e>
 8005260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f992 	bl	8005596 <UART_EndTransmit_IT>
    return;
 8005272:	e004      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
    return;
 8005274:	bf00      	nop
 8005276:	e002      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
      return;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <HAL_UART_IRQHandler+0x51e>
      return;
 800527c:	bf00      	nop
  }
}
 800527e:	37e8      	adds	r7, #232	@ 0xe8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr

08005296 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b090      	sub	sp, #64	@ 0x40
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ce:	e050      	b.n	8005372 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d04c      	beq.n	8005372 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x30>
 80052de:	f7fd f95f 	bl	80025a0 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d241      	bcs.n	8005372 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800530e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005310:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	613b      	str	r3, [r7, #16]
   return(result);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	63bb      	str	r3, [r7, #56]	@ 0x38
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005342:	623a      	str	r2, [r7, #32]
 8005344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	69f9      	ldr	r1, [r7, #28]
 8005348:	6a3a      	ldr	r2, [r7, #32]
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e5      	bne.n	8005322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e00f      	b.n	8005392 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	bf0c      	ite	eq
 8005382:	2301      	moveq	r3, #1
 8005384:	2300      	movne	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	429a      	cmp	r2, r3
 800538e:	d09f      	beq.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3740      	adds	r7, #64	@ 0x40
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	4613      	mov	r3, r2
 80053a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	88fa      	ldrh	r2, [r7, #6]
 80053b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2222      	movs	r2, #34	@ 0x22
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0220 	orr.w	r2, r2, #32
 80053fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b095      	sub	sp, #84	@ 0x54
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005434:	643a      	str	r2, [r7, #64]	@ 0x40
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800543a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	61fb      	str	r3, [r7, #28]
   return(result);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3314      	adds	r3, #20
 8005466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005468:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800546a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800546e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e5      	bne.n	8005448 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005480:	2b01      	cmp	r3, #1
 8005482:	d119      	bne.n	80054b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	60bb      	str	r3, [r7, #8]
   return(result);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 0310 	bic.w	r3, r3, #16
 800549a:	647b      	str	r3, [r7, #68]	@ 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054a4:	61ba      	str	r2, [r7, #24]
 80054a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6979      	ldr	r1, [r7, #20]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	613b      	str	r3, [r7, #16]
   return(result);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e5      	bne.n	8005484 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054c6:	bf00      	nop
 80054c8:	3754      	adds	r7, #84	@ 0x54
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff fed3 	bl	8005296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b21      	cmp	r3, #33	@ 0x21
 800550a:	d13e      	bne.n	800558a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005514:	d114      	bne.n	8005540 <UART_Transmit_IT+0x48>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d110      	bne.n	8005540 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005532:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]
 800553e:	e008      	b.n	8005552 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	1c59      	adds	r1, r3, #1
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6211      	str	r1, [r2, #32]
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4619      	mov	r1, r3
 8005560:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
  }
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fe64 	bl	8005284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b08c      	sub	sp, #48	@ 0x30
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b22      	cmp	r3, #34	@ 0x22
 80055d8:	f040 80ae 	bne.w	8005738 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e4:	d117      	bne.n	8005616 <UART_Receive_IT+0x50>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d113      	bne.n	8005616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005604:	b29a      	uxth	r2, r3
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	1c9a      	adds	r2, r3, #2
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
 8005614:	e026      	b.n	8005664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005628:	d007      	beq.n	800563a <UART_Receive_IT+0x74>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <UART_Receive_IT+0x82>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e008      	b.n	800565a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29b      	uxth	r3, r3
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4619      	mov	r1, r3
 8005672:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005674:	2b00      	cmp	r3, #0
 8005676:	d15d      	bne.n	8005734 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0220 	bic.w	r2, r2, #32
 8005686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d135      	bne.n	800572a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	613b      	str	r3, [r7, #16]
   return(result);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 0310 	bic.w	r3, r3, #16
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e4:	623a      	str	r2, [r7, #32]
 80056e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b10      	cmp	r3, #16
 8005704:	d10a      	bne.n	800571c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fdc0 	bl	80052a8 <HAL_UARTEx_RxEventCallback>
 8005728:	e002      	b.n	8005730 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fe7c 	bl	8001428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e002      	b.n	800573a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3730      	adds	r7, #48	@ 0x30
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800577e:	f023 030c 	bic.w	r3, r3, #12
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	430b      	orrs	r3, r1
 800578a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005858 <UART_SetConfig+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d103      	bne.n	80057b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7ff f8f8 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	e002      	b.n	80057ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057b4:	f7ff f8e0 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 80057b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009a      	lsls	r2, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	4a22      	ldr	r2, [pc, #136]	@ (800585c <UART_SetConfig+0x118>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	0119      	lsls	r1, r3, #4
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009a      	lsls	r2, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f0:	4b1a      	ldr	r3, [pc, #104]	@ (800585c <UART_SetConfig+0x118>)
 80057f2:	fba3 0302 	umull	r0, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2064      	movs	r0, #100	@ 0x64
 80057fa:	fb00 f303 	mul.w	r3, r0, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	@ 0x32
 8005804:	4a15      	ldr	r2, [pc, #84]	@ (800585c <UART_SetConfig+0x118>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005810:	4419      	add	r1, r3
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009a      	lsls	r2, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	fbb2 f2f3 	udiv	r2, r2, r3
 8005828:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <UART_SetConfig+0x118>)
 800582a:	fba3 0302 	umull	r0, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2064      	movs	r0, #100	@ 0x64
 8005832:	fb00 f303 	mul.w	r3, r0, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	@ 0x32
 800583c:	4a07      	ldr	r2, [pc, #28]	@ (800585c <UART_SetConfig+0x118>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	440a      	add	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40013800 	.word	0x40013800
 800585c:	51eb851f 	.word	0x51eb851f

08005860 <LL_GPIO_SetPinMode>:
{
 8005860:	b490      	push	{r4, r7}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	461a      	mov	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	0e1b      	lsrs	r3, r3, #24
 8005874:	4413      	add	r3, r2
 8005876:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	fa93 f3a3 	rbit	r3, r3
 8005884:	613b      	str	r3, [r7, #16]
  return result;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	fab3 f383 	clz	r3, r3
 800588c:	b2db      	uxtb	r3, r3
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	210f      	movs	r1, #15
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	43db      	mvns	r3, r3
 8005898:	401a      	ands	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	61bb      	str	r3, [r7, #24]
  return result;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	fab3 f383 	clz	r3, r3
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	4313      	orrs	r3, r2
 80058b8:	6023      	str	r3, [r4, #0]
}
 80058ba:	bf00      	nop
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc90      	pop	{r4, r7}
 80058c2:	4770      	bx	lr

080058c4 <LL_GPIO_SetPinSpeed>:
{
 80058c4:	b490      	push	{r4, r7}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	0e1b      	lsrs	r3, r3, #24
 80058d8:	4413      	add	r3, r2
 80058da:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	fa93 f3a3 	rbit	r3, r3
 80058e8:	613b      	str	r3, [r7, #16]
  return result;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	fab3 f383 	clz	r3, r3
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	2103      	movs	r1, #3
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	401a      	ands	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	fa93 f3a3 	rbit	r3, r3
 8005908:	61bb      	str	r3, [r7, #24]
  return result;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	fa01 f303 	lsl.w	r3, r1, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	6023      	str	r3, [r4, #0]
}
 800591e:	bf00      	nop
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bc90      	pop	{r4, r7}
 8005926:	4770      	bx	lr

08005928 <LL_GPIO_SetPinOutputType>:
{
 8005928:	b490      	push	{r4, r7}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	461a      	mov	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	0e1b      	lsrs	r3, r3, #24
 800593c:	4413      	add	r3, r2
 800593e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	fa93 f3a3 	rbit	r3, r3
 800594c:	613b      	str	r3, [r7, #16]
  return result;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	fab3 f383 	clz	r3, r3
 8005954:	b2db      	uxtb	r3, r3
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	2104      	movs	r1, #4
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	401a      	ands	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	61bb      	str	r3, [r7, #24]
  return result;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	fab3 f383 	clz	r3, r3
 8005974:	b2db      	uxtb	r3, r3
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	4313      	orrs	r3, r2
 8005980:	6023      	str	r3, [r4, #0]
}
 8005982:	bf00      	nop
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bc90      	pop	{r4, r7}
 800598a:	4770      	bx	lr

0800598c <LL_GPIO_SetPinPull>:
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	43db      	mvns	r3, r3
 80059a2:	401a      	ands	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	fa93 f3a3 	rbit	r3, r3
 80059b0:	613b      	str	r3, [r7, #16]
  return result;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	fab3 f383 	clz	r3, r3
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	4619      	mov	r1, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	408b      	lsls	r3, r1
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	60da      	str	r2, [r3, #12]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	60fb      	str	r3, [r7, #12]
  return result;
 80059f0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80059f2:	fab3 f383 	clz	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80059fa:	e044      	b.n	8005a86 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80059fc:	2201      	movs	r2, #1
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	409a      	lsls	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03a      	beq.n	8005a80 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b07      	cmp	r3, #7
 8005a0e:	d806      	bhi.n	8005a1e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8005a10:	f240 1201 	movw	r2, #257	@ 0x101
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	e008      	b.n	8005a30 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3b08      	subs	r3, #8
 8005a22:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a2e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d106      	bne.n	8005a46 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	69b9      	ldr	r1, [r7, #24]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff ffa3 	bl	800598c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff ff06 	bl	8005860 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d003      	beq.n	8005a64 <LL_GPIO_Init+0x94>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b09      	cmp	r3, #9
 8005a62:	d10d      	bne.n	8005a80 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	69b9      	ldr	r1, [r7, #24]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff29 	bl	80058c4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff ff54 	bl	8005928 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	3301      	adds	r3, #1
 8005a84:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1b4      	bne.n	80059fc <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005aa0:	4b03      	ldr	r3, [pc, #12]	@ (8005ab0 <LL_RCC_GetSysClkSource+0x14>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	40021000 	.word	0x40021000

08005ab4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ab8:	4b03      	ldr	r3, [pc, #12]	@ (8005ac8 <LL_RCC_GetAHBPrescaler+0x14>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr
 8005ac8:	40021000 	.word	0x40021000

08005acc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005ad0:	4b03      	ldr	r3, [pc, #12]	@ (8005ae0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ae8:	4b03      	ldr	r3, [pc, #12]	@ (8005af8 <LL_RCC_GetAPB2Prescaler+0x14>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr
 8005af8:	40021000 	.word	0x40021000

08005afc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005b00:	4b03      	ldr	r3, [pc, #12]	@ (8005b10 <LL_RCC_PLL_GetMainSource+0x14>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	40021000 	.word	0x40021000

08005b14 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8005b18:	4b03      	ldr	r3, [pc, #12]	@ (8005b28 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr
 8005b28:	40021000 	.word	0x40021000

08005b2c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8005b30:	4b04      	ldr	r3, [pc, #16]	@ (8005b44 <LL_RCC_PLL_GetPrediv+0x18>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	0c5b      	lsrs	r3, r3, #17
 8005b36:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000

08005b48 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005b50:	f000 f820 	bl	8005b94 <RCC_GetSystemClockFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f83e 	bl	8005be0 <RCC_GetHCLKClockFreq>
 8005b64:	4602      	mov	r2, r0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f84c 	bl	8005c0c <RCC_GetPCLK1ClockFreq>
 8005b74:	4602      	mov	r2, r0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f858 	bl	8005c34 <RCC_GetPCLK2ClockFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60da      	str	r2, [r3, #12]
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005b9e:	f7ff ff7d 	bl	8005a9c <LL_RCC_GetSysClkSource>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d00c      	beq.n	8005bc2 <RCC_GetSystemClockFreq+0x2e>
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d80e      	bhi.n	8005bca <RCC_GetSystemClockFreq+0x36>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <RCC_GetSystemClockFreq+0x22>
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d003      	beq.n	8005bbc <RCC_GetSystemClockFreq+0x28>
 8005bb4:	e009      	b.n	8005bca <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005bb6:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <RCC_GetSystemClockFreq+0x48>)
 8005bb8:	607b      	str	r3, [r7, #4]
      break;
 8005bba:	e009      	b.n	8005bd0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005bbc:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <RCC_GetSystemClockFreq+0x48>)
 8005bbe:	607b      	str	r3, [r7, #4]
      break;
 8005bc0:	e006      	b.n	8005bd0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005bc2:	f000 f84b 	bl	8005c5c <RCC_PLL_GetFreqDomain_SYS>
 8005bc6:	6078      	str	r0, [r7, #4]
      break;
 8005bc8:	e002      	b.n	8005bd0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005bca:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <RCC_GetSystemClockFreq+0x48>)
 8005bcc:	607b      	str	r3, [r7, #4]
      break;
 8005bce:	bf00      	nop
  }

  return frequency;
 8005bd0:	687b      	ldr	r3, [r7, #4]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	007a1200 	.word	0x007a1200

08005be0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005be8:	f7ff ff64 	bl	8005ab4 <LL_RCC_GetAHBPrescaler>
 8005bec:	4603      	mov	r3, r0
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	4a04      	ldr	r2, [pc, #16]	@ (8005c08 <RCC_GetHCLKClockFreq+0x28>)
 8005bf6:	5cd3      	ldrb	r3, [r2, r3]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	40d3      	lsrs	r3, r2
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	0800b8ec 	.word	0x0800b8ec

08005c0c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005c14:	f7ff ff5a 	bl	8005acc <LL_RCC_GetAPB1Prescaler>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	4a04      	ldr	r2, [pc, #16]	@ (8005c30 <RCC_GetPCLK1ClockFreq+0x24>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	461a      	mov	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	40d3      	lsrs	r3, r2
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	0800b8fc 	.word	0x0800b8fc

08005c34 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005c3c:	f7ff ff52 	bl	8005ae4 <LL_RCC_GetAPB2Prescaler>
 8005c40:	4603      	mov	r3, r0
 8005c42:	0adb      	lsrs	r3, r3, #11
 8005c44:	4a04      	ldr	r2, [pc, #16]	@ (8005c58 <RCC_GetPCLK2ClockFreq+0x24>)
 8005c46:	5cd3      	ldrb	r3, [r2, r3]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	40d3      	lsrs	r3, r2
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	0800b8fc 	.word	0x0800b8fc

08005c5c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
 8005c66:	2300      	movs	r3, #0
 8005c68:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005c6a:	f7ff ff47 	bl	8005afc <LL_RCC_PLL_GetMainSource>
 8005c6e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c7c:	d003      	beq.n	8005c86 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005c7e:	e00b      	b.n	8005c98 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8005c80:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8005c82:	607b      	str	r3, [r7, #4]
      break;
 8005c84:	e00b      	b.n	8005c9e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8005c86:	f7ff ff51 	bl	8005b2c <LL_RCC_PLL_GetPrediv>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8005cbc <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	607b      	str	r3, [r7, #4]
      break;
 8005c96:	e002      	b.n	8005c9e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8005c9a:	607b      	str	r3, [r7, #4]
      break;
 8005c9c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8005c9e:	f7ff ff39 	bl	8005b14 <LL_RCC_PLL_GetMultiplicator>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	0c9b      	lsrs	r3, r3, #18
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	003d0900 	.word	0x003d0900
 8005cbc:	007a1200 	.word	0x007a1200

08005cc0 <LL_USART_IsEnabled>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd4:	bf0c      	ite	eq
 8005cd6:	2301      	moveq	r3, #1
 8005cd8:	2300      	movne	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <LL_USART_SetStopBitsLength>:
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	611a      	str	r2, [r3, #16]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <LL_USART_SetHWFlowCtrl>:
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	615a      	str	r2, [r3, #20]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr
	...

08005d30 <LL_USART_SetBaudRate>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009a      	lsls	r2, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d50:	4a25      	ldr	r2, [pc, #148]	@ (8005de8 <LL_USART_SetBaudRate+0xb8>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	b299      	uxth	r1, r3
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009a      	lsls	r2, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d72:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <LL_USART_SetBaudRate+0xb8>)
 8005d74:	fba3 0302 	umull	r0, r3, r3, r2
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	2064      	movs	r0, #100	@ 0x64
 8005d7c:	fb00 f303 	mul.w	r3, r0, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	3332      	adds	r3, #50	@ 0x32
 8005d86:	4a18      	ldr	r2, [pc, #96]	@ (8005de8 <LL_USART_SetBaudRate+0xb8>)
 8005d88:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	440b      	add	r3, r1
 8005d98:	b299      	uxth	r1, r3
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009a      	lsls	r2, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dae:	4b0e      	ldr	r3, [pc, #56]	@ (8005de8 <LL_USART_SetBaudRate+0xb8>)
 8005db0:	fba3 0302 	umull	r0, r3, r3, r2
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	2064      	movs	r0, #100	@ 0x64
 8005db8:	fb00 f303 	mul.w	r3, r0, r3
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	3332      	adds	r3, #50	@ 0x32
 8005dc2:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <LL_USART_SetBaudRate+0xb8>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	51eb851f 	.word	0x51eb851f

08005dec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff5e 	bl	8005cc0 <LL_USART_IsEnabled>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d145      	bne.n	8005e96 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e12:	f023 030c 	bic.w	r3, r3, #12
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	6851      	ldr	r1, [r2, #4]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	68d2      	ldr	r2, [r2, #12]
 8005e1e:	4311      	orrs	r1, r2
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	6912      	ldr	r2, [r2, #16]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ff57 	bl	8005ce6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7ff ff63 	bl	8005d0a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fe7d 	bl	8005b48 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a13      	ldr	r2, [pc, #76]	@ (8005ea0 <LL_USART_Init+0xb4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d102      	bne.n	8005e5c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e00c      	b.n	8005e76 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a11      	ldr	r2, [pc, #68]	@ (8005ea4 <LL_USART_Init+0xb8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d102      	bne.n	8005e6a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	61bb      	str	r3, [r7, #24]
 8005e68:	e005      	b.n	8005e76 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8005ea8 <LL_USART_Init+0xbc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00c      	beq.n	8005e96 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8005e84:	2300      	movs	r3, #0
 8005e86:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	69b9      	ldr	r1, [r7, #24]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff4d 	bl	8005d30 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40013800 	.word	0x40013800
 8005ea4:	40004400 	.word	0x40004400
 8005ea8:	40004800 	.word	0x40004800

08005eac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ebe:	2b84      	cmp	r3, #132	@ 0x84
 8005ec0:	d005      	beq.n	8005ece <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ec2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3303      	adds	r3, #3
 8005ecc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ece:	68fb      	ldr	r3, [r7, #12]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr

08005eda <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ede:	f000 ff4f 	bl	8006d80 <vTaskStartScheduler>
  
  return osOK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eea:	b089      	sub	sp, #36	@ 0x24
 8005eec:	af04      	add	r7, sp, #16
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d020      	beq.n	8005f3c <osThreadCreate+0x54>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01c      	beq.n	8005f3c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685c      	ldr	r4, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691e      	ldr	r6, [r3, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff ffc9 	bl	8005eac <makeFreeRtosPriority>
 8005f1a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f24:	9202      	str	r2, [sp, #8]
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	9100      	str	r1, [sp, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fd49 	bl	80069c8 <xTaskCreateStatic>
 8005f36:	4603      	mov	r3, r0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e01c      	b.n	8005f76 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685c      	ldr	r4, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f48:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ffab 	bl	8005eac <makeFreeRtosPriority>
 8005f56:	4602      	mov	r2, r0
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	9301      	str	r3, [sp, #4]
 8005f5e:	9200      	str	r2, [sp, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	4632      	mov	r2, r6
 8005f64:	4629      	mov	r1, r5
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 fd8d 	bl	8006a86 <xTaskCreate>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d001      	beq.n	8005f76 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e000      	b.n	8005f78 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f76:	68fb      	ldr	r3, [r7, #12]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f80 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <osDelay+0x16>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	e000      	b.n	8005f98 <osDelay+0x18>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 febb 	bl	8006d14 <vTaskDelay>
  
  return osOK;
 8005f9e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d011      	beq.n	8005fde <osMessageCreate+0x36>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2400      	movs	r4, #0
 8005fd4:	9400      	str	r4, [sp, #0]
 8005fd6:	f000 f929 	bl	800622c <xQueueGenericCreateStatic>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	e008      	b.n	8005ff0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f000 f99b 	bl	8006324 <xQueueGenericCreate>
 8005fee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd90      	pop	{r4, r7, pc}

08005ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f103 0208 	add.w	r2, r3, #8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f04f 32ff 	mov.w	r2, #4294967295
 8006010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f103 0208 	add.w	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f103 0208 	add.w	r2, r3, #8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	bc80      	pop	{r7}
 800604c:	4770      	bx	lr

0800604e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d103      	bne.n	80060b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	e00c      	b.n	80060ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3308      	adds	r3, #8
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e002      	b.n	80060c2 <vListInsert+0x2e>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d2f6      	bcs.n	80060bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6892      	ldr	r2, [r2, #8]
 800611a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6852      	ldr	r2, [r2, #4]
 8006124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d103      	bne.n	8006138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	1e5a      	subs	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
	...

08006158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10b      	bne.n	8006184 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006184:	f001 fc22 	bl	80079cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	441a      	add	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b4:	3b01      	subs	r3, #1
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061ba:	fb01 f303 	mul.w	r3, r1, r3
 80061be:	441a      	add	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	22ff      	movs	r2, #255	@ 0xff
 80061c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	22ff      	movs	r2, #255	@ 0xff
 80061d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d114      	bne.n	8006204 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01a      	beq.n	8006218 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3310      	adds	r3, #16
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 f826 	bl	8007238 <xTaskRemoveFromEventList>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d012      	beq.n	8006218 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <xQueueGenericReset+0xd0>)
 80061f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	e009      	b.n	8006218 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3310      	adds	r3, #16
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fef5 	bl	8005ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3324      	adds	r3, #36	@ 0x24
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fef0 	bl	8005ff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006218:	f001 fc08 	bl	8007a2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800621c:	2301      	movs	r3, #1
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	@ 0x38
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	e7fd      	b.n	8006272 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <xQueueGenericCreateStatic+0x56>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <xQueueGenericCreateStatic+0x5a>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueGenericCreateStatic+0x5c>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10b      	bne.n	80062a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	623b      	str	r3, [r7, #32]
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	e7fd      	b.n	80062a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <xQueueGenericCreateStatic+0x84>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <xQueueGenericCreateStatic+0x88>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <xQueueGenericCreateStatic+0x8a>
 80062b4:	2300      	movs	r3, #0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	61fb      	str	r3, [r7, #28]
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062d2:	2348      	movs	r3, #72	@ 0x48
 80062d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b48      	cmp	r3, #72	@ 0x48
 80062da:	d00b      	beq.n	80062f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	61bb      	str	r3, [r7, #24]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00d      	beq.n	800631a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006306:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800630a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4613      	mov	r3, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f844 	bl	80063a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800631c:	4618      	mov	r0, r3
 800631e:	3730      	adds	r7, #48	@ 0x30
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	@ 0x28
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	613b      	str	r3, [r7, #16]
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e004      	b.n	8006366 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3348      	adds	r3, #72	@ 0x48
 800636a:	4618      	mov	r0, r3
 800636c:	f001 fbf0 	bl	8007b50 <pvPortMalloc>
 8006370:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00f      	beq.n	8006398 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	3348      	adds	r3, #72	@ 0x48
 800637c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006386:	79fa      	ldrb	r2, [r7, #7]
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f805 	bl	80063a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006398:	69bb      	ldr	r3, [r7, #24]
	}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e002      	b.n	80063c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063d0:	2101      	movs	r1, #1
 80063d2:	69b8      	ldr	r0, [r7, #24]
 80063d4:	f7ff fec0 	bl	8006158 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	@ 0x38
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ee:	2300      	movs	r3, #0
 80063f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <xQueueGenericSend+0x34>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	e7fd      	b.n	8006410 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <xQueueGenericSend+0x42>
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueGenericSend+0x46>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueGenericSend+0x48>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <xQueueGenericSend+0x64>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d103      	bne.n	8006452 <xQueueGenericSend+0x72>
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <xQueueGenericSend+0x76>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <xQueueGenericSend+0x78>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <xQueueGenericSend+0x94>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	623b      	str	r3, [r7, #32]
}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	e7fd      	b.n	8006470 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006474:	f001 f8aa 	bl	80075cc <xTaskGetSchedulerState>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d102      	bne.n	8006484 <xQueueGenericSend+0xa4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <xQueueGenericSend+0xa8>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <xQueueGenericSend+0xaa>
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	61fb      	str	r3, [r7, #28]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064a6:	f001 fa91 	bl	80079cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <xQueueGenericSend+0xdc>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d129      	bne.n	8006510 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064c2:	f000 f971 	bl	80067a8 <prvCopyDataToQueue>
 80064c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d010      	beq.n	80064f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d2:	3324      	adds	r3, #36	@ 0x24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 feaf 	bl	8007238 <xTaskRemoveFromEventList>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d013      	beq.n	8006508 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064e0:	4b3f      	ldr	r3, [pc, #252]	@ (80065e0 <xQueueGenericSend+0x200>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	e00a      	b.n	8006508 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064f8:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <xQueueGenericSend+0x200>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006508:	f001 fa90 	bl	8007a2c <vPortExitCritical>
				return pdPASS;
 800650c:	2301      	movs	r3, #1
 800650e:	e063      	b.n	80065d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006516:	f001 fa89 	bl	8007a2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800651a:	2300      	movs	r3, #0
 800651c:	e05c      	b.n	80065d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800651e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006524:	f107 0314 	add.w	r3, r7, #20
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fee9 	bl	8007300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006532:	f001 fa7b 	bl	8007a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006536:	f000 fc8d 	bl	8006e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800653a:	f001 fa47 	bl	80079cc <vPortEnterCritical>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006544:	b25b      	sxtb	r3, r3
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d103      	bne.n	8006554 <xQueueGenericSend+0x174>
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800655a:	b25b      	sxtb	r3, r3
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d103      	bne.n	800656a <xQueueGenericSend+0x18a>
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800656a:	f001 fa5f 	bl	8007a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800656e:	1d3a      	adds	r2, r7, #4
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fed8 	bl	800732c <xTaskCheckForTimeOut>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d124      	bne.n	80065cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006582:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006584:	f000 fa08 	bl	8006998 <prvIsQueueFull>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d018      	beq.n	80065c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	3310      	adds	r3, #16
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fe28 	bl	80071ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800659c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800659e:	f000 f993 	bl	80068c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065a2:	f000 fc65 	bl	8006e70 <xTaskResumeAll>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f af7c 	bne.w	80064a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80065ae:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <xQueueGenericSend+0x200>)
 80065b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	e772      	b.n	80064a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065c2:	f000 f981 	bl	80068c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065c6:	f000 fc53 	bl	8006e70 <xTaskResumeAll>
 80065ca:	e76c      	b.n	80064a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ce:	f000 f97b 	bl	80068c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065d2:	f000 fc4d 	bl	8006e70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065d6:	2300      	movs	r3, #0
		}
	}
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3738      	adds	r7, #56	@ 0x38
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08c      	sub	sp, #48	@ 0x30
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <xQueueReceive+0x32>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	623b      	str	r3, [r7, #32]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <xQueueReceive+0x40>
 800661c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <xQueueReceive+0x44>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <xQueueReceive+0x46>
 8006628:	2300      	movs	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <xQueueReceive+0x62>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	61fb      	str	r3, [r7, #28]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006646:	f000 ffc1 	bl	80075cc <xTaskGetSchedulerState>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <xQueueReceive+0x72>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <xQueueReceive+0x76>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <xQueueReceive+0x78>
 800665a:	2300      	movs	r3, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <xQueueReceive+0x94>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	61bb      	str	r3, [r7, #24]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006678:	f001 f9a8 	bl	80079cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01f      	beq.n	80066c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800668c:	f000 f8f6 	bl	800687c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	1e5a      	subs	r2, r3, #1
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00f      	beq.n	80066c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	3310      	adds	r3, #16
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fdc7 	bl	8007238 <xTaskRemoveFromEventList>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066b0:	4b3c      	ldr	r3, [pc, #240]	@ (80067a4 <xQueueReceive+0x1c0>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066c0:	f001 f9b4 	bl	8007a2c <vPortExitCritical>
				return pdPASS;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e069      	b.n	800679c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066ce:	f001 f9ad 	bl	8007a2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e062      	b.n	800679c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066dc:	f107 0310 	add.w	r3, r7, #16
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fe0d 	bl	8007300 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066ea:	f001 f99f 	bl	8007a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ee:	f000 fbb1 	bl	8006e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066f2:	f001 f96b 	bl	80079cc <vPortEnterCritical>
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d103      	bne.n	800670c <xQueueReceive+0x128>
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006712:	b25b      	sxtb	r3, r3
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006718:	d103      	bne.n	8006722 <xQueueReceive+0x13e>
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006722:	f001 f983 	bl	8007a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006726:	1d3a      	adds	r2, r7, #4
 8006728:	f107 0310 	add.w	r3, r7, #16
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fdfc 	bl	800732c <xTaskCheckForTimeOut>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d123      	bne.n	8006782 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800673a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800673c:	f000 f916 	bl	800696c <prvIsQueueEmpty>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d017      	beq.n	8006776 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006748:	3324      	adds	r3, #36	@ 0x24
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fd4c 	bl	80071ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006756:	f000 f8b7 	bl	80068c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800675a:	f000 fb89 	bl	8006e70 <xTaskResumeAll>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d189      	bne.n	8006678 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006764:	4b0f      	ldr	r3, [pc, #60]	@ (80067a4 <xQueueReceive+0x1c0>)
 8006766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	e780      	b.n	8006678 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006778:	f000 f8a6 	bl	80068c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800677c:	f000 fb78 	bl	8006e70 <xTaskResumeAll>
 8006780:	e77a      	b.n	8006678 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006784:	f000 f8a0 	bl	80068c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006788:	f000 fb72 	bl	8006e70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800678c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800678e:	f000 f8ed 	bl	800696c <prvIsQueueEmpty>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	f43f af6f 	beq.w	8006678 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800679a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800679c:	4618      	mov	r0, r3
 800679e:	3730      	adds	r7, #48	@ 0x30
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	e000ed04 	.word	0xe000ed04

080067a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10d      	bne.n	80067e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d14d      	bne.n	800686a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ff18 	bl	8007608 <xTaskPriorityDisinherit>
 80067d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	605a      	str	r2, [r3, #4]
 80067e0:	e043      	b.n	800686a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d119      	bne.n	800681c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6898      	ldr	r0, [r3, #8]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f0:	461a      	mov	r2, r3
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	f002 fcbd 	bl	8009172 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006800:	441a      	add	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	d32b      	bcc.n	800686a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	609a      	str	r2, [r3, #8]
 800681a:	e026      	b.n	800686a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	68d8      	ldr	r0, [r3, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	461a      	mov	r2, r3
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	f002 fca3 	bl	8009172 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	425b      	negs	r3, r3
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d207      	bcs.n	8006858 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006850:	425b      	negs	r3, r3
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d105      	bne.n	800686a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	3b01      	subs	r3, #1
 8006868:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006872:	697b      	ldr	r3, [r7, #20]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	d018      	beq.n	80068c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	441a      	add	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d303      	bcc.n	80068b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68d9      	ldr	r1, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	461a      	mov	r2, r3
 80068ba:	6838      	ldr	r0, [r7, #0]
 80068bc:	f002 fc59 	bl	8009172 <memcpy>
	}
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068d0:	f001 f87c 	bl	80079cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068dc:	e011      	b.n	8006902 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d012      	beq.n	800690c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3324      	adds	r3, #36	@ 0x24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fca4 	bl	8007238 <xTaskRemoveFromEventList>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068f6:	f000 fd7d 	bl	80073f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006906:	2b00      	cmp	r3, #0
 8006908:	dce9      	bgt.n	80068de <prvUnlockQueue+0x16>
 800690a:	e000      	b.n	800690e <prvUnlockQueue+0x46>
					break;
 800690c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	22ff      	movs	r2, #255	@ 0xff
 8006912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006916:	f001 f889 	bl	8007a2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800691a:	f001 f857 	bl	80079cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006924:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006926:	e011      	b.n	800694c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d012      	beq.n	8006956 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3310      	adds	r3, #16
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fc7f 	bl	8007238 <xTaskRemoveFromEventList>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006940:	f000 fd58 	bl	80073f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	3b01      	subs	r3, #1
 8006948:	b2db      	uxtb	r3, r3
 800694a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800694c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006950:	2b00      	cmp	r3, #0
 8006952:	dce9      	bgt.n	8006928 <prvUnlockQueue+0x60>
 8006954:	e000      	b.n	8006958 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006956:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	22ff      	movs	r2, #255	@ 0xff
 800695c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006960:	f001 f864 	bl	8007a2c <vPortExitCritical>
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006974:	f001 f82a 	bl	80079cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e001      	b.n	800698a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800698a:	f001 f84f 	bl	8007a2c <vPortExitCritical>

	return xReturn;
 800698e:	68fb      	ldr	r3, [r7, #12]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069a0:	f001 f814 	bl	80079cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d102      	bne.n	80069b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e001      	b.n	80069ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069ba:	f001 f837 	bl	8007a2c <vPortExitCritical>

	return xReturn;
 80069be:	68fb      	ldr	r3, [r7, #12]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08e      	sub	sp, #56	@ 0x38
 80069cc:	af04      	add	r7, sp, #16
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	623b      	str	r3, [r7, #32]
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	e7fd      	b.n	80069f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <xTaskCreateStatic+0x4a>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	61fb      	str	r3, [r7, #28]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a12:	23a0      	movs	r3, #160	@ 0xa0
 8006a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2ba0      	cmp	r3, #160	@ 0xa0
 8006a1a:	d00b      	beq.n	8006a34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	61bb      	str	r3, [r7, #24]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01e      	beq.n	8006a78 <xTaskCreateStatic+0xb0>
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01b      	beq.n	8006a78 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a48:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a52:	2300      	movs	r3, #0
 8006a54:	9303      	str	r3, [sp, #12]
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	9302      	str	r3, [sp, #8]
 8006a5a:	f107 0314 	add.w	r3, r7, #20
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f850 	bl	8006b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a72:	f000 f8e5 	bl	8006c40 <prvAddNewTaskToReadyList>
 8006a76:	e001      	b.n	8006a7c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a7c:	697b      	ldr	r3, [r7, #20]
	}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3728      	adds	r7, #40	@ 0x28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b08c      	sub	sp, #48	@ 0x30
 8006a8a:	af04      	add	r7, sp, #16
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f001 f858 	bl	8007b50 <pvPortMalloc>
 8006aa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006aa8:	20a0      	movs	r0, #160	@ 0xa0
 8006aaa:	f001 f851 	bl	8007b50 <pvPortMalloc>
 8006aae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
 8006abc:	e005      	b.n	8006aca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006abe:	6978      	ldr	r0, [r7, #20]
 8006ac0:	f001 f858 	bl	8007b74 <vPortFree>
 8006ac4:	e001      	b.n	8006aca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d017      	beq.n	8006b00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ad8:	88fa      	ldrh	r2, [r7, #6]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9303      	str	r3, [sp, #12]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f80e 	bl	8006b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006af4:	69f8      	ldr	r0, [r7, #28]
 8006af6:	f000 f8a3 	bl	8006c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006afa:	2301      	movs	r3, #1
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e002      	b.n	8006b06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b00:	f04f 33ff 	mov.w	r3, #4294967295
 8006b04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b06:	69bb      	ldr	r3, [r7, #24]
	}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f023 0307 	bic.w	r3, r3, #7
 8006b36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	617b      	str	r3, [r7, #20]
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop
 8006b58:	e7fd      	b.n	8006b56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	e012      	b.n	8006b86 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	7819      	ldrb	r1, [r3, #0]
 8006b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3334      	adds	r3, #52	@ 0x34
 8006b70:	460a      	mov	r2, r1
 8006b72:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d006      	beq.n	8006b8e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	2b0f      	cmp	r3, #15
 8006b8a:	d9e9      	bls.n	8006b60 <prvInitialiseNewTask+0x50>
 8006b8c:	e000      	b.n	8006b90 <prvInitialiseNewTask+0x80>
		{
			break;
 8006b8e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	2b06      	cmp	r3, #6
 8006b9c:	d901      	bls.n	8006ba2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b9e:	2306      	movs	r3, #6
 8006ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fa3c 	bl	8006036 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	3318      	adds	r3, #24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fa37 	bl	8006036 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bcc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	f1c3 0207 	rsb	r2, r3, #7
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bdc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	334c      	adds	r3, #76	@ 0x4c
 8006bf2:	224c      	movs	r2, #76	@ 0x4c
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f002 f9d9 	bl	8008fae <memset>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8006c34 <prvInitialiseNewTask+0x124>)
 8006c00:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	4a0c      	ldr	r2, [pc, #48]	@ (8006c38 <prvInitialiseNewTask+0x128>)
 8006c06:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c3c <prvInitialiseNewTask+0x12c>)
 8006c0c:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	68f9      	ldr	r1, [r7, #12]
 8006c12:	69b8      	ldr	r0, [r7, #24]
 8006c14:	f000 fde6 	bl	80077e4 <pxPortInitialiseStack>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c2a:	bf00      	nop
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000f00 	.word	0x20000f00
 8006c38:	20000f68 	.word	0x20000f68
 8006c3c:	20000fd0 	.word	0x20000fd0

08006c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c48:	f000 fec0 	bl	80079cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf8 <prvAddNewTaskToReadyList+0xb8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a29      	ldr	r2, [pc, #164]	@ (8006cf8 <prvAddNewTaskToReadyList+0xb8>)
 8006c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c56:	4b29      	ldr	r3, [pc, #164]	@ (8006cfc <prvAddNewTaskToReadyList+0xbc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c5e:	4a27      	ldr	r2, [pc, #156]	@ (8006cfc <prvAddNewTaskToReadyList+0xbc>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c64:	4b24      	ldr	r3, [pc, #144]	@ (8006cf8 <prvAddNewTaskToReadyList+0xb8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d110      	bne.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c6c:	f000 fbe6 	bl	800743c <prvInitialiseTaskLists>
 8006c70:	e00d      	b.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c72:	4b23      	ldr	r3, [pc, #140]	@ (8006d00 <prvAddNewTaskToReadyList+0xc0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c7a:	4b20      	ldr	r3, [pc, #128]	@ (8006cfc <prvAddNewTaskToReadyList+0xbc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d802      	bhi.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c88:	4a1c      	ldr	r2, [pc, #112]	@ (8006cfc <prvAddNewTaskToReadyList+0xbc>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a1b      	ldr	r2, [pc, #108]	@ (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	4b19      	ldr	r3, [pc, #100]	@ (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	4a18      	ldr	r2, [pc, #96]	@ (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a15      	ldr	r2, [pc, #84]	@ (8006d0c <prvAddNewTaskToReadyList+0xcc>)
 8006cb8:	441a      	add	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7ff f9c4 	bl	800604e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cc6:	f000 feb1 	bl	8007a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <prvAddNewTaskToReadyList+0xc0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <prvAddNewTaskToReadyList+0xbc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d207      	bcs.n	8006cf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d10 <prvAddNewTaskToReadyList+0xd0>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000620 	.word	0x20000620
 8006cfc:	20000520 	.word	0x20000520
 8006d00:	2000062c 	.word	0x2000062c
 8006d04:	2000063c 	.word	0x2000063c
 8006d08:	20000628 	.word	0x20000628
 8006d0c:	20000524 	.word	0x20000524
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d018      	beq.n	8006d58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d26:	4b14      	ldr	r3, [pc, #80]	@ (8006d78 <vTaskDelay+0x64>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <vTaskDelay+0x32>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60bb      	str	r3, [r7, #8]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d46:	f000 f885 	bl	8006e54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fce3 	bl	8007718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d52:	f000 f88d 	bl	8006e70 <xTaskResumeAll>
 8006d56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d107      	bne.n	8006d6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d5e:	4b07      	ldr	r3, [pc, #28]	@ (8006d7c <vTaskDelay+0x68>)
 8006d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000648 	.word	0x20000648
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	@ 0x28
 8006d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d8e:	463a      	mov	r2, r7
 8006d90:	1d39      	adds	r1, r7, #4
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fa f9b2 	bl	8001100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	9202      	str	r2, [sp, #8]
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	2300      	movs	r3, #0
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	2300      	movs	r3, #0
 8006dac:	460a      	mov	r2, r1
 8006dae:	4921      	ldr	r1, [pc, #132]	@ (8006e34 <vTaskStartScheduler+0xb4>)
 8006db0:	4821      	ldr	r0, [pc, #132]	@ (8006e38 <vTaskStartScheduler+0xb8>)
 8006db2:	f7ff fe09 	bl	80069c8 <xTaskCreateStatic>
 8006db6:	4603      	mov	r3, r0
 8006db8:	4a20      	ldr	r2, [pc, #128]	@ (8006e3c <vTaskStartScheduler+0xbc>)
 8006dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8006e3c <vTaskStartScheduler+0xbc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e001      	b.n	8006dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d11b      	bne.n	8006e0c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	613b      	str	r3, [r7, #16]
}
 8006de6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006de8:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <vTaskStartScheduler+0xc0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	334c      	adds	r3, #76	@ 0x4c
 8006dee:	4a15      	ldr	r2, [pc, #84]	@ (8006e44 <vTaskStartScheduler+0xc4>)
 8006df0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006df2:	4b15      	ldr	r3, [pc, #84]	@ (8006e48 <vTaskStartScheduler+0xc8>)
 8006df4:	f04f 32ff 	mov.w	r2, #4294967295
 8006df8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dfa:	4b14      	ldr	r3, [pc, #80]	@ (8006e4c <vTaskStartScheduler+0xcc>)
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006e00:	4b13      	ldr	r3, [pc, #76]	@ (8006e50 <vTaskStartScheduler+0xd0>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e06:	f000 fd6f 	bl	80078e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e0a:	e00f      	b.n	8006e2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d10b      	bne.n	8006e2c <vTaskStartScheduler+0xac>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <vTaskStartScheduler+0xa8>
}
 8006e2c:	bf00      	nop
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	0800b85c 	.word	0x0800b85c
 8006e38:	0800740d 	.word	0x0800740d
 8006e3c:	20000644 	.word	0x20000644
 8006e40:	20000520 	.word	0x20000520
 8006e44:	20000034 	.word	0x20000034
 8006e48:	20000640 	.word	0x20000640
 8006e4c:	2000062c 	.word	0x2000062c
 8006e50:	20000624 	.word	0x20000624

08006e54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e58:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <vTaskSuspendAll+0x18>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	4a03      	ldr	r2, [pc, #12]	@ (8006e6c <vTaskSuspendAll+0x18>)
 8006e60:	6013      	str	r3, [r2, #0]
}
 8006e62:	bf00      	nop
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000648 	.word	0x20000648

08006e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e7e:	4b42      	ldr	r3, [pc, #264]	@ (8006f88 <xTaskResumeAll+0x118>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <xTaskResumeAll+0x2e>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	603b      	str	r3, [r7, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e9e:	f000 fd95 	bl	80079cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ea2:	4b39      	ldr	r3, [pc, #228]	@ (8006f88 <xTaskResumeAll+0x118>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	4a37      	ldr	r2, [pc, #220]	@ (8006f88 <xTaskResumeAll+0x118>)
 8006eaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eac:	4b36      	ldr	r3, [pc, #216]	@ (8006f88 <xTaskResumeAll+0x118>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d161      	bne.n	8006f78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eb4:	4b35      	ldr	r3, [pc, #212]	@ (8006f8c <xTaskResumeAll+0x11c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d05d      	beq.n	8006f78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ebc:	e02e      	b.n	8006f1c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ebe:	4b34      	ldr	r3, [pc, #208]	@ (8006f90 <xTaskResumeAll+0x120>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3318      	adds	r3, #24
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff f91a 	bl	8006104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff f915 	bl	8006104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	2201      	movs	r2, #1
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8006f94 <xTaskResumeAll+0x124>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8006f94 <xTaskResumeAll+0x124>)
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4a27      	ldr	r2, [pc, #156]	@ (8006f98 <xTaskResumeAll+0x128>)
 8006efa:	441a      	add	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7ff f8a3 	bl	800604e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0c:	4b23      	ldr	r3, [pc, #140]	@ (8006f9c <xTaskResumeAll+0x12c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d302      	bcc.n	8006f1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f16:	4b22      	ldr	r3, [pc, #136]	@ (8006fa0 <xTaskResumeAll+0x130>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f90 <xTaskResumeAll+0x120>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1cc      	bne.n	8006ebe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f2a:	f000 fb2b 	bl	8007584 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa4 <xTaskResumeAll+0x134>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d010      	beq.n	8006f5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f3a:	f000 f837 	bl	8006fac <xTaskIncrementTick>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f44:	4b16      	ldr	r3, [pc, #88]	@ (8006fa0 <xTaskResumeAll+0x130>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f1      	bne.n	8006f3a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006f56:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <xTaskResumeAll+0x134>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f5c:	4b10      	ldr	r3, [pc, #64]	@ (8006fa0 <xTaskResumeAll+0x130>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f64:	2301      	movs	r3, #1
 8006f66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f68:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa8 <xTaskResumeAll+0x138>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f78:	f000 fd58 	bl	8007a2c <vPortExitCritical>

	return xAlreadyYielded;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000648 	.word	0x20000648
 8006f8c:	20000620 	.word	0x20000620
 8006f90:	200005e0 	.word	0x200005e0
 8006f94:	20000628 	.word	0x20000628
 8006f98:	20000524 	.word	0x20000524
 8006f9c:	20000520 	.word	0x20000520
 8006fa0:	20000634 	.word	0x20000634
 8006fa4:	20000630 	.word	0x20000630
 8006fa8:	e000ed04 	.word	0xe000ed04

08006fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb6:	4b51      	ldr	r3, [pc, #324]	@ (80070fc <xTaskIncrementTick+0x150>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 808e 	bne.w	80070dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8007100 <xTaskIncrementTick+0x154>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fc8:	4a4d      	ldr	r2, [pc, #308]	@ (8007100 <xTaskIncrementTick+0x154>)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d121      	bne.n	8007018 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8007104 <xTaskIncrementTick+0x158>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00b      	beq.n	8006ff6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	603b      	str	r3, [r7, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <xTaskIncrementTick+0x46>
 8006ff6:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <xTaskIncrementTick+0x158>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	4b42      	ldr	r3, [pc, #264]	@ (8007108 <xTaskIncrementTick+0x15c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a40      	ldr	r2, [pc, #256]	@ (8007104 <xTaskIncrementTick+0x158>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	4a40      	ldr	r2, [pc, #256]	@ (8007108 <xTaskIncrementTick+0x15c>)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	4b40      	ldr	r3, [pc, #256]	@ (800710c <xTaskIncrementTick+0x160>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	4a3e      	ldr	r2, [pc, #248]	@ (800710c <xTaskIncrementTick+0x160>)
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	f000 fab6 	bl	8007584 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007018:	4b3d      	ldr	r3, [pc, #244]	@ (8007110 <xTaskIncrementTick+0x164>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	429a      	cmp	r2, r3
 8007020:	d34d      	bcc.n	80070be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007022:	4b38      	ldr	r3, [pc, #224]	@ (8007104 <xTaskIncrementTick+0x158>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <xTaskIncrementTick+0x84>
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <xTaskIncrementTick+0x86>
 8007030:	2300      	movs	r3, #0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007036:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <xTaskIncrementTick+0x164>)
 8007038:	f04f 32ff 	mov.w	r2, #4294967295
 800703c:	601a      	str	r2, [r3, #0]
					break;
 800703e:	e03e      	b.n	80070be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007040:	4b30      	ldr	r3, [pc, #192]	@ (8007104 <xTaskIncrementTick+0x158>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d203      	bcs.n	8007060 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007058:	4a2d      	ldr	r2, [pc, #180]	@ (8007110 <xTaskIncrementTick+0x164>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6013      	str	r3, [r2, #0]
						break;
 800705e:	e02e      	b.n	80070be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	3304      	adds	r3, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff f84d 	bl	8006104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3318      	adds	r3, #24
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff f844 	bl	8006104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007080:	2201      	movs	r2, #1
 8007082:	409a      	lsls	r2, r3
 8007084:	4b23      	ldr	r3, [pc, #140]	@ (8007114 <xTaskIncrementTick+0x168>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4313      	orrs	r3, r2
 800708a:	4a22      	ldr	r2, [pc, #136]	@ (8007114 <xTaskIncrementTick+0x168>)
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4a1f      	ldr	r2, [pc, #124]	@ (8007118 <xTaskIncrementTick+0x16c>)
 800709c:	441a      	add	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7fe ffd2 	bl	800604e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ae:	4b1b      	ldr	r3, [pc, #108]	@ (800711c <xTaskIncrementTick+0x170>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d3b4      	bcc.n	8007022 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070bc:	e7b1      	b.n	8007022 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070be:	4b17      	ldr	r3, [pc, #92]	@ (800711c <xTaskIncrementTick+0x170>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c4:	4914      	ldr	r1, [pc, #80]	@ (8007118 <xTaskIncrementTick+0x16c>)
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d907      	bls.n	80070e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80070d6:	2301      	movs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	e004      	b.n	80070e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070dc:	4b10      	ldr	r3, [pc, #64]	@ (8007120 <xTaskIncrementTick+0x174>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3301      	adds	r3, #1
 80070e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007120 <xTaskIncrementTick+0x174>)
 80070e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <xTaskIncrementTick+0x178>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80070ee:	2301      	movs	r3, #1
 80070f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070f2:	697b      	ldr	r3, [r7, #20]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20000648 	.word	0x20000648
 8007100:	20000624 	.word	0x20000624
 8007104:	200005d8 	.word	0x200005d8
 8007108:	200005dc 	.word	0x200005dc
 800710c:	20000638 	.word	0x20000638
 8007110:	20000640 	.word	0x20000640
 8007114:	20000628 	.word	0x20000628
 8007118:	20000524 	.word	0x20000524
 800711c:	20000520 	.word	0x20000520
 8007120:	20000630 	.word	0x20000630
 8007124:	20000634 	.word	0x20000634

08007128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800712e:	4b29      	ldr	r3, [pc, #164]	@ (80071d4 <vTaskSwitchContext+0xac>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007136:	4b28      	ldr	r3, [pc, #160]	@ (80071d8 <vTaskSwitchContext+0xb0>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800713c:	e045      	b.n	80071ca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800713e:	4b26      	ldr	r3, [pc, #152]	@ (80071d8 <vTaskSwitchContext+0xb0>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007144:	4b25      	ldr	r3, [pc, #148]	@ (80071dc <vTaskSwitchContext+0xb4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	fab3 f383 	clz	r3, r3
 8007150:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007152:	7afb      	ldrb	r3, [r7, #11]
 8007154:	f1c3 031f 	rsb	r3, r3, #31
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	4921      	ldr	r1, [pc, #132]	@ (80071e0 <vTaskSwitchContext+0xb8>)
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	440b      	add	r3, r1
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10b      	bne.n	8007186 <vTaskSwitchContext+0x5e>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	e7fd      	b.n	8007182 <vTaskSwitchContext+0x5a>
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4a13      	ldr	r2, [pc, #76]	@ (80071e0 <vTaskSwitchContext+0xb8>)
 8007192:	4413      	add	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	605a      	str	r2, [r3, #4]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3308      	adds	r3, #8
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d104      	bne.n	80071b6 <vTaskSwitchContext+0x8e>
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a09      	ldr	r2, [pc, #36]	@ (80071e4 <vTaskSwitchContext+0xbc>)
 80071be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071c0:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <vTaskSwitchContext+0xbc>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	334c      	adds	r3, #76	@ 0x4c
 80071c6:	4a08      	ldr	r2, [pc, #32]	@ (80071e8 <vTaskSwitchContext+0xc0>)
 80071c8:	6013      	str	r3, [r2, #0]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr
 80071d4:	20000648 	.word	0x20000648
 80071d8:	20000634 	.word	0x20000634
 80071dc:	20000628 	.word	0x20000628
 80071e0:	20000524 	.word	0x20000524
 80071e4:	20000520 	.word	0x20000520
 80071e8:	20000034 	.word	0x20000034

080071ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	60fb      	str	r3, [r7, #12]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007214:	4b07      	ldr	r3, [pc, #28]	@ (8007234 <vTaskPlaceOnEventList+0x48>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3318      	adds	r3, #24
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fe ff39 	bl	8006094 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007222:	2101      	movs	r1, #1
 8007224:	6838      	ldr	r0, [r7, #0]
 8007226:	f000 fa77 	bl	8007718 <prvAddCurrentTaskToDelayedList>
}
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000520 	.word	0x20000520

08007238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	60fb      	str	r3, [r7, #12]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	3318      	adds	r3, #24
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe ff4a 	bl	8006104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007270:	4b1d      	ldr	r3, [pc, #116]	@ (80072e8 <xTaskRemoveFromEventList+0xb0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11c      	bne.n	80072b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3304      	adds	r3, #4
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe ff41 	bl	8006104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007286:	2201      	movs	r2, #1
 8007288:	409a      	lsls	r2, r3
 800728a:	4b18      	ldr	r3, [pc, #96]	@ (80072ec <xTaskRemoveFromEventList+0xb4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4313      	orrs	r3, r2
 8007290:	4a16      	ldr	r2, [pc, #88]	@ (80072ec <xTaskRemoveFromEventList+0xb4>)
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4a13      	ldr	r2, [pc, #76]	@ (80072f0 <xTaskRemoveFromEventList+0xb8>)
 80072a2:	441a      	add	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f7fe fecf 	bl	800604e <vListInsertEnd>
 80072b0:	e005      	b.n	80072be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	3318      	adds	r3, #24
 80072b6:	4619      	mov	r1, r3
 80072b8:	480e      	ldr	r0, [pc, #56]	@ (80072f4 <xTaskRemoveFromEventList+0xbc>)
 80072ba:	f7fe fec8 	bl	800604e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <xTaskRemoveFromEventList+0xc0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d905      	bls.n	80072d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072cc:	2301      	movs	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072d0:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <xTaskRemoveFromEventList+0xc4>)
 80072d2:	2201      	movs	r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e001      	b.n	80072dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80072dc:	697b      	ldr	r3, [r7, #20]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000648 	.word	0x20000648
 80072ec:	20000628 	.word	0x20000628
 80072f0:	20000524 	.word	0x20000524
 80072f4:	200005e0 	.word	0x200005e0
 80072f8:	20000520 	.word	0x20000520
 80072fc:	20000634 	.word	0x20000634

08007300 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007308:	4b06      	ldr	r3, [pc, #24]	@ (8007324 <vTaskInternalSetTimeOutState+0x24>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <vTaskInternalSetTimeOutState+0x28>)
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	605a      	str	r2, [r3, #4]
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000638 	.word	0x20000638
 8007328:	20000624 	.word	0x20000624

0800732c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10b      	bne.n	8007354 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	613b      	str	r3, [r7, #16]
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	e7fd      	b.n	8007350 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	60fb      	str	r3, [r7, #12]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007372:	f000 fb2b 	bl	80079cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007376:	4b1d      	ldr	r3, [pc, #116]	@ (80073ec <xTaskCheckForTimeOut+0xc0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d102      	bne.n	8007396 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007390:	2300      	movs	r3, #0
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	e023      	b.n	80073de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4b15      	ldr	r3, [pc, #84]	@ (80073f0 <xTaskCheckForTimeOut+0xc4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d007      	beq.n	80073b2 <xTaskCheckForTimeOut+0x86>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d302      	bcc.n	80073b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	e015      	b.n	80073de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d20b      	bcs.n	80073d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ff99 	bl	8007300 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	e004      	b.n	80073de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073da:	2301      	movs	r3, #1
 80073dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073de:	f000 fb25 	bl	8007a2c <vPortExitCritical>

	return xReturn;
 80073e2:	69fb      	ldr	r3, [r7, #28]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3720      	adds	r7, #32
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000624 	.word	0x20000624
 80073f0:	20000638 	.word	0x20000638

080073f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073f8:	4b03      	ldr	r3, [pc, #12]	@ (8007408 <vTaskMissedYield+0x14>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
}
 80073fe:	bf00      	nop
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000634 	.word	0x20000634

0800740c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007414:	f000 f852 	bl	80074bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007418:	4b06      	ldr	r3, [pc, #24]	@ (8007434 <prvIdleTask+0x28>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d9f9      	bls.n	8007414 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007420:	4b05      	ldr	r3, [pc, #20]	@ (8007438 <prvIdleTask+0x2c>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007430:	e7f0      	b.n	8007414 <prvIdleTask+0x8>
 8007432:	bf00      	nop
 8007434:	20000524 	.word	0x20000524
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007442:	2300      	movs	r3, #0
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	e00c      	b.n	8007462 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4a12      	ldr	r2, [pc, #72]	@ (800749c <prvInitialiseTaskLists+0x60>)
 8007454:	4413      	add	r3, r2
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fdce 	bl	8005ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3301      	adds	r3, #1
 8007460:	607b      	str	r3, [r7, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b06      	cmp	r3, #6
 8007466:	d9ef      	bls.n	8007448 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007468:	480d      	ldr	r0, [pc, #52]	@ (80074a0 <prvInitialiseTaskLists+0x64>)
 800746a:	f7fe fdc5 	bl	8005ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800746e:	480d      	ldr	r0, [pc, #52]	@ (80074a4 <prvInitialiseTaskLists+0x68>)
 8007470:	f7fe fdc2 	bl	8005ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007474:	480c      	ldr	r0, [pc, #48]	@ (80074a8 <prvInitialiseTaskLists+0x6c>)
 8007476:	f7fe fdbf 	bl	8005ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800747a:	480c      	ldr	r0, [pc, #48]	@ (80074ac <prvInitialiseTaskLists+0x70>)
 800747c:	f7fe fdbc 	bl	8005ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007480:	480b      	ldr	r0, [pc, #44]	@ (80074b0 <prvInitialiseTaskLists+0x74>)
 8007482:	f7fe fdb9 	bl	8005ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007486:	4b0b      	ldr	r3, [pc, #44]	@ (80074b4 <prvInitialiseTaskLists+0x78>)
 8007488:	4a05      	ldr	r2, [pc, #20]	@ (80074a0 <prvInitialiseTaskLists+0x64>)
 800748a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <prvInitialiseTaskLists+0x7c>)
 800748e:	4a05      	ldr	r2, [pc, #20]	@ (80074a4 <prvInitialiseTaskLists+0x68>)
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000524 	.word	0x20000524
 80074a0:	200005b0 	.word	0x200005b0
 80074a4:	200005c4 	.word	0x200005c4
 80074a8:	200005e0 	.word	0x200005e0
 80074ac:	200005f4 	.word	0x200005f4
 80074b0:	2000060c 	.word	0x2000060c
 80074b4:	200005d8 	.word	0x200005d8
 80074b8:	200005dc 	.word	0x200005dc

080074bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074c2:	e019      	b.n	80074f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074c4:	f000 fa82 	bl	80079cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80074c8:	4b10      	ldr	r3, [pc, #64]	@ (800750c <prvCheckTasksWaitingTermination+0x50>)
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe fe15 	bl	8006104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074da:	4b0d      	ldr	r3, [pc, #52]	@ (8007510 <prvCheckTasksWaitingTermination+0x54>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3b01      	subs	r3, #1
 80074e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007510 <prvCheckTasksWaitingTermination+0x54>)
 80074e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <prvCheckTasksWaitingTermination+0x58>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007514 <prvCheckTasksWaitingTermination+0x58>)
 80074ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074ee:	f000 fa9d 	bl	8007a2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f810 	bl	8007518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074f8:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <prvCheckTasksWaitingTermination+0x58>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e1      	bne.n	80074c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	200005f4 	.word	0x200005f4
 8007510:	20000620 	.word	0x20000620
 8007514:	20000608 	.word	0x20000608

08007518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	334c      	adds	r3, #76	@ 0x4c
 8007524:	4618      	mov	r0, r3
 8007526:	f001 fd5b 	bl	8008fe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fb1b 	bl	8007b74 <vPortFree>
				vPortFree( pxTCB );
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fb18 	bl	8007b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007544:	e019      	b.n	800757a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800754c:	2b01      	cmp	r3, #1
 800754e:	d103      	bne.n	8007558 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb0f 	bl	8007b74 <vPortFree>
	}
 8007556:	e010      	b.n	800757a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800755e:	2b02      	cmp	r3, #2
 8007560:	d00b      	beq.n	800757a <prvDeleteTCB+0x62>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	60fb      	str	r3, [r7, #12]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <prvDeleteTCB+0x5e>
	}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800758a:	4b0e      	ldr	r3, [pc, #56]	@ (80075c4 <prvResetNextTaskUnblockTime+0x40>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <prvResetNextTaskUnblockTime+0x14>
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <prvResetNextTaskUnblockTime+0x16>
 8007598:	2300      	movs	r3, #0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800759e:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <prvResetNextTaskUnblockTime+0x44>)
 80075a0:	f04f 32ff 	mov.w	r2, #4294967295
 80075a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075a6:	e008      	b.n	80075ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075a8:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <prvResetNextTaskUnblockTime+0x40>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4a04      	ldr	r2, [pc, #16]	@ (80075c8 <prvResetNextTaskUnblockTime+0x44>)
 80075b8:	6013      	str	r3, [r2, #0]
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr
 80075c4:	200005d8 	.word	0x200005d8
 80075c8:	20000640 	.word	0x20000640

080075cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <xTaskGetSchedulerState+0x34>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075da:	2301      	movs	r3, #1
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	e008      	b.n	80075f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e0:	4b08      	ldr	r3, [pc, #32]	@ (8007604 <xTaskGetSchedulerState+0x38>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075e8:	2302      	movs	r3, #2
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	e001      	b.n	80075f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075f2:	687b      	ldr	r3, [r7, #4]
	}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bc80      	pop	{r7}
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	2000062c 	.word	0x2000062c
 8007604:	20000648 	.word	0x20000648

08007608 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d070      	beq.n	8007700 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800761e:	4b3b      	ldr	r3, [pc, #236]	@ (800770c <xTaskPriorityDisinherit+0x104>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	d00b      	beq.n	8007640 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60fb      	str	r3, [r7, #12]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60bb      	str	r3, [r7, #8]
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	e7fd      	b.n	800765c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007664:	1e5a      	subs	r2, r3, #1
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007672:	429a      	cmp	r2, r3
 8007674:	d044      	beq.n	8007700 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767a:	2b00      	cmp	r3, #0
 800767c:	d140      	bne.n	8007700 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	3304      	adds	r3, #4
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fd3e 	bl	8006104 <uxListRemove>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d115      	bne.n	80076ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007692:	491f      	ldr	r1, [pc, #124]	@ (8007710 <xTaskPriorityDisinherit+0x108>)
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <xTaskPriorityDisinherit+0xb2>
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	2201      	movs	r2, #1
 80076aa:	fa02 f303 	lsl.w	r3, r2, r3
 80076ae:	43da      	mvns	r2, r3
 80076b0:	4b18      	ldr	r3, [pc, #96]	@ (8007714 <xTaskPriorityDisinherit+0x10c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4013      	ands	r3, r2
 80076b6:	4a17      	ldr	r2, [pc, #92]	@ (8007714 <xTaskPriorityDisinherit+0x10c>)
 80076b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c6:	f1c3 0207 	rsb	r2, r3, #7
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	2201      	movs	r2, #1
 80076d4:	409a      	lsls	r2, r3
 80076d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007714 <xTaskPriorityDisinherit+0x10c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4313      	orrs	r3, r2
 80076dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007714 <xTaskPriorityDisinherit+0x10c>)
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4a08      	ldr	r2, [pc, #32]	@ (8007710 <xTaskPriorityDisinherit+0x108>)
 80076ee:	441a      	add	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f7fe fca9 	bl	800604e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007700:	697b      	ldr	r3, [r7, #20]
	}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000520 	.word	0x20000520
 8007710:	20000524 	.word	0x20000524
 8007714:	20000628 	.word	0x20000628

08007718 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007722:	4b29      	ldr	r3, [pc, #164]	@ (80077c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007728:	4b28      	ldr	r3, [pc, #160]	@ (80077cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3304      	adds	r3, #4
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fce8 	bl	8006104 <uxListRemove>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800773a:	4b24      	ldr	r3, [pc, #144]	@ (80077cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	2201      	movs	r2, #1
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43da      	mvns	r2, r3
 8007748:	4b21      	ldr	r3, [pc, #132]	@ (80077d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4013      	ands	r3, r2
 800774e:	4a20      	ldr	r2, [pc, #128]	@ (80077d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007750:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d10a      	bne.n	8007770 <prvAddCurrentTaskToDelayedList+0x58>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007760:	4b1a      	ldr	r3, [pc, #104]	@ (80077cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3304      	adds	r3, #4
 8007766:	4619      	mov	r1, r3
 8007768:	481a      	ldr	r0, [pc, #104]	@ (80077d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800776a:	f7fe fc70 	bl	800604e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800776e:	e026      	b.n	80077be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007778:	4b14      	ldr	r3, [pc, #80]	@ (80077cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	429a      	cmp	r2, r3
 8007786:	d209      	bcs.n	800779c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007788:	4b13      	ldr	r3, [pc, #76]	@ (80077d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f7fe fc7d 	bl	8006094 <vListInsert>
}
 800779a:	e010      	b.n	80077be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800779c:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fe fc73 	bl	8006094 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077ae:	4b0c      	ldr	r3, [pc, #48]	@ (80077e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d202      	bcs.n	80077be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077b8:	4a09      	ldr	r2, [pc, #36]	@ (80077e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	6013      	str	r3, [r2, #0]
}
 80077be:	bf00      	nop
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000624 	.word	0x20000624
 80077cc:	20000520 	.word	0x20000520
 80077d0:	20000628 	.word	0x20000628
 80077d4:	2000060c 	.word	0x2000060c
 80077d8:	200005dc 	.word	0x200005dc
 80077dc:	200005d8 	.word	0x200005d8
 80077e0:	20000640 	.word	0x20000640

080077e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3b04      	subs	r3, #4
 80077f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3b04      	subs	r3, #4
 8007802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f023 0201 	bic.w	r2, r3, #1
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b04      	subs	r3, #4
 8007812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007814:	4a08      	ldr	r2, [pc, #32]	@ (8007838 <pxPortInitialiseStack+0x54>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3b14      	subs	r3, #20
 800781e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3b20      	subs	r3, #32
 800782a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800782c:	68fb      	ldr	r3, [r7, #12]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr
 8007838:	0800783d 	.word	0x0800783d

0800783c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007842:	2300      	movs	r3, #0
 8007844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007846:	4b12      	ldr	r3, [pc, #72]	@ (8007890 <prvTaskExitError+0x54>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d00b      	beq.n	8007868 <prvTaskExitError+0x2c>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <prvTaskExitError+0x28>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	60bb      	str	r3, [r7, #8]
}
 800787a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800787c:	bf00      	nop
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0fc      	beq.n	800787e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr
 8007890:	2000001c 	.word	0x2000001c
	...

080078a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078a0:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <pxCurrentTCBConst2>)
 80078a2:	6819      	ldr	r1, [r3, #0]
 80078a4:	6808      	ldr	r0, [r1, #0]
 80078a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078aa:	f380 8809 	msr	PSP, r0
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80078be:	4770      	bx	lr

080078c0 <pxCurrentTCBConst2>:
 80078c0:	20000520 	.word	0x20000520
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop

080078c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80078c8:	4806      	ldr	r0, [pc, #24]	@ (80078e4 <prvPortStartFirstTask+0x1c>)
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f380 8808 	msr	MSP, r0
 80078d2:	b662      	cpsie	i
 80078d4:	b661      	cpsie	f
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	df00      	svc	0
 80078e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078e2:	bf00      	nop
 80078e4:	e000ed08 	.word	0xe000ed08

080078e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078ee:	4b32      	ldr	r3, [pc, #200]	@ (80079b8 <xPortStartScheduler+0xd0>)
 80078f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	22ff      	movs	r2, #255	@ 0xff
 80078fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007910:	b2da      	uxtb	r2, r3
 8007912:	4b2a      	ldr	r3, [pc, #168]	@ (80079bc <xPortStartScheduler+0xd4>)
 8007914:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007916:	4b2a      	ldr	r3, [pc, #168]	@ (80079c0 <xPortStartScheduler+0xd8>)
 8007918:	2207      	movs	r2, #7
 800791a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800791c:	e009      	b.n	8007932 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800791e:	4b28      	ldr	r3, [pc, #160]	@ (80079c0 <xPortStartScheduler+0xd8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3b01      	subs	r3, #1
 8007924:	4a26      	ldr	r2, [pc, #152]	@ (80079c0 <xPortStartScheduler+0xd8>)
 8007926:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	b2db      	uxtb	r3, r3
 8007930:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800793a:	2b80      	cmp	r3, #128	@ 0x80
 800793c:	d0ef      	beq.n	800791e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800793e:	4b20      	ldr	r3, [pc, #128]	@ (80079c0 <xPortStartScheduler+0xd8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f1c3 0307 	rsb	r3, r3, #7
 8007946:	2b04      	cmp	r3, #4
 8007948:	d00b      	beq.n	8007962 <xPortStartScheduler+0x7a>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60bb      	str	r3, [r7, #8]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007962:	4b17      	ldr	r3, [pc, #92]	@ (80079c0 <xPortStartScheduler+0xd8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	4a15      	ldr	r2, [pc, #84]	@ (80079c0 <xPortStartScheduler+0xd8>)
 800796a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800796c:	4b14      	ldr	r3, [pc, #80]	@ (80079c0 <xPortStartScheduler+0xd8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007974:	4a12      	ldr	r2, [pc, #72]	@ (80079c0 <xPortStartScheduler+0xd8>)
 8007976:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007980:	4b10      	ldr	r3, [pc, #64]	@ (80079c4 <xPortStartScheduler+0xdc>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a0f      	ldr	r2, [pc, #60]	@ (80079c4 <xPortStartScheduler+0xdc>)
 8007986:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800798a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800798c:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <xPortStartScheduler+0xdc>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0c      	ldr	r2, [pc, #48]	@ (80079c4 <xPortStartScheduler+0xdc>)
 8007992:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007996:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007998:	f000 f8b8 	bl	8007b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800799c:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <xPortStartScheduler+0xe0>)
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079a2:	f7ff ff91 	bl	80078c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079a6:	f7ff fbbf 	bl	8007128 <vTaskSwitchContext>
	prvTaskExitError();
 80079aa:	f7ff ff47 	bl	800783c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000e400 	.word	0xe000e400
 80079bc:	2000064c 	.word	0x2000064c
 80079c0:	20000650 	.word	0x20000650
 80079c4:	e000ed20 	.word	0xe000ed20
 80079c8:	2000001c 	.word	0x2000001c

080079cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	607b      	str	r3, [r7, #4]
}
 80079e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <vPortEnterCritical+0x58>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007a24 <vPortEnterCritical+0x58>)
 80079ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a24 <vPortEnterCritical+0x58>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d110      	bne.n	8007a1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007a28 <vPortEnterCritical+0x5c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <vPortEnterCritical+0x4e>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	603b      	str	r3, [r7, #0]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <vPortEnterCritical+0x4a>
	}
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr
 8007a24:	2000001c 	.word	0x2000001c
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a32:	4b12      	ldr	r3, [pc, #72]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <vPortExitCritical+0x26>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	607b      	str	r3, [r7, #4]
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a52:	4b0a      	ldr	r3, [pc, #40]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4a08      	ldr	r2, [pc, #32]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a5c:	4b07      	ldr	r3, [pc, #28]	@ (8007a7c <vPortExitCritical+0x50>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d105      	bne.n	8007a70 <vPortExitCritical+0x44>
 8007a64:	2300      	movs	r3, #0
 8007a66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	2000001c 	.word	0x2000001c

08007a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a80:	f3ef 8009 	mrs	r0, PSP
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac0 <pxCurrentTCBConst>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a90:	6010      	str	r0, [r2, #0]
 8007a92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007a96:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a9a:	f380 8811 	msr	BASEPRI, r0
 8007a9e:	f7ff fb43 	bl	8007128 <vTaskSwitchContext>
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8811 	msr	BASEPRI, r0
 8007aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ab6:	f380 8809 	msr	PSP, r0
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	4770      	bx	lr

08007ac0 <pxCurrentTCBConst>:
 8007ac0:	20000520 	.word	0x20000520
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop

08007ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
}
 8007ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ae2:	f7ff fa63 	bl	8006fac <xTaskIncrementTick>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <xPortSysTickHandler+0x40>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	f383 8811 	msr	BASEPRI, r3
}
 8007afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b10:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <vPortSetupTimerInterrupt+0x30>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b16:	4b0a      	ldr	r3, [pc, #40]	@ (8007b40 <vPortSetupTimerInterrupt+0x34>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b1c:	4b09      	ldr	r3, [pc, #36]	@ (8007b44 <vPortSetupTimerInterrupt+0x38>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a09      	ldr	r2, [pc, #36]	@ (8007b48 <vPortSetupTimerInterrupt+0x3c>)
 8007b22:	fba2 2303 	umull	r2, r3, r2, r3
 8007b26:	099b      	lsrs	r3, r3, #6
 8007b28:	4a08      	ldr	r2, [pc, #32]	@ (8007b4c <vPortSetupTimerInterrupt+0x40>)
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b2e:	4b03      	ldr	r3, [pc, #12]	@ (8007b3c <vPortSetupTimerInterrupt+0x30>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr
 8007b3c:	e000e010 	.word	0xe000e010
 8007b40:	e000e018 	.word	0xe000e018
 8007b44:	20000010 	.word	0x20000010
 8007b48:	10624dd3 	.word	0x10624dd3
 8007b4c:	e000e014 	.word	0xe000e014

08007b50 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8007b58:	f7ff f97c 	bl	8006e54 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f83f 	bl	8008be0 <malloc>
 8007b62:	4603      	mov	r3, r0
 8007b64:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b66:	f7ff f983 	bl	8006e70 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	if( pv )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8007b82:	f7ff f967 	bl	8006e54 <vTaskSuspendAll>
		{
			free( pv );
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 f832 	bl	8008bf0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8007b8c:	f7ff f970 	bl	8006e70 <xTaskResumeAll>
	}
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8007b9c:	bf00      	nop
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr

08007ba4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af04      	add	r7, sp, #16
 8007baa:	4603      	mov	r3, r0
 8007bac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	9302      	str	r3, [sp, #8]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	1dfb      	adds	r3, r7, #7
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2178      	movs	r1, #120	@ 0x78
 8007bc2:	4803      	ldr	r0, [pc, #12]	@ (8007bd0 <ssd1306_WriteCommand+0x2c>)
 8007bc4:	f7fb ffa6 	bl	8003b14 <HAL_I2C_Mem_Write>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	200003b4 	.word	0x200003b4

08007bd4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	9202      	str	r2, [sp, #8]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	2240      	movs	r2, #64	@ 0x40
 8007bf2:	2178      	movs	r1, #120	@ 0x78
 8007bf4:	4803      	ldr	r0, [pc, #12]	@ (8007c04 <ssd1306_WriteData+0x30>)
 8007bf6:	f7fb ff8d 	bl	8003b14 <HAL_I2C_Mem_Write>
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	200003b4 	.word	0x200003b4

08007c08 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8007c0c:	f7ff ffc4 	bl	8007b98 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8007c10:	2064      	movs	r0, #100	@ 0x64
 8007c12:	f7fa fccf 	bl	80025b4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8007c16:	2000      	movs	r0, #0
 8007c18:	f000 f9cc 	bl	8007fb4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8007c1c:	2020      	movs	r0, #32
 8007c1e:	f7ff ffc1 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8007c22:	2000      	movs	r0, #0
 8007c24:	f7ff ffbe 	bl	8007ba4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007c28:	20b0      	movs	r0, #176	@ 0xb0
 8007c2a:	f7ff ffbb 	bl	8007ba4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8007c2e:	20c8      	movs	r0, #200	@ 0xc8
 8007c30:	f7ff ffb8 	bl	8007ba4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8007c34:	2000      	movs	r0, #0
 8007c36:	f7ff ffb5 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8007c3a:	2010      	movs	r0, #16
 8007c3c:	f7ff ffb2 	bl	8007ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8007c40:	2040      	movs	r0, #64	@ 0x40
 8007c42:	f7ff ffaf 	bl	8007ba4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8007c46:	20ff      	movs	r0, #255	@ 0xff
 8007c48:	f000 f9a0 	bl	8007f8c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8007c4c:	20a1      	movs	r0, #161	@ 0xa1
 8007c4e:	f7ff ffa9 	bl	8007ba4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8007c52:	20a6      	movs	r0, #166	@ 0xa6
 8007c54:	f7ff ffa6 	bl	8007ba4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8007c58:	20a8      	movs	r0, #168	@ 0xa8
 8007c5a:	f7ff ffa3 	bl	8007ba4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8007c5e:	203f      	movs	r0, #63	@ 0x3f
 8007c60:	f7ff ffa0 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007c64:	20a4      	movs	r0, #164	@ 0xa4
 8007c66:	f7ff ff9d 	bl	8007ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8007c6a:	20d3      	movs	r0, #211	@ 0xd3
 8007c6c:	f7ff ff9a 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8007c70:	2000      	movs	r0, #0
 8007c72:	f7ff ff97 	bl	8007ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8007c76:	20d5      	movs	r0, #213	@ 0xd5
 8007c78:	f7ff ff94 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8007c7c:	20f0      	movs	r0, #240	@ 0xf0
 8007c7e:	f7ff ff91 	bl	8007ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007c82:	20d9      	movs	r0, #217	@ 0xd9
 8007c84:	f7ff ff8e 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007c88:	2022      	movs	r0, #34	@ 0x22
 8007c8a:	f7ff ff8b 	bl	8007ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8007c8e:	20da      	movs	r0, #218	@ 0xda
 8007c90:	f7ff ff88 	bl	8007ba4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8007c94:	2012      	movs	r0, #18
 8007c96:	f7ff ff85 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8007c9a:	20db      	movs	r0, #219	@ 0xdb
 8007c9c:	f7ff ff82 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007ca0:	2020      	movs	r0, #32
 8007ca2:	f7ff ff7f 	bl	8007ba4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8007ca6:	208d      	movs	r0, #141	@ 0x8d
 8007ca8:	f7ff ff7c 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8007cac:	2014      	movs	r0, #20
 8007cae:	f7ff ff79 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	f000 f97e 	bl	8007fb4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f000 f80f 	bl	8007cdc <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8007cbe:	f000 f825 	bl	8007d0c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8007cc2:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <ssd1306_Init+0xd0>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8007cc8:	4b03      	ldr	r3, [pc, #12]	@ (8007cd8 <ssd1306_Init+0xd0>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8007cce:	4b02      	ldr	r3, [pc, #8]	@ (8007cd8 <ssd1306_Init+0xd0>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	711a      	strb	r2, [r3, #4]
}
 8007cd4:	bf00      	nop
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20000a54 	.word	0x20000a54

08007cdc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <ssd1306_Fill+0x14>
 8007cec:	2300      	movs	r3, #0
 8007cee:	e000      	b.n	8007cf2 <ssd1306_Fill+0x16>
 8007cf0:	23ff      	movs	r3, #255	@ 0xff
 8007cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4803      	ldr	r0, [pc, #12]	@ (8007d08 <ssd1306_Fill+0x2c>)
 8007cfa:	f001 f958 	bl	8008fae <memset>
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000654 	.word	0x20000654

08007d0c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007d12:	2300      	movs	r3, #0
 8007d14:	71fb      	strb	r3, [r7, #7]
 8007d16:	e016      	b.n	8007d46 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	3b50      	subs	r3, #80	@ 0x50
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff ff40 	bl	8007ba4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8007d24:	2000      	movs	r0, #0
 8007d26:	f7ff ff3d 	bl	8007ba4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8007d2a:	2010      	movs	r0, #16
 8007d2c:	f7ff ff3a 	bl	8007ba4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	01db      	lsls	r3, r3, #7
 8007d34:	4a08      	ldr	r2, [pc, #32]	@ (8007d58 <ssd1306_UpdateScreen+0x4c>)
 8007d36:	4413      	add	r3, r2
 8007d38:	2180      	movs	r1, #128	@ 0x80
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff ff4a 	bl	8007bd4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	3301      	adds	r3, #1
 8007d44:	71fb      	strb	r3, [r7, #7]
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	2b07      	cmp	r3, #7
 8007d4a:	d9e5      	bls.n	8007d18 <ssd1306_UpdateScreen+0xc>
    }
}
 8007d4c:	bf00      	nop
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000654 	.word	0x20000654

08007d5c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
 8007d66:	460b      	mov	r3, r1
 8007d68:	71bb      	strb	r3, [r7, #6]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8007d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db3d      	blt.n	8007df2 <ssd1306_DrawPixel+0x96>
 8007d76:	79bb      	ldrb	r3, [r7, #6]
 8007d78:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d7a:	d83a      	bhi.n	8007df2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8007d7c:	797b      	ldrb	r3, [r7, #5]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d11a      	bne.n	8007db8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007d82:	79fa      	ldrb	r2, [r7, #7]
 8007d84:	79bb      	ldrb	r3, [r7, #6]
 8007d86:	08db      	lsrs	r3, r3, #3
 8007d88:	b2d8      	uxtb	r0, r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	01db      	lsls	r3, r3, #7
 8007d8e:	4413      	add	r3, r2
 8007d90:	4a1a      	ldr	r2, [pc, #104]	@ (8007dfc <ssd1306_DrawPixel+0xa0>)
 8007d92:	5cd3      	ldrb	r3, [r2, r3]
 8007d94:	b25a      	sxtb	r2, r3
 8007d96:	79bb      	ldrb	r3, [r7, #6]
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007da2:	b25b      	sxtb	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b259      	sxtb	r1, r3
 8007da8:	79fa      	ldrb	r2, [r7, #7]
 8007daa:	4603      	mov	r3, r0
 8007dac:	01db      	lsls	r3, r3, #7
 8007dae:	4413      	add	r3, r2
 8007db0:	b2c9      	uxtb	r1, r1
 8007db2:	4a12      	ldr	r2, [pc, #72]	@ (8007dfc <ssd1306_DrawPixel+0xa0>)
 8007db4:	54d1      	strb	r1, [r2, r3]
 8007db6:	e01d      	b.n	8007df4 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007db8:	79fa      	ldrb	r2, [r7, #7]
 8007dba:	79bb      	ldrb	r3, [r7, #6]
 8007dbc:	08db      	lsrs	r3, r3, #3
 8007dbe:	b2d8      	uxtb	r0, r3
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	01db      	lsls	r3, r3, #7
 8007dc4:	4413      	add	r3, r2
 8007dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8007dfc <ssd1306_DrawPixel+0xa0>)
 8007dc8:	5cd3      	ldrb	r3, [r2, r3]
 8007dca:	b25a      	sxtb	r2, r3
 8007dcc:	79bb      	ldrb	r3, [r7, #6]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	4013      	ands	r3, r2
 8007de0:	b259      	sxtb	r1, r3
 8007de2:	79fa      	ldrb	r2, [r7, #7]
 8007de4:	4603      	mov	r3, r0
 8007de6:	01db      	lsls	r3, r3, #7
 8007de8:	4413      	add	r3, r2
 8007dea:	b2c9      	uxtb	r1, r1
 8007dec:	4a03      	ldr	r2, [pc, #12]	@ (8007dfc <ssd1306_DrawPixel+0xa0>)
 8007dee:	54d1      	strb	r1, [r2, r3]
 8007df0:	e000      	b.n	8007df4 <ssd1306_DrawPixel+0x98>
        return;
 8007df2:	bf00      	nop
    }
}
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr
 8007dfc:	20000654 	.word	0x20000654

08007e00 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8007e00:	b590      	push	{r4, r7, lr}
 8007e02:	b089      	sub	sp, #36	@ 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4604      	mov	r4, r0
 8007e08:	1d38      	adds	r0, r7, #4
 8007e0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4623      	mov	r3, r4
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	4613      	mov	r3, r2
 8007e16:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b1f      	cmp	r3, #31
 8007e1c:	d902      	bls.n	8007e24 <ssd1306_WriteChar+0x24>
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	2b7e      	cmp	r3, #126	@ 0x7e
 8007e22:	d901      	bls.n	8007e28 <ssd1306_WriteChar+0x28>
        return 0;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e06c      	b.n	8007f02 <ssd1306_WriteChar+0x102>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007e28:	4b38      	ldr	r3, [pc, #224]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	793b      	ldrb	r3, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	2b80      	cmp	r3, #128	@ 0x80
 8007e34:	dc06      	bgt.n	8007e44 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8007e36:	4b35      	ldr	r3, [pc, #212]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007e38:	885b      	ldrh	r3, [r3, #2]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	797b      	ldrb	r3, [r7, #5]
 8007e3e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007e40:	2b40      	cmp	r3, #64	@ 0x40
 8007e42:	dd01      	ble.n	8007e48 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	e05c      	b.n	8007f02 <ssd1306_WriteChar+0x102>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]
 8007e4c:	e04c      	b.n	8007ee8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	3b20      	subs	r3, #32
 8007e54:	7979      	ldrb	r1, [r7, #5]
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	440b      	add	r3, r1
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61bb      	str	r3, [r7, #24]
 8007e6c:	e034      	b.n	8007ed8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d012      	beq.n	8007ea4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007e7e:	4b23      	ldr	r3, [pc, #140]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	b2d8      	uxtb	r0, r3
 8007e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007e8e:	885b      	ldrh	r3, [r3, #2]
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	4413      	add	r3, r2
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	7bba      	ldrb	r2, [r7, #14]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7ff ff5d 	bl	8007d5c <ssd1306_DrawPixel>
 8007ea2:	e016      	b.n	8007ed2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007ea4:	4b19      	ldr	r3, [pc, #100]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	4413      	add	r3, r2
 8007eb0:	b2d8      	uxtb	r0, r3
 8007eb2:	4b16      	ldr	r3, [pc, #88]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	b2d9      	uxtb	r1, r3
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	bf0c      	ite	eq
 8007ec6:	2301      	moveq	r3, #1
 8007ec8:	2300      	movne	r3, #0
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f7ff ff45 	bl	8007d5c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	793b      	ldrb	r3, [r7, #4]
 8007eda:	461a      	mov	r2, r3
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d3c5      	bcc.n	8007e6e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	797b      	ldrb	r3, [r7, #5]
 8007eea:	461a      	mov	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d3ad      	bcc.n	8007e4e <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8007ef2:	4b06      	ldr	r3, [pc, #24]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	793a      	ldrb	r2, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	4b03      	ldr	r3, [pc, #12]	@ (8007f0c <ssd1306_WriteChar+0x10c>)
 8007efe:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3724      	adds	r7, #36	@ 0x24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd90      	pop	{r4, r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000a54 	.word	0x20000a54

08007f10 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	1d38      	adds	r0, r7, #4
 8007f1a:	e880 0006 	stmia.w	r0, {r1, r2}
 8007f1e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8007f20:	e012      	b.n	8007f48 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	7818      	ldrb	r0, [r3, #0]
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	1d3a      	adds	r2, r7, #4
 8007f2a:	ca06      	ldmia	r2, {r1, r2}
 8007f2c:	f7ff ff68 	bl	8007e00 <ssd1306_WriteChar>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d002      	beq.n	8007f42 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	e008      	b.n	8007f54 <ssd1306_WriteString+0x44>
        }
        str++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e8      	bne.n	8007f22 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	781b      	ldrb	r3, [r3, #0]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	460a      	mov	r2, r1
 8007f66:	71fb      	strb	r3, [r7, #7]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	4b05      	ldr	r3, [pc, #20]	@ (8007f88 <ssd1306_SetCursor+0x2c>)
 8007f72:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007f74:	79bb      	ldrb	r3, [r7, #6]
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	4b03      	ldr	r3, [pc, #12]	@ (8007f88 <ssd1306_SetCursor+0x2c>)
 8007f7a:	805a      	strh	r2, [r3, #2]
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bc80      	pop	{r7}
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	20000a54 	.word	0x20000a54

08007f8c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8007f96:	2381      	movs	r3, #129	@ 0x81
 8007f98:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff fe01 	bl	8007ba4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff fdfd 	bl	8007ba4 <ssd1306_WriteCommand>
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8007fc4:	23af      	movs	r3, #175	@ 0xaf
 8007fc6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8007fc8:	4b08      	ldr	r3, [pc, #32]	@ (8007fec <ssd1306_SetDisplayOn+0x38>)
 8007fca:	2201      	movs	r2, #1
 8007fcc:	715a      	strb	r2, [r3, #5]
 8007fce:	e004      	b.n	8007fda <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8007fd0:	23ae      	movs	r3, #174	@ 0xae
 8007fd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <ssd1306_SetDisplayOn+0x38>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fde1 	bl	8007ba4 <ssd1306_WriteCommand>
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000a54 	.word	0x20000a54

08007ff0 <msg2SSD1306>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}
void msg2SSD1306(char* msg, uint8_t x, uint8_t y){
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	70bb      	strb	r3, [r7, #2]
	ssd1306_SetCursor(x*7, y*10);
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	461a      	mov	r2, r3
 8008004:	00d2      	lsls	r2, r2, #3
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	b2da      	uxtb	r2, r3
 800800a:	78bb      	ldrb	r3, [r7, #2]
 800800c:	4619      	mov	r1, r3
 800800e:	0089      	lsls	r1, r1, #2
 8008010:	440b      	add	r3, r1
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f7ff ff9f 	bl	8007f5c <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 800801e:	4a05      	ldr	r2, [pc, #20]	@ (8008034 <msg2SSD1306+0x44>)
 8008020:	2301      	movs	r3, #1
 8008022:	ca06      	ldmia	r2, {r1, r2}
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff ff73 	bl	8007f10 <ssd1306_WriteString>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000020 	.word	0x20000020

08008038 <display_Bat_InitInfo>:
void display_Bat_InitInfo (void){
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800803c:	2000      	movs	r0, #0
 800803e:	f7ff fe4d 	bl	8007cdc <ssd1306_Fill>

	  msg2SSD1306("Batt Level:", 0, 0);
 8008042:	2200      	movs	r2, #0
 8008044:	2100      	movs	r1, #0
 8008046:	480b      	ldr	r0, [pc, #44]	@ (8008074 <display_Bat_InitInfo+0x3c>)
 8008048:	f7ff ffd2 	bl	8007ff0 <msg2SSD1306>

	  msg2SSD1306("Voltage:", 0, 1);
 800804c:	2201      	movs	r2, #1
 800804e:	2100      	movs	r1, #0
 8008050:	4809      	ldr	r0, [pc, #36]	@ (8008078 <display_Bat_InitInfo+0x40>)
 8008052:	f7ff ffcd 	bl	8007ff0 <msg2SSD1306>

	  msg2SSD1306("Current:", 0, 2);
 8008056:	2202      	movs	r2, #2
 8008058:	2100      	movs	r1, #0
 800805a:	4808      	ldr	r0, [pc, #32]	@ (800807c <display_Bat_InitInfo+0x44>)
 800805c:	f7ff ffc8 	bl	8007ff0 <msg2SSD1306>

	  msg2SSD1306("Temperature:", 0, 3);
 8008060:	2203      	movs	r2, #3
 8008062:	2100      	movs	r1, #0
 8008064:	4806      	ldr	r0, [pc, #24]	@ (8008080 <display_Bat_InitInfo+0x48>)
 8008066:	f7ff ffc3 	bl	8007ff0 <msg2SSD1306>
	  ssd1306_UpdateScreen();
 800806a:	f7ff fe4f 	bl	8007d0c <ssd1306_UpdateScreen>
}
 800806e:	bf00      	nop
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	0800b864 	.word	0x0800b864
 8008078:	0800b870 	.word	0x0800b870
 800807c:	0800b87c 	.word	0x0800b87c
 8008080:	0800b888 	.word	0x0800b888

08008084 <display_Bat_Info>:
void display_Bat_Info(char percent[], char vol[], char curr[], char tempt[]){
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
 8008090:	603b      	str	r3, [r7, #0]

	  msg2SSD1306("      ", 11, 0);
 8008092:	2200      	movs	r2, #0
 8008094:	210b      	movs	r1, #11
 8008096:	4820      	ldr	r0, [pc, #128]	@ (8008118 <display_Bat_Info+0x94>)
 8008098:	f7ff ffaa 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306(percent, 11, 0);
 800809c:	2200      	movs	r2, #0
 800809e:	210b      	movs	r1, #11
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ffa5 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306("%", 17, 0);
 80080a6:	2200      	movs	r2, #0
 80080a8:	2111      	movs	r1, #17
 80080aa:	481c      	ldr	r0, [pc, #112]	@ (800811c <display_Bat_Info+0x98>)
 80080ac:	f7ff ffa0 	bl	8007ff0 <msg2SSD1306>

	  msg2SSD1306("      ", 8, 1);
 80080b0:	2201      	movs	r2, #1
 80080b2:	2108      	movs	r1, #8
 80080b4:	4818      	ldr	r0, [pc, #96]	@ (8008118 <display_Bat_Info+0x94>)
 80080b6:	f7ff ff9b 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306(vol, 8, 1);
 80080ba:	2201      	movs	r2, #1
 80080bc:	2108      	movs	r1, #8
 80080be:	68b8      	ldr	r0, [r7, #8]
 80080c0:	f7ff ff96 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306("V", 17, 1);
 80080c4:	2201      	movs	r2, #1
 80080c6:	2111      	movs	r1, #17
 80080c8:	4815      	ldr	r0, [pc, #84]	@ (8008120 <display_Bat_Info+0x9c>)
 80080ca:	f7ff ff91 	bl	8007ff0 <msg2SSD1306>

	  msg2SSD1306("        ", 8, 2);
 80080ce:	2202      	movs	r2, #2
 80080d0:	2108      	movs	r1, #8
 80080d2:	4814      	ldr	r0, [pc, #80]	@ (8008124 <display_Bat_Info+0xa0>)
 80080d4:	f7ff ff8c 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306(curr, 8, 2);
 80080d8:	2202      	movs	r2, #2
 80080da:	2108      	movs	r1, #8
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ff87 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306("A", 17, 2);
 80080e2:	2202      	movs	r2, #2
 80080e4:	2111      	movs	r1, #17
 80080e6:	4810      	ldr	r0, [pc, #64]	@ (8008128 <display_Bat_Info+0xa4>)
 80080e8:	f7ff ff82 	bl	8007ff0 <msg2SSD1306>

	  msg2SSD1306("    ", 12, 3);
 80080ec:	2203      	movs	r2, #3
 80080ee:	210c      	movs	r1, #12
 80080f0:	480e      	ldr	r0, [pc, #56]	@ (800812c <display_Bat_Info+0xa8>)
 80080f2:	f7ff ff7d 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306(tempt, 12, 3);
 80080f6:	2203      	movs	r2, #3
 80080f8:	210c      	movs	r1, #12
 80080fa:	6838      	ldr	r0, [r7, #0]
 80080fc:	f7ff ff78 	bl	8007ff0 <msg2SSD1306>
	  msg2SSD1306("*C", 16, 3);
 8008100:	2203      	movs	r2, #3
 8008102:	2110      	movs	r1, #16
 8008104:	480a      	ldr	r0, [pc, #40]	@ (8008130 <display_Bat_Info+0xac>)
 8008106:	f7ff ff73 	bl	8007ff0 <msg2SSD1306>

	  ssd1306_UpdateScreen();
 800810a:	f7ff fdff 	bl	8007d0c <ssd1306_UpdateScreen>

}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	0800b898 	.word	0x0800b898
 800811c:	0800b8a0 	.word	0x0800b8a0
 8008120:	0800b8a4 	.word	0x0800b8a4
 8008124:	0800b8a8 	.word	0x0800b8a8
 8008128:	0800b8b4 	.word	0x0800b8b4
 800812c:	0800b8b8 	.word	0x0800b8b8
 8008130:	0800b8c0 	.word	0x0800b8c0

08008134 <initBff>:

void initBff(char* bff, int len){
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++){
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e008      	b.n	8008156 <initBff+0x22>
		*bff = '\0';
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
		bff++;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3301      	adds	r3, #1
 800814e:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < len; i++){
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	dbf2      	blt.n	8008144 <initBff+0x10>
	}
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr
	...

0800816c <__NVIC_EnableIRQ>:
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800817a:	2b00      	cmp	r3, #0
 800817c:	db0b      	blt.n	8008196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	f003 021f 	and.w	r2, r3, #31
 8008184:	4906      	ldr	r1, [pc, #24]	@ (80081a0 <__NVIC_EnableIRQ+0x34>)
 8008186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	2001      	movs	r0, #1
 800818e:	fa00 f202 	lsl.w	r2, r0, r2
 8008192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr
 80081a0:	e000e100 	.word	0xe000e100

080081a4 <__NVIC_GetEnableIRQ>:
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	db0d      	blt.n	80081d2 <__NVIC_GetEnableIRQ+0x2e>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80081b6:	4a0a      	ldr	r2, [pc, #40]	@ (80081e0 <__NVIC_GetEnableIRQ+0x3c>)
 80081b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	e000      	b.n	80081d4 <__NVIC_GetEnableIRQ+0x30>
    return(0U);
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	e000e100 	.word	0xe000e100

080081e4 <__NVIC_DisableIRQ>:
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	db12      	blt.n	800821c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	f003 021f 	and.w	r2, r3, #31
 80081fc:	490a      	ldr	r1, [pc, #40]	@ (8008228 <__NVIC_DisableIRQ+0x44>)
 80081fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2001      	movs	r0, #1
 8008206:	fa00 f202 	lsl.w	r2, r0, r2
 800820a:	3320      	adds	r3, #32
 800820c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008210:	f3bf 8f4f 	dsb	sy
}
 8008214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008216:	f3bf 8f6f 	isb	sy
}
 800821a:	bf00      	nop
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	e000e100 	.word	0xe000e100

0800822c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b20      	cmp	r3, #32
 800823e:	bf0c      	ite	eq
 8008240:	2301      	moveq	r3, #1
 8008242:	2300      	movne	r3, #0
 8008244:	b2db      	uxtb	r3, r3
}
 8008246:	4618      	mov	r0, r3
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr

08008250 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008260:	2b40      	cmp	r3, #64	@ 0x40
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800828e:	b480      	push	{r7}
 8008290:	b089      	sub	sp, #36	@ 0x24
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	330c      	adds	r3, #12
 800829a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f043 0320 	orr.w	r3, r3, #32
 80082aa:	61fb      	str	r3, [r7, #28]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	330c      	adds	r3, #12
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	61ba      	str	r2, [r7, #24]
 80082b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6979      	ldr	r1, [r7, #20]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	613b      	str	r3, [r7, #16]
   return(result);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e7      	bne.n	8008296 <LL_USART_EnableIT_RXNE+0x8>
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	3724      	adds	r7, #36	@ 0x24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bc80      	pop	{r7}
 80082d0:	4770      	bx	lr

080082d2 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b089      	sub	sp, #36	@ 0x24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	330c      	adds	r3, #12
 80082de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	e853 3f00 	ldrex	r3, [r3]
 80082e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	330c      	adds	r3, #12
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	61ba      	str	r2, [r7, #24]
 80082f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6979      	ldr	r1, [r7, #20]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	613b      	str	r3, [r7, #16]
   return(result);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e7      	bne.n	80082da <LL_USART_EnableIT_TC+0x8>
}
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	3724      	adds	r7, #36	@ 0x24
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8008316:	b480      	push	{r7}
 8008318:	b089      	sub	sp, #36	@ 0x24
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	330c      	adds	r3, #12
 8008322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	60bb      	str	r3, [r7, #8]
   return(result);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008332:	61fb      	str	r3, [r7, #28]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	330c      	adds	r3, #12
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	61ba      	str	r2, [r7, #24]
 800833c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6979      	ldr	r1, [r7, #20]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	613b      	str	r3, [r7, #16]
   return(result);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e7      	bne.n	800831e <LL_USART_DisableIT_TC+0x8>
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	3724      	adds	r7, #36	@ 0x24
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr

0800835a <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b2db      	uxtb	r3, r3
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr

08008372 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	605a      	str	r2, [r3, #4]
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr

0800838e <IsBufferFull>:
//*****************************************************************************

static bool
IsBufferFull(volatile uint32_t *pui32Read,
             volatile uint32_t *pui32Write, uint32_t ui32Size)
{
 800838e:	b480      	push	{r7}
 8008390:	b087      	sub	sp, #28
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	617b      	str	r3, [r7, #20]
    ui32Read = *pui32Read;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	613b      	str	r3, [r7, #16]

    return((((ui32Write + 1) % ui32Size) == ui32Read) ? true : false);
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3301      	adds	r3, #1
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	fb01 f202 	mul.w	r2, r1, r2
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <IsBufferEmpty>:
//*****************************************************************************

static bool
IsBufferEmpty(volatile uint32_t *pui32Read,
              volatile uint32_t *pui32Write)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b085      	sub	sp, #20
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
    uint32_t ui32Write;
    uint32_t ui32Read;

    ui32Write = *pui32Write;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60fb      	str	r3, [r7, #12]
    ui32Read = *pui32Read;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60bb      	str	r3, [r7, #8]

    return((ui32Write == ui32Read) ? true : false);
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	bf0c      	ite	eq
 80083ec:	2301      	moveq	r3, #1
 80083ee:	2300      	movne	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <UARTPrimeTransmit>:
//
//*****************************************************************************

static void
UARTPrimeTransmit()
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0

    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY)
 8008400:	4914      	ldr	r1, [pc, #80]	@ (8008454 <UARTPrimeTransmit+0x58>)
 8008402:	4815      	ldr	r0, [pc, #84]	@ (8008458 <UARTPrimeTransmit+0x5c>)
 8008404:	f7ff ffe3 	bl	80083ce <IsBufferEmpty>
 8008408:	4603      	mov	r3, r0
 800840a:	f083 0301 	eor.w	r3, r3, #1
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01c      	beq.n	800844e <UARTPrimeTransmit+0x52>
    {
        //
        // Disable the UART interrupt.  If we don't do this there is a race
        // condition which can cause the read index to be corrupted.
        //
    	NVIC_DisableIRQ(uartstdio_device.uart_irqn);
 8008414:	4b11      	ldr	r3, [pc, #68]	@ (800845c <UARTPrimeTransmit+0x60>)
 8008416:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fee2 	bl	80081e4 <__NVIC_DisableIRQ>
        // Yes - take some characters out of the transmit buffer and feed
        // them to the UART transmit FIFO.
        //


            LL_USART_TransmitData8(uartstdio_device.uart,
 8008420:	4b0e      	ldr	r3, [pc, #56]	@ (800845c <UARTPrimeTransmit+0x60>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <UARTPrimeTransmit+0x5c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	490d      	ldr	r1, [pc, #52]	@ (8008460 <UARTPrimeTransmit+0x64>)
 800842a:	5ccb      	ldrb	r3, [r1, r3]
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f7ff ff9f 	bl	8008372 <LL_USART_TransmitData8>
                                      g_pcUARTTxBuffer[g_ui32UARTTxReadIndex]);
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxReadIndex);
 8008434:	4b08      	ldr	r3, [pc, #32]	@ (8008458 <UARTPrimeTransmit+0x5c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800843e:	4a06      	ldr	r2, [pc, #24]	@ (8008458 <UARTPrimeTransmit+0x5c>)
 8008440:	6013      	str	r3, [r2, #0]


        //
        // Reenable the UART interrupt.
        //
            NVIC_EnableIRQ(uartstdio_device.uart_irqn);
 8008442:	4b06      	ldr	r3, [pc, #24]	@ (800845c <UARTPrimeTransmit+0x60>)
 8008444:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fe8f 	bl	800816c <__NVIC_EnableIRQ>
    }
}
 800844e:	bf00      	nop
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000e64 	.word	0x20000e64
 8008458:	20000e68 	.word	0x20000e68
 800845c:	20000a5c 	.word	0x20000a5c
 8008460:	20000a64 	.word	0x20000a64

08008464 <UARTStdioConfig>:
//!
//! \return None.
//
//*****************************************************************************
void UARTStdioConfig(USART_TypeDef * uart, IRQn_Type uart_irqn, bool enable_echo)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	70fb      	strb	r3, [r7, #3]
 8008470:	4613      	mov	r3, r2
 8008472:	70bb      	strb	r3, [r7, #2]

    //
    // Flush both the buffers.
    //
    UARTFlushRx();
 8008474:	f000 fa94 	bl	80089a0 <UARTFlushRx>
    UARTFlushTx(true);
 8008478:	2001      	movs	r0, #1
 800847a:	f000 fabd 	bl	80089f8 <UARTFlushTx>

    //
    // Remember which interrupt we are dealing with.
    //
    uartstdio_device.uart = uart;
 800847e:	4a0d      	ldr	r2, [pc, #52]	@ (80084b4 <UARTStdioConfig+0x50>)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6013      	str	r3, [r2, #0]
    uartstdio_device.uart_irqn = uart_irqn;
 8008484:	4a0b      	ldr	r2, [pc, #44]	@ (80084b4 <UARTStdioConfig+0x50>)
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	7113      	strb	r3, [r2, #4]
    uartstdio_device.g_bDisableEcho = !enable_echo;
 800848a:	78bb      	ldrb	r3, [r7, #2]
 800848c:	2b00      	cmp	r3, #0
 800848e:	bf14      	ite	ne
 8008490:	2301      	movne	r3, #1
 8008492:	2300      	moveq	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f083 0301 	eor.w	r3, r3, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	4b04      	ldr	r3, [pc, #16]	@ (80084b4 <UARTStdioConfig+0x50>)
 80084a4:	715a      	strb	r2, [r3, #5]
    // We are configured for buffered output so enable the master interrupt
    // for this UART and the receive interrupts.  We don't actually enable the
    // transmit interrupt in the UART itself until some data has been placed
    // in the transmit buffer.
    //
    LL_USART_EnableIT_RXNE(uart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff fef1 	bl	800828e <LL_USART_EnableIT_RXNE>

}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000a5c 	.word	0x20000a5c

080084b8 <UARTwrite>:
//! \return Returns the count of characters written.
//
//*****************************************************************************
int
UARTwrite(const char *pcBuf, uint32_t ui32Len)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
    // Check for valid arguments.
    //
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	e03b      	b.n	8008540 <UARTwrite+0x88>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output.
        //
        if(pcBuf[uIdx] == '\n')
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b0a      	cmp	r3, #10
 80084d2:	d117      	bne.n	8008504 <UARTwrite+0x4c>
        {
            if(!TX_BUFFER_FULL)
 80084d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80084d8:	492a      	ldr	r1, [pc, #168]	@ (8008584 <UARTwrite+0xcc>)
 80084da:	482b      	ldr	r0, [pc, #172]	@ (8008588 <UARTwrite+0xd0>)
 80084dc:	f7ff ff57 	bl	800838e <IsBufferFull>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f083 0301 	eor.w	r3, r3, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d02e      	beq.n	800854a <UARTwrite+0x92>
            {
                g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = '\r';
 80084ec:	4b25      	ldr	r3, [pc, #148]	@ (8008584 <UARTwrite+0xcc>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a26      	ldr	r2, [pc, #152]	@ (800858c <UARTwrite+0xd4>)
 80084f2:	210d      	movs	r1, #13
 80084f4:	54d1      	strb	r1, [r2, r3]
                ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 80084f6:	4b23      	ldr	r3, [pc, #140]	@ (8008584 <UARTwrite+0xcc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008500:	4a20      	ldr	r2, [pc, #128]	@ (8008584 <UARTwrite+0xcc>)
 8008502:	6013      	str	r3, [r2, #0]
        }

        //
        // Send the character to the UART output.
        //
        if(!TX_BUFFER_FULL)
 8008504:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008508:	491e      	ldr	r1, [pc, #120]	@ (8008584 <UARTwrite+0xcc>)
 800850a:	481f      	ldr	r0, [pc, #124]	@ (8008588 <UARTwrite+0xd0>)
 800850c:	f7ff ff3f 	bl	800838e <IsBufferFull>
 8008510:	4603      	mov	r3, r0
 8008512:	f083 0301 	eor.w	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d018      	beq.n	800854e <UARTwrite+0x96>
        {
            g_pcUARTTxBuffer[g_ui32UARTTxWriteIndex] = pcBuf[uIdx];
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	441a      	add	r2, r3
 8008522:	4b18      	ldr	r3, [pc, #96]	@ (8008584 <UARTwrite+0xcc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	7811      	ldrb	r1, [r2, #0]
 8008528:	4a18      	ldr	r2, [pc, #96]	@ (800858c <UARTwrite+0xd4>)
 800852a:	54d1      	strb	r1, [r2, r3]
            ADVANCE_TX_BUFFER_INDEX(g_ui32UARTTxWriteIndex);
 800852c:	4b15      	ldr	r3, [pc, #84]	@ (8008584 <UARTwrite+0xcc>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3301      	adds	r3, #1
 8008532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008536:	4a13      	ldr	r2, [pc, #76]	@ (8008584 <UARTwrite+0xcc>)
 8008538:	6013      	str	r3, [r2, #0]
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d3bf      	bcc.n	80084c8 <UARTwrite+0x10>
 8008548:	e002      	b.n	8008550 <UARTwrite+0x98>
                break;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <UARTwrite+0x98>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            break;
 800854e:	bf00      	nop

    //
    // If we have anything in the buffer, make sure that the UART is set
    // up to transmit it.
    //
    if(!TX_BUFFER_EMPTY)
 8008550:	490c      	ldr	r1, [pc, #48]	@ (8008584 <UARTwrite+0xcc>)
 8008552:	480d      	ldr	r0, [pc, #52]	@ (8008588 <UARTwrite+0xd0>)
 8008554:	f7ff ff3b 	bl	80083ce <IsBufferEmpty>
 8008558:	4603      	mov	r3, r0
 800855a:	f083 0301 	eor.w	r3, r3, #1
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d009      	beq.n	8008578 <UARTwrite+0xc0>
    {
        UARTPrimeTransmit(uartstdio_device.uart);
 8008564:	4b0a      	ldr	r3, [pc, #40]	@ (8008590 <UARTwrite+0xd8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff ff47 	bl	80083fc <UARTPrimeTransmit>
        LL_USART_EnableIT_TC(uartstdio_device.uart);
 800856e:	4b08      	ldr	r3, [pc, #32]	@ (8008590 <UARTwrite+0xd8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fead 	bl	80082d2 <LL_USART_EnableIT_TC>
    }

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8008578:	68fb      	ldr	r3, [r7, #12]

}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000e64 	.word	0x20000e64
 8008588:	20000e68 	.word	0x20000e68
 800858c:	20000a64 	.word	0x20000a64
 8008590:	20000a5c 	.word	0x20000a5c

08008594 <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08e      	sub	sp, #56	@ 0x38
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]


    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
 800859e:	e1dd      	b.n	800895c <UARTvprintf+0x3c8>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a4:	e002      	b.n	80085ac <UARTvprintf+0x18>
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
            ui32Idx++)
 80085a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a8:	3301      	adds	r3, #1
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	4413      	add	r3, r2
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b25      	cmp	r3, #37	@ 0x25
 80085b6:	d005      	beq.n	80085c4 <UARTvprintf+0x30>
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085bc:	4413      	add	r3, r2
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1f0      	bne.n	80085a6 <UARTvprintf+0x12>
        }

        //
        // Write this portion of the string.
        //
        UARTwrite(pcString, ui32Idx);
 80085c4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff ff76 	bl	80084b8 <UARTwrite>

        //
        // Skip the portion of the string that was written.
        //
        pcString += ui32Idx;
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d0:	4413      	add	r3, r2
 80085d2:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b25      	cmp	r3, #37	@ 0x25
 80085da:	f040 81bf 	bne.w	800895c <UARTvprintf+0x3c8>
        {
            //
            // Skip the %.
            //
            pcString++;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3301      	adds	r3, #1
 80085e2:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            cFill = ' ';
 80085e8:	2320      	movs	r3, #32
 80085ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	3b25      	subs	r3, #37	@ 0x25
 80085f8:	2b53      	cmp	r3, #83	@ 0x53
 80085fa:	f200 81a9 	bhi.w	8008950 <UARTvprintf+0x3bc>
 80085fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008604 <UARTvprintf+0x70>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008943 	.word	0x08008943
 8008608:	08008951 	.word	0x08008951
 800860c:	08008951 	.word	0x08008951
 8008610:	08008951 	.word	0x08008951
 8008614:	08008951 	.word	0x08008951
 8008618:	08008951 	.word	0x08008951
 800861c:	08008951 	.word	0x08008951
 8008620:	08008951 	.word	0x08008951
 8008624:	08008951 	.word	0x08008951
 8008628:	08008951 	.word	0x08008951
 800862c:	08008951 	.word	0x08008951
 8008630:	08008755 	.word	0x08008755
 8008634:	08008755 	.word	0x08008755
 8008638:	08008755 	.word	0x08008755
 800863c:	08008755 	.word	0x08008755
 8008640:	08008755 	.word	0x08008755
 8008644:	08008755 	.word	0x08008755
 8008648:	08008755 	.word	0x08008755
 800864c:	08008755 	.word	0x08008755
 8008650:	08008755 	.word	0x08008755
 8008654:	08008755 	.word	0x08008755
 8008658:	08008951 	.word	0x08008951
 800865c:	08008951 	.word	0x08008951
 8008660:	08008951 	.word	0x08008951
 8008664:	08008951 	.word	0x08008951
 8008668:	08008951 	.word	0x08008951
 800866c:	08008951 	.word	0x08008951
 8008670:	08008951 	.word	0x08008951
 8008674:	08008951 	.word	0x08008951
 8008678:	08008951 	.word	0x08008951
 800867c:	08008951 	.word	0x08008951
 8008680:	08008951 	.word	0x08008951
 8008684:	08008951 	.word	0x08008951
 8008688:	08008951 	.word	0x08008951
 800868c:	08008951 	.word	0x08008951
 8008690:	08008951 	.word	0x08008951
 8008694:	08008951 	.word	0x08008951
 8008698:	08008951 	.word	0x08008951
 800869c:	08008951 	.word	0x08008951
 80086a0:	08008951 	.word	0x08008951
 80086a4:	08008951 	.word	0x08008951
 80086a8:	08008951 	.word	0x08008951
 80086ac:	08008951 	.word	0x08008951
 80086b0:	08008951 	.word	0x08008951
 80086b4:	08008951 	.word	0x08008951
 80086b8:	08008951 	.word	0x08008951
 80086bc:	08008951 	.word	0x08008951
 80086c0:	08008951 	.word	0x08008951
 80086c4:	08008951 	.word	0x08008951
 80086c8:	08008951 	.word	0x08008951
 80086cc:	08008951 	.word	0x08008951
 80086d0:	08008835 	.word	0x08008835
 80086d4:	08008951 	.word	0x08008951
 80086d8:	08008951 	.word	0x08008951
 80086dc:	08008951 	.word	0x08008951
 80086e0:	08008951 	.word	0x08008951
 80086e4:	08008951 	.word	0x08008951
 80086e8:	08008951 	.word	0x08008951
 80086ec:	08008951 	.word	0x08008951
 80086f0:	08008951 	.word	0x08008951
 80086f4:	08008951 	.word	0x08008951
 80086f8:	08008951 	.word	0x08008951
 80086fc:	08008789 	.word	0x08008789
 8008700:	080087a1 	.word	0x080087a1
 8008704:	08008951 	.word	0x08008951
 8008708:	08008951 	.word	0x08008951
 800870c:	08008951 	.word	0x08008951
 8008710:	08008951 	.word	0x08008951
 8008714:	080087a1 	.word	0x080087a1
 8008718:	08008951 	.word	0x08008951
 800871c:	08008951 	.word	0x08008951
 8008720:	08008951 	.word	0x08008951
 8008724:	08008951 	.word	0x08008951
 8008728:	08008951 	.word	0x08008951
 800872c:	08008951 	.word	0x08008951
 8008730:	08008835 	.word	0x08008835
 8008734:	08008951 	.word	0x08008951
 8008738:	08008951 	.word	0x08008951
 800873c:	080087cb 	.word	0x080087cb
 8008740:	08008951 	.word	0x08008951
 8008744:	0800881d 	.word	0x0800881d
 8008748:	08008951 	.word	0x08008951
 800874c:	08008951 	.word	0x08008951
 8008750:	08008835 	.word	0x08008835
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3b01      	subs	r3, #1
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	2b30      	cmp	r3, #48	@ 0x30
 800875c:	d105      	bne.n	800876a <UARTvprintf+0x1d6>
 800875e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <UARTvprintf+0x1d6>
                    {
                        cFill = '0';
 8008764:	2330      	movs	r3, #48	@ 0x30
 8008766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
 800876a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    ui32Count += pcString[-1] - '0';
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3b01      	subs	r3, #1
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	4413      	add	r3, r2
 8008782:	3b30      	subs	r3, #48	@ 0x30
 8008784:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    //
                    // Get the next character.
                    //
                    goto again;
 8008786:	e732      	b.n	80085ee <UARTvprintf+0x5a>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	1d1a      	adds	r2, r3, #4
 800878c:	603a      	str	r2, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	61bb      	str	r3, [r7, #24]

                    //
                    // Print out the character.
                    //
                    UARTwrite((char *)&ui32Value, 1);
 8008792:	f107 0318 	add.w	r3, r7, #24
 8008796:	2101      	movs	r1, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fe8d 	bl	80084b8 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 800879e:	e0dd      	b.n	800895c <UARTvprintf+0x3c8>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	603a      	str	r2, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 80087aa:	2300      	movs	r3, #0
 80087ac:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da05      	bge.n	80087c0 <UARTvprintf+0x22c>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	425b      	negs	r3, r3
 80087b8:	61bb      	str	r3, [r7, #24]

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
 80087ba:	2301      	movs	r3, #1
 80087bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80087be:	e001      	b.n	80087c4 <UARTvprintf+0x230>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32Neg = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 80087c4:	230a      	movs	r3, #10
 80087c6:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80087c8:	e03f      	b.n	800884a <UARTvprintf+0x2b6>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	1d1a      	adds	r2, r3, #4
 80087ce:	603a      	str	r2, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61fb      	str	r3, [r7, #28]

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
 80087d4:	2300      	movs	r3, #0
 80087d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d8:	e002      	b.n	80087e0 <UARTvprintf+0x24c>
 80087da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087dc:	3301      	adds	r3, #1
 80087de:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e0:	69fa      	ldr	r2, [r7, #28]
 80087e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e4:	4413      	add	r3, r2
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1f6      	bne.n	80087da <UARTvprintf+0x246>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcStr, ui32Idx);
 80087ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80087ee:	69f8      	ldr	r0, [r7, #28]
 80087f0:	f7ff fe62 	bl	80084b8 <UARTwrite>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
 80087f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f8:	429a      	cmp	r2, r3
 80087fa:	f240 80ae 	bls.w	800895a <UARTvprintf+0x3c6>
                    {
                        ui32Count -= ui32Idx;
 80087fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        while(ui32Count--)
 8008806:	e003      	b.n	8008810 <UARTvprintf+0x27c>
                        {
                            UARTwrite(" ", 1);
 8008808:	2101      	movs	r1, #1
 800880a:	4859      	ldr	r0, [pc, #356]	@ (8008970 <UARTvprintf+0x3dc>)
 800880c:	f7ff fe54 	bl	80084b8 <UARTwrite>
                        while(ui32Count--)
 8008810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008812:	1e5a      	subs	r2, r3, #1
 8008814:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f6      	bne.n	8008808 <UARTvprintf+0x274>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 800881a:	e09e      	b.n	800895a <UARTvprintf+0x3c6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	603a      	str	r2, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
 800882a:	230a      	movs	r3, #10
 800882c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8008832:	e00a      	b.n	800884a <UARTvprintf+0x2b6>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	1d1a      	adds	r2, r3, #4
 8008838:	603a      	str	r2, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32Pos = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
 8008842:	2310      	movs	r3, #16
 8008844:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	627b      	str	r3, [r7, #36]	@ 0x24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
 800884a:	2301      	movs	r3, #1
 800884c:	637b      	str	r3, [r7, #52]	@ 0x34
 800884e:	e007      	b.n	8008860 <UARTvprintf+0x2cc>
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
 8008850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008854:	fb02 f303 	mul.w	r3, r2, r3
 8008858:	637b      	str	r3, [r7, #52]	@ 0x34
 800885a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885c:	3b01      	subs	r3, #1
 800885e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008864:	fb03 f202 	mul.w	r2, r3, r2
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	429a      	cmp	r2, r3
 800886c:	d809      	bhi.n	8008882 <UARTvprintf+0x2ee>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
 800886e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008872:	fb03 f202 	mul.w	r2, r3, r2
 8008876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008878:	fbb2 f3f3 	udiv	r3, r2, r3
                        (((ui32Idx * ui32Base) <= ui32Value) &&
 800887c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800887e:	429a      	cmp	r2, r3
 8008880:	d0e6      	beq.n	8008850 <UARTvprintf+0x2bc>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <UARTvprintf+0x2fa>
                    {
                        ui32Count--;
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	3b01      	subs	r3, #1
 800888c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00d      	beq.n	80088b0 <UARTvprintf+0x31c>
 8008894:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008898:	2b30      	cmp	r3, #48	@ 0x30
 800889a:	d109      	bne.n	80088b0 <UARTvprintf+0x31c>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80088a2:	3338      	adds	r3, #56	@ 0x38
 80088a4:	443b      	add	r3, r7
 80088a6:	222d      	movs	r2, #45	@ 0x2d
 80088a8:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d915      	bls.n	80088e2 <UARTvprintf+0x34e>
 80088b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b8:	2b0f      	cmp	r3, #15
 80088ba:	d812      	bhi.n	80088e2 <UARTvprintf+0x34e>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
 80088bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088be:	3b01      	subs	r3, #1
 80088c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088c2:	e00b      	b.n	80088dc <UARTvprintf+0x348>
                        {
                            pcBuf[ui32Pos++] = cFill;
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80088ca:	3338      	adds	r3, #56	@ 0x38
 80088cc:	443b      	add	r3, r7
 80088ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80088d2:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32Count--; ui32Count; ui32Count--)
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	3b01      	subs	r3, #1
 80088da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f0      	bne.n	80088c4 <UARTvprintf+0x330>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
 80088e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d022      	beq.n	800892e <UARTvprintf+0x39a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80088ee:	3338      	adds	r3, #56	@ 0x38
 80088f0:	443b      	add	r3, r7
 80088f2:	222d      	movs	r2, #45	@ 0x2d
 80088f4:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
 80088f8:	e019      	b.n	800892e <UARTvprintf+0x39a>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 80088fa:	481e      	ldr	r0, [pc, #120]	@ (8008974 <UARTvprintf+0x3e0>)
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008906:	fbb3 f2f2 	udiv	r2, r3, r2
 800890a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800890c:	fb01 f202 	mul.w	r2, r1, r2
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	18c2      	adds	r2, r0, r3
                        pcBuf[ui32Pos++] =
 8008914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008916:	1c59      	adds	r1, r3, #1
 8008918:	6339      	str	r1, [r7, #48]	@ 0x30
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
 800891a:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui32Pos++] =
 800891c:	3338      	adds	r3, #56	@ 0x38
 800891e:	443b      	add	r3, r7
 8008920:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32Idx; ui32Idx /= ui32Base)
 8008924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008928:	fbb2 f3f3 	udiv	r3, r2, r3
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
 800892e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e2      	bne.n	80088fa <UARTvprintf+0x366>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcBuf, ui32Pos);
 8008934:	f107 0308 	add.w	r3, r7, #8
 8008938:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fdbc 	bl	80084b8 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 8008940:	e00c      	b.n	800895c <UARTvprintf+0x3c8>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UARTwrite(pcString - 1, 1);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3b01      	subs	r3, #1
 8008946:	2101      	movs	r1, #1
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fdb5 	bl	80084b8 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 800894e:	e005      	b.n	800895c <UARTvprintf+0x3c8>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UARTwrite("ERROR", 5);
 8008950:	2105      	movs	r1, #5
 8008952:	4809      	ldr	r0, [pc, #36]	@ (8008978 <UARTvprintf+0x3e4>)
 8008954:	f7ff fdb0 	bl	80084b8 <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
 8008958:	e000      	b.n	800895c <UARTvprintf+0x3c8>
                    break;
 800895a:	bf00      	nop
    while(*pcString)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f47f ae1d 	bne.w	80085a0 <UARTvprintf+0xc>
                }
            }
        }
    }
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	3738      	adds	r7, #56	@ 0x38
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	0800b8d8 	.word	0x0800b8d8
 8008974:	0800b8c4 	.word	0x0800b8c4
 8008978:	0800b8dc 	.word	0x0800b8dc

0800897c <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
 800897c:	b40f      	push	{r0, r1, r2, r3}
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 8008984:	f107 0314 	add.w	r3, r7, #20
 8008988:	607b      	str	r3, [r7, #4]

    UARTvprintf(pcString, vaArgP);
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	6938      	ldr	r0, [r7, #16]
 800898e:	f7ff fe01 	bl	8008594 <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
}
 8008992:	bf00      	nop
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800899c:	b004      	add	sp, #16
 800899e:	4770      	bx	lr

080089a0 <UARTFlushRx>:
//
//*****************************************************************************

void
UARTFlushRx(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
    uint32_t ui32Int;

    //
    // Temporarily turn off interrupts.
    //
    ui32Int = NVIC_GetEnableIRQ(uartstdio_device.uart_irqn);
 80089a6:	4b11      	ldr	r3, [pc, #68]	@ (80089ec <UARTFlushRx+0x4c>)
 80089a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff fbf9 	bl	80081a4 <__NVIC_GetEnableIRQ>
 80089b2:	6078      	str	r0, [r7, #4]
    if (ui32Int) NVIC_DisableIRQ(uartstdio_device.uart_irqn);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <UARTFlushRx+0x26>
 80089ba:	4b0c      	ldr	r3, [pc, #48]	@ (80089ec <UARTFlushRx+0x4c>)
 80089bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff fc0f 	bl	80081e4 <__NVIC_DisableIRQ>

    //
    // Flush the receive buffer.
    //
    g_ui32UARTRxReadIndex = 0;
 80089c6:	4b0a      	ldr	r3, [pc, #40]	@ (80089f0 <UARTFlushRx+0x50>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
    g_ui32UARTRxWriteIndex = 0;
 80089cc:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <UARTFlushRx+0x54>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]

    //
    // If interrupts were enabled when we turned them off, turn them
    // back on again.
    //
    if(ui32Int)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <UARTFlushRx+0x44>
    {
        NVIC_EnableIRQ(uartstdio_device.uart_irqn);
 80089d8:	4b04      	ldr	r3, [pc, #16]	@ (80089ec <UARTFlushRx+0x4c>)
 80089da:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fbc4 	bl	800816c <__NVIC_EnableIRQ>
    }
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20000a5c 	.word	0x20000a5c
 80089f0:	20000ef0 	.word	0x20000ef0
 80089f4:	20000eec 	.word	0x20000eec

080089f8 <UARTFlushTx>:
//
//*****************************************************************************

void
UARTFlushTx(bool bDiscard)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32Int;

    //
    // Should the remaining data be discarded or transmitted?
    //
    if(bDiscard)
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d022      	beq.n	8008a4e <UARTFlushTx+0x56>
    {
        //
        // The remaining data should be discarded, so temporarily turn off
        // interrupts.
        //
        ui32Int = NVIC_GetEnableIRQ(uartstdio_device.uart_irqn);
 8008a08:	4b18      	ldr	r3, [pc, #96]	@ (8008a6c <UARTFlushTx+0x74>)
 8008a0a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7ff fbc8 	bl	80081a4 <__NVIC_GetEnableIRQ>
 8008a14:	60f8      	str	r0, [r7, #12]
        if (ui32Int) NVIC_DisableIRQ(uartstdio_device.uart_irqn);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <UARTFlushTx+0x30>
 8008a1c:	4b13      	ldr	r3, [pc, #76]	@ (8008a6c <UARTFlushTx+0x74>)
 8008a1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff fbde 	bl	80081e4 <__NVIC_DisableIRQ>

        //
        // Flush the transmit buffer.
        //
        g_ui32UARTTxReadIndex = 0;
 8008a28:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <UARTFlushTx+0x78>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
        g_ui32UARTTxWriteIndex = 0;
 8008a2e:	4b11      	ldr	r3, [pc, #68]	@ (8008a74 <UARTFlushTx+0x7c>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]

        //
        // If interrupts were enabled when we turned them off, turn them
        // back on again.
        //
        if(ui32Int)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d014      	beq.n	8008a64 <UARTFlushTx+0x6c>
        {

            if (ui32Int) NVIC_DisableIRQ(uartstdio_device.uart_irqn);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d011      	beq.n	8008a64 <UARTFlushTx+0x6c>
 8008a40:	4b0a      	ldr	r3, [pc, #40]	@ (8008a6c <UARTFlushTx+0x74>)
 8008a42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fbcc 	bl	80081e4 <__NVIC_DisableIRQ>
        //
        while(!TX_BUFFER_EMPTY)
        {
        }
    }
}
 8008a4c:	e00a      	b.n	8008a64 <UARTFlushTx+0x6c>
        while(!TX_BUFFER_EMPTY)
 8008a4e:	bf00      	nop
 8008a50:	4908      	ldr	r1, [pc, #32]	@ (8008a74 <UARTFlushTx+0x7c>)
 8008a52:	4807      	ldr	r0, [pc, #28]	@ (8008a70 <UARTFlushTx+0x78>)
 8008a54:	f7ff fcbb 	bl	80083ce <IsBufferEmpty>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f083 0301 	eor.w	r3, r3, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1f5      	bne.n	8008a50 <UARTFlushTx+0x58>
}
 8008a64:	bf00      	nop
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20000a5c 	.word	0x20000a5c
 8008a70:	20000e68 	.word	0x20000e68
 8008a74:	20000e64 	.word	0x20000e64

08008a78 <UARTStdioIntHandler>:
//
//*****************************************************************************

void
UARTStdioIntHandler(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0

    int8_t cChar;

    static bool bLastWasCR = false;
    USART_TypeDef * std_uart = uartstdio_device.uart;
 8008a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8008bb8 <UARTStdioIntHandler+0x140>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	607b      	str	r3, [r7, #4]


    //
    // Are we being interrupted because the TX FIFO has space available?
    //
    if(LL_USART_IsActiveFlag_TC(std_uart))
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7ff fbe3 	bl	8008250 <LL_USART_IsActiveFlag_TC>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <UARTStdioIntHandler+0x36>
    {
    	LL_USART_ClearFlag_TC(std_uart);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff fbef 	bl	8008274 <LL_USART_ClearFlag_TC>
        //
        // Move as many bytes as we can into the transmit FIFO.
        //
        UARTPrimeTransmit();
 8008a96:	f7ff fcb1 	bl	80083fc <UARTPrimeTransmit>

        //
        // If the output buffer is empty, turn off the transmit interrupt.
        //
        if(TX_BUFFER_EMPTY)
 8008a9a:	4948      	ldr	r1, [pc, #288]	@ (8008bbc <UARTStdioIntHandler+0x144>)
 8008a9c:	4848      	ldr	r0, [pc, #288]	@ (8008bc0 <UARTStdioIntHandler+0x148>)
 8008a9e:	f7ff fc96 	bl	80083ce <IsBufferEmpty>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <UARTStdioIntHandler+0x36>
        {
        	LL_USART_DisableIT_TC(std_uart);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fc34 	bl	8008316 <LL_USART_DisableIT_TC>
    }

    //
    // Are we being interrupted due to a received character?
    //
    if(LL_USART_IsActiveFlag_RXNE(std_uart))
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff fbbc 	bl	800822c <LL_USART_IsActiveFlag_RXNE>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d07a      	beq.n	8008bb0 <UARTStdioIntHandler+0x138>
        // Get all the available characters from the UART.
        //
            //
            // Read a character, also clear the interrupt flag
            //
            cChar = LL_USART_ReceiveData8(std_uart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fc4d 	bl	800835a <LL_USART_ReceiveData8>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	b25b      	sxtb	r3, r3
 8008ac4:	70fb      	strb	r3, [r7, #3]
            //
            // If echo is disabled, we skip the various text filtering
            // operations that would typically be required when supporting a
            // command line.
            //
            if(!g_bDisableEcho)
 8008ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc4 <UARTStdioIntHandler+0x14c>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	f083 0301 	eor.w	r3, r3, #1
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d042      	beq.n	8008b5a <UARTStdioIntHandler+0xe2>
            {
                //
                // Handle backspace by erasing the last character in the
                // buffer.
                //
                if(cChar == '\b')
 8008ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d11a      	bne.n	8008b12 <UARTStdioIntHandler+0x9a>
                {
                    //
                    // If there are any characters already in the buffer, then
                    // delete the last.
                    //
                    if(!RX_BUFFER_EMPTY)
 8008adc:	493a      	ldr	r1, [pc, #232]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008ade:	483b      	ldr	r0, [pc, #236]	@ (8008bcc <UARTStdioIntHandler+0x154>)
 8008ae0:	f7ff fc75 	bl	80083ce <IsBufferEmpty>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	f083 0301 	eor.w	r3, r3, #1
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d010      	beq.n	8008b12 <UARTStdioIntHandler+0x9a>
                    {
                        //
                        // Rub out the previous character on the users
                        // terminal.
                        //
                        UARTwrite("\b \b", 3);
 8008af0:	2103      	movs	r1, #3
 8008af2:	4837      	ldr	r0, [pc, #220]	@ (8008bd0 <UARTStdioIntHandler+0x158>)
 8008af4:	f7ff fce0 	bl	80084b8 <UARTwrite>

                        //
                        // Decrement the number of characters in the buffer.
                        //
                        if(g_ui32UARTRxWriteIndex == 0)
 8008af8:	4b33      	ldr	r3, [pc, #204]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <UARTStdioIntHandler+0x90>
                        {
                            g_ui32UARTRxWriteIndex = UART_RX_BUFFER_SIZE - 1;
 8008b00:	4b31      	ldr	r3, [pc, #196]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008b02:	227f      	movs	r2, #127	@ 0x7f
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e004      	b.n	8008b12 <UARTStdioIntHandler+0x9a>
                        }
                        else
                        {
                            g_ui32UARTRxWriteIndex--;
 8008b08:	4b2f      	ldr	r3, [pc, #188]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008b10:	6013      	str	r3, [r2, #0]
                // If this character is LF and last was CR, then just gobble up
                // the character since we already echoed the previous CR and we
                // don't want to store 2 characters in the buffer if we don't
                // need to.
                //
                if((cChar == '\n') && bLastWasCR)
 8008b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b16:	2b0a      	cmp	r3, #10
 8008b18:	d106      	bne.n	8008b28 <UARTStdioIntHandler+0xb0>
 8008b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8008bd4 <UARTStdioIntHandler+0x15c>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <UARTStdioIntHandler+0xb0>
                {
                    bLastWasCR = false;
 8008b22:	4b2c      	ldr	r3, [pc, #176]	@ (8008bd4 <UARTStdioIntHandler+0x15c>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	701a      	strb	r2, [r3, #0]
                }

                //
                // See if a newline or escape character was received.
                //
                if((cChar == '\r') || (cChar == '\n') || (cChar == 0x1b))
 8008b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b2c:	2b0d      	cmp	r3, #13
 8008b2e:	d007      	beq.n	8008b40 <UARTStdioIntHandler+0xc8>
 8008b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b34:	2b0a      	cmp	r3, #10
 8008b36:	d003      	beq.n	8008b40 <UARTStdioIntHandler+0xc8>
 8008b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b3c:	2b1b      	cmp	r3, #27
 8008b3e:	d10c      	bne.n	8008b5a <UARTStdioIntHandler+0xe2>
                    //
                    // If the character is a CR, then it may be followed by an
                    // LF which should be paired with the CR.  So remember that
                    // a CR was received.
                    //
                    if(cChar == '\r')
 8008b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b44:	2b0d      	cmp	r3, #13
 8008b46:	d102      	bne.n	8008b4e <UARTStdioIntHandler+0xd6>
                    {
                        bLastWasCR = 1;
 8008b48:	4b22      	ldr	r3, [pc, #136]	@ (8008bd4 <UARTStdioIntHandler+0x15c>)
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	701a      	strb	r2, [r3, #0]
                    // put a CR in the receive buffer as a marker telling
                    // UARTgets() where the line ends.  We also send an
                    // additional LF to ensure that the local terminal echo
                    // receives both CR and LF.
                    //
                    cChar = '\r';
 8008b4e:	230d      	movs	r3, #13
 8008b50:	70fb      	strb	r3, [r7, #3]
                    UARTwrite("\n", 1);
 8008b52:	2101      	movs	r1, #1
 8008b54:	4820      	ldr	r0, [pc, #128]	@ (8008bd8 <UARTStdioIntHandler+0x160>)
 8008b56:	f7ff fcaf 	bl	80084b8 <UARTwrite>

            //
            // If there is space in the receive buffer, put the character
            // there, otherwise throw it away.
            //
            if(!RX_BUFFER_FULL)
 8008b5a:	2280      	movs	r2, #128	@ 0x80
 8008b5c:	491a      	ldr	r1, [pc, #104]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008b5e:	481b      	ldr	r0, [pc, #108]	@ (8008bcc <UARTStdioIntHandler+0x154>)
 8008b60:	f7ff fc15 	bl	800838e <IsBufferFull>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f083 0301 	eor.w	r3, r3, #1
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d019      	beq.n	8008ba4 <UARTStdioIntHandler+0x12c>
            {
                //
                // Store the new character in the receive buffer
                //
                g_pcUARTRxBuffer[g_ui32UARTRxWriteIndex] = cChar;
 8008b70:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008b74:	4b14      	ldr	r3, [pc, #80]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	b2d1      	uxtb	r1, r2
 8008b7a:	4a18      	ldr	r2, [pc, #96]	@ (8008bdc <UARTStdioIntHandler+0x164>)
 8008b7c:	54d1      	strb	r1, [r2, r3]
                ADVANCE_RX_BUFFER_INDEX(g_ui32UARTRxWriteIndex);
 8008b7e:	4b12      	ldr	r3, [pc, #72]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b88:	4a0f      	ldr	r2, [pc, #60]	@ (8008bc8 <UARTStdioIntHandler+0x150>)
 8008b8a:	6013      	str	r3, [r2, #0]

                //
                // If echo is enabled, write the character to the transmit
                // buffer so that the user gets some immediate feedback.
                //
                if(!g_bDisableEcho)
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <UARTStdioIntHandler+0x14c>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f083 0301 	eor.w	r3, r3, #1
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <UARTStdioIntHandler+0x12c>
                {
                    UARTwrite((const char *)&cChar, 1);
 8008b9a:	1cfb      	adds	r3, r7, #3
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fc8a 	bl	80084b8 <UARTwrite>

        //
        // If we wrote anything to the transmit buffer, make sure it actually
        // gets transmitted.
        //
        UARTPrimeTransmit(std_uart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fc29 	bl	80083fc <UARTPrimeTransmit>
        LL_USART_EnableIT_TC(std_uart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fb91 	bl	80082d2 <LL_USART_EnableIT_TC>
    }
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000a5c 	.word	0x20000a5c
 8008bbc:	20000e64 	.word	0x20000e64
 8008bc0:	20000e68 	.word	0x20000e68
 8008bc4:	20000a5a 	.word	0x20000a5a
 8008bc8:	20000eec 	.word	0x20000eec
 8008bcc:	20000ef0 	.word	0x20000ef0
 8008bd0:	0800b8e4 	.word	0x0800b8e4
 8008bd4:	20000ef4 	.word	0x20000ef4
 8008bd8:	0800b8e8 	.word	0x0800b8e8
 8008bdc:	20000e6c 	.word	0x20000e6c

08008be0 <malloc>:
 8008be0:	4b02      	ldr	r3, [pc, #8]	@ (8008bec <malloc+0xc>)
 8008be2:	4601      	mov	r1, r0
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f000 b82d 	b.w	8008c44 <_malloc_r>
 8008bea:	bf00      	nop
 8008bec:	20000034 	.word	0x20000034

08008bf0 <free>:
 8008bf0:	4b02      	ldr	r3, [pc, #8]	@ (8008bfc <free+0xc>)
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	f000 bacb 	b.w	8009190 <_free_r>
 8008bfa:	bf00      	nop
 8008bfc:	20000034 	.word	0x20000034

08008c00 <sbrk_aligned>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4e0f      	ldr	r6, [pc, #60]	@ (8008c40 <sbrk_aligned+0x40>)
 8008c04:	460c      	mov	r4, r1
 8008c06:	6831      	ldr	r1, [r6, #0]
 8008c08:	4605      	mov	r5, r0
 8008c0a:	b911      	cbnz	r1, 8008c12 <sbrk_aligned+0x12>
 8008c0c:	f000 fa62 	bl	80090d4 <_sbrk_r>
 8008c10:	6030      	str	r0, [r6, #0]
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 fa5d 	bl	80090d4 <_sbrk_r>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d103      	bne.n	8008c26 <sbrk_aligned+0x26>
 8008c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8008c22:	4620      	mov	r0, r4
 8008c24:	bd70      	pop	{r4, r5, r6, pc}
 8008c26:	1cc4      	adds	r4, r0, #3
 8008c28:	f024 0403 	bic.w	r4, r4, #3
 8008c2c:	42a0      	cmp	r0, r4
 8008c2e:	d0f8      	beq.n	8008c22 <sbrk_aligned+0x22>
 8008c30:	1a21      	subs	r1, r4, r0
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 fa4e 	bl	80090d4 <_sbrk_r>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d1f2      	bne.n	8008c22 <sbrk_aligned+0x22>
 8008c3c:	e7ef      	b.n	8008c1e <sbrk_aligned+0x1e>
 8008c3e:	bf00      	nop
 8008c40:	20000ef8 	.word	0x20000ef8

08008c44 <_malloc_r>:
 8008c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c48:	1ccd      	adds	r5, r1, #3
 8008c4a:	f025 0503 	bic.w	r5, r5, #3
 8008c4e:	3508      	adds	r5, #8
 8008c50:	2d0c      	cmp	r5, #12
 8008c52:	bf38      	it	cc
 8008c54:	250c      	movcc	r5, #12
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	4606      	mov	r6, r0
 8008c5a:	db01      	blt.n	8008c60 <_malloc_r+0x1c>
 8008c5c:	42a9      	cmp	r1, r5
 8008c5e:	d904      	bls.n	8008c6a <_malloc_r+0x26>
 8008c60:	230c      	movs	r3, #12
 8008c62:	6033      	str	r3, [r6, #0]
 8008c64:	2000      	movs	r0, #0
 8008c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d40 <_malloc_r+0xfc>
 8008c6e:	f000 f869 	bl	8008d44 <__malloc_lock>
 8008c72:	f8d8 3000 	ldr.w	r3, [r8]
 8008c76:	461c      	mov	r4, r3
 8008c78:	bb44      	cbnz	r4, 8008ccc <_malloc_r+0x88>
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7ff ffbf 	bl	8008c00 <sbrk_aligned>
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	4604      	mov	r4, r0
 8008c86:	d158      	bne.n	8008d3a <_malloc_r+0xf6>
 8008c88:	f8d8 4000 	ldr.w	r4, [r8]
 8008c8c:	4627      	mov	r7, r4
 8008c8e:	2f00      	cmp	r7, #0
 8008c90:	d143      	bne.n	8008d1a <_malloc_r+0xd6>
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	d04b      	beq.n	8008d2e <_malloc_r+0xea>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	4639      	mov	r1, r7
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	eb04 0903 	add.w	r9, r4, r3
 8008ca0:	f000 fa18 	bl	80090d4 <_sbrk_r>
 8008ca4:	4581      	cmp	r9, r0
 8008ca6:	d142      	bne.n	8008d2e <_malloc_r+0xea>
 8008ca8:	6821      	ldr	r1, [r4, #0]
 8008caa:	4630      	mov	r0, r6
 8008cac:	1a6d      	subs	r5, r5, r1
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7ff ffa6 	bl	8008c00 <sbrk_aligned>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d03a      	beq.n	8008d2e <_malloc_r+0xea>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	442b      	add	r3, r5
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	bb62      	cbnz	r2, 8008d20 <_malloc_r+0xdc>
 8008cc6:	f8c8 7000 	str.w	r7, [r8]
 8008cca:	e00f      	b.n	8008cec <_malloc_r+0xa8>
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	1b52      	subs	r2, r2, r5
 8008cd0:	d420      	bmi.n	8008d14 <_malloc_r+0xd0>
 8008cd2:	2a0b      	cmp	r2, #11
 8008cd4:	d917      	bls.n	8008d06 <_malloc_r+0xc2>
 8008cd6:	1961      	adds	r1, r4, r5
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	6025      	str	r5, [r4, #0]
 8008cdc:	bf18      	it	ne
 8008cde:	6059      	strne	r1, [r3, #4]
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	bf08      	it	eq
 8008ce4:	f8c8 1000 	streq.w	r1, [r8]
 8008ce8:	5162      	str	r2, [r4, r5]
 8008cea:	604b      	str	r3, [r1, #4]
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 f82f 	bl	8008d50 <__malloc_unlock>
 8008cf2:	f104 000b 	add.w	r0, r4, #11
 8008cf6:	1d23      	adds	r3, r4, #4
 8008cf8:	f020 0007 	bic.w	r0, r0, #7
 8008cfc:	1ac2      	subs	r2, r0, r3
 8008cfe:	bf1c      	itt	ne
 8008d00:	1a1b      	subne	r3, r3, r0
 8008d02:	50a3      	strne	r3, [r4, r2]
 8008d04:	e7af      	b.n	8008c66 <_malloc_r+0x22>
 8008d06:	6862      	ldr	r2, [r4, #4]
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	bf0c      	ite	eq
 8008d0c:	f8c8 2000 	streq.w	r2, [r8]
 8008d10:	605a      	strne	r2, [r3, #4]
 8008d12:	e7eb      	b.n	8008cec <_malloc_r+0xa8>
 8008d14:	4623      	mov	r3, r4
 8008d16:	6864      	ldr	r4, [r4, #4]
 8008d18:	e7ae      	b.n	8008c78 <_malloc_r+0x34>
 8008d1a:	463c      	mov	r4, r7
 8008d1c:	687f      	ldr	r7, [r7, #4]
 8008d1e:	e7b6      	b.n	8008c8e <_malloc_r+0x4a>
 8008d20:	461a      	mov	r2, r3
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	d1fb      	bne.n	8008d20 <_malloc_r+0xdc>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6053      	str	r3, [r2, #4]
 8008d2c:	e7de      	b.n	8008cec <_malloc_r+0xa8>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	4630      	mov	r0, r6
 8008d32:	6033      	str	r3, [r6, #0]
 8008d34:	f000 f80c 	bl	8008d50 <__malloc_unlock>
 8008d38:	e794      	b.n	8008c64 <_malloc_r+0x20>
 8008d3a:	6005      	str	r5, [r0, #0]
 8008d3c:	e7d6      	b.n	8008cec <_malloc_r+0xa8>
 8008d3e:	bf00      	nop
 8008d40:	20000efc 	.word	0x20000efc

08008d44 <__malloc_lock>:
 8008d44:	4801      	ldr	r0, [pc, #4]	@ (8008d4c <__malloc_lock+0x8>)
 8008d46:	f000 ba12 	b.w	800916e <__retarget_lock_acquire_recursive>
 8008d4a:	bf00      	nop
 8008d4c:	20001040 	.word	0x20001040

08008d50 <__malloc_unlock>:
 8008d50:	4801      	ldr	r0, [pc, #4]	@ (8008d58 <__malloc_unlock+0x8>)
 8008d52:	f000 ba0d 	b.w	8009170 <__retarget_lock_release_recursive>
 8008d56:	bf00      	nop
 8008d58:	20001040 	.word	0x20001040

08008d5c <gcvt>:
 8008d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5e:	461c      	mov	r4, r3
 8008d60:	4615      	mov	r5, r2
 8008d62:	2300      	movs	r3, #0
 8008d64:	2200      	movs	r2, #0
 8008d66:	b085      	sub	sp, #20
 8008d68:	4606      	mov	r6, r0
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	f7f7 fe1e 	bl	80009ac <__aeabi_dcmplt>
 8008d70:	4623      	mov	r3, r4
 8008d72:	b118      	cbz	r0, 8008d7c <gcvt+0x20>
 8008d74:	222d      	movs	r2, #45	@ 0x2d
 8008d76:	3d01      	subs	r5, #1
 8008d78:	f803 2b01 	strb.w	r2, [r3], #1
 8008d7c:	2267      	movs	r2, #103	@ 0x67
 8008d7e:	2100      	movs	r1, #0
 8008d80:	e9cd 5300 	strd	r5, r3, [sp]
 8008d84:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8008d88:	4905      	ldr	r1, [pc, #20]	@ (8008da0 <gcvt+0x44>)
 8008d8a:	4632      	mov	r2, r6
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	6808      	ldr	r0, [r1, #0]
 8008d90:	f000 fabe 	bl	8009310 <_gcvt>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	bf18      	it	ne
 8008d98:	4620      	movne	r0, r4
 8008d9a:	b005      	add	sp, #20
 8008d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000034 	.word	0x20000034

08008da4 <std>:
 8008da4:	2300      	movs	r3, #0
 8008da6:	b510      	push	{r4, lr}
 8008da8:	4604      	mov	r4, r0
 8008daa:	e9c0 3300 	strd	r3, r3, [r0]
 8008dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008db2:	6083      	str	r3, [r0, #8]
 8008db4:	8181      	strh	r1, [r0, #12]
 8008db6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008db8:	81c2      	strh	r2, [r0, #14]
 8008dba:	6183      	str	r3, [r0, #24]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	305c      	adds	r0, #92	@ 0x5c
 8008dc2:	f000 f8f4 	bl	8008fae <memset>
 8008dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008dfc <std+0x58>)
 8008dc8:	6224      	str	r4, [r4, #32]
 8008dca:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e00 <std+0x5c>)
 8008dce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008e04 <std+0x60>)
 8008dd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <std+0x64>)
 8008dd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8008e0c <std+0x68>)
 8008dda:	429c      	cmp	r4, r3
 8008ddc:	d006      	beq.n	8008dec <std+0x48>
 8008dde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008de2:	4294      	cmp	r4, r2
 8008de4:	d002      	beq.n	8008dec <std+0x48>
 8008de6:	33d0      	adds	r3, #208	@ 0xd0
 8008de8:	429c      	cmp	r4, r3
 8008dea:	d105      	bne.n	8008df8 <std+0x54>
 8008dec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df4:	f000 b9ba 	b.w	800916c <__retarget_lock_init_recursive>
 8008df8:	bd10      	pop	{r4, pc}
 8008dfa:	bf00      	nop
 8008dfc:	08008f29 	.word	0x08008f29
 8008e00:	08008f4b 	.word	0x08008f4b
 8008e04:	08008f83 	.word	0x08008f83
 8008e08:	08008fa7 	.word	0x08008fa7
 8008e0c:	20000f00 	.word	0x20000f00

08008e10 <stdio_exit_handler>:
 8008e10:	4a02      	ldr	r2, [pc, #8]	@ (8008e1c <stdio_exit_handler+0xc>)
 8008e12:	4903      	ldr	r1, [pc, #12]	@ (8008e20 <stdio_exit_handler+0x10>)
 8008e14:	4803      	ldr	r0, [pc, #12]	@ (8008e24 <stdio_exit_handler+0x14>)
 8008e16:	f000 b869 	b.w	8008eec <_fwalk_sglue>
 8008e1a:	bf00      	nop
 8008e1c:	20000028 	.word	0x20000028
 8008e20:	08009599 	.word	0x08009599
 8008e24:	20000038 	.word	0x20000038

08008e28 <cleanup_stdio>:
 8008e28:	6841      	ldr	r1, [r0, #4]
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e5c <cleanup_stdio+0x34>)
 8008e2c:	b510      	push	{r4, lr}
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	4604      	mov	r4, r0
 8008e32:	d001      	beq.n	8008e38 <cleanup_stdio+0x10>
 8008e34:	f000 fbb0 	bl	8009598 <_fflush_r>
 8008e38:	68a1      	ldr	r1, [r4, #8]
 8008e3a:	4b09      	ldr	r3, [pc, #36]	@ (8008e60 <cleanup_stdio+0x38>)
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	d002      	beq.n	8008e46 <cleanup_stdio+0x1e>
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fba9 	bl	8009598 <_fflush_r>
 8008e46:	68e1      	ldr	r1, [r4, #12]
 8008e48:	4b06      	ldr	r3, [pc, #24]	@ (8008e64 <cleanup_stdio+0x3c>)
 8008e4a:	4299      	cmp	r1, r3
 8008e4c:	d004      	beq.n	8008e58 <cleanup_stdio+0x30>
 8008e4e:	4620      	mov	r0, r4
 8008e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e54:	f000 bba0 	b.w	8009598 <_fflush_r>
 8008e58:	bd10      	pop	{r4, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20000f00 	.word	0x20000f00
 8008e60:	20000f68 	.word	0x20000f68
 8008e64:	20000fd0 	.word	0x20000fd0

08008e68 <global_stdio_init.part.0>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e98 <global_stdio_init.part.0+0x30>)
 8008e6c:	4c0b      	ldr	r4, [pc, #44]	@ (8008e9c <global_stdio_init.part.0+0x34>)
 8008e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ea0 <global_stdio_init.part.0+0x38>)
 8008e70:	4620      	mov	r0, r4
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	2104      	movs	r1, #4
 8008e76:	2200      	movs	r2, #0
 8008e78:	f7ff ff94 	bl	8008da4 <std>
 8008e7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e80:	2201      	movs	r2, #1
 8008e82:	2109      	movs	r1, #9
 8008e84:	f7ff ff8e 	bl	8008da4 <std>
 8008e88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e92:	2112      	movs	r1, #18
 8008e94:	f7ff bf86 	b.w	8008da4 <std>
 8008e98:	20001038 	.word	0x20001038
 8008e9c:	20000f00 	.word	0x20000f00
 8008ea0:	08008e11 	.word	0x08008e11

08008ea4 <__sfp_lock_acquire>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	@ (8008eac <__sfp_lock_acquire+0x8>)
 8008ea6:	f000 b962 	b.w	800916e <__retarget_lock_acquire_recursive>
 8008eaa:	bf00      	nop
 8008eac:	20001041 	.word	0x20001041

08008eb0 <__sfp_lock_release>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	@ (8008eb8 <__sfp_lock_release+0x8>)
 8008eb2:	f000 b95d 	b.w	8009170 <__retarget_lock_release_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	20001041 	.word	0x20001041

08008ebc <__sinit>:
 8008ebc:	b510      	push	{r4, lr}
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	f7ff fff0 	bl	8008ea4 <__sfp_lock_acquire>
 8008ec4:	6a23      	ldr	r3, [r4, #32]
 8008ec6:	b11b      	cbz	r3, 8008ed0 <__sinit+0x14>
 8008ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ecc:	f7ff bff0 	b.w	8008eb0 <__sfp_lock_release>
 8008ed0:	4b04      	ldr	r3, [pc, #16]	@ (8008ee4 <__sinit+0x28>)
 8008ed2:	6223      	str	r3, [r4, #32]
 8008ed4:	4b04      	ldr	r3, [pc, #16]	@ (8008ee8 <__sinit+0x2c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f5      	bne.n	8008ec8 <__sinit+0xc>
 8008edc:	f7ff ffc4 	bl	8008e68 <global_stdio_init.part.0>
 8008ee0:	e7f2      	b.n	8008ec8 <__sinit+0xc>
 8008ee2:	bf00      	nop
 8008ee4:	08008e29 	.word	0x08008e29
 8008ee8:	20001038 	.word	0x20001038

08008eec <_fwalk_sglue>:
 8008eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	4688      	mov	r8, r1
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	2600      	movs	r6, #0
 8008ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008efc:	f1b9 0901 	subs.w	r9, r9, #1
 8008f00:	d505      	bpl.n	8008f0e <_fwalk_sglue+0x22>
 8008f02:	6824      	ldr	r4, [r4, #0]
 8008f04:	2c00      	cmp	r4, #0
 8008f06:	d1f7      	bne.n	8008ef8 <_fwalk_sglue+0xc>
 8008f08:	4630      	mov	r0, r6
 8008f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0e:	89ab      	ldrh	r3, [r5, #12]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d907      	bls.n	8008f24 <_fwalk_sglue+0x38>
 8008f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	d003      	beq.n	8008f24 <_fwalk_sglue+0x38>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4638      	mov	r0, r7
 8008f20:	47c0      	blx	r8
 8008f22:	4306      	orrs	r6, r0
 8008f24:	3568      	adds	r5, #104	@ 0x68
 8008f26:	e7e9      	b.n	8008efc <_fwalk_sglue+0x10>

08008f28 <__sread>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f30:	f000 f8be 	bl	80090b0 <_read_r>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	bfab      	itete	ge
 8008f38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f3c:	181b      	addge	r3, r3, r0
 8008f3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f42:	bfac      	ite	ge
 8008f44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f46:	81a3      	strhlt	r3, [r4, #12]
 8008f48:	bd10      	pop	{r4, pc}

08008f4a <__swrite>:
 8008f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4e:	461f      	mov	r7, r3
 8008f50:	898b      	ldrh	r3, [r1, #12]
 8008f52:	4605      	mov	r5, r0
 8008f54:	05db      	lsls	r3, r3, #23
 8008f56:	460c      	mov	r4, r1
 8008f58:	4616      	mov	r6, r2
 8008f5a:	d505      	bpl.n	8008f68 <__swrite+0x1e>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f64:	f000 f892 	bl	800908c <_lseek_r>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	4628      	mov	r0, r5
 8008f74:	463b      	mov	r3, r7
 8008f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7e:	f000 b8b9 	b.w	80090f4 <_write_r>

08008f82 <__sseek>:
 8008f82:	b510      	push	{r4, lr}
 8008f84:	460c      	mov	r4, r1
 8008f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f8a:	f000 f87f 	bl	800908c <_lseek_r>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	bf15      	itete	ne
 8008f94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f9e:	81a3      	strheq	r3, [r4, #12]
 8008fa0:	bf18      	it	ne
 8008fa2:	81a3      	strhne	r3, [r4, #12]
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <__sclose>:
 8008fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008faa:	f000 b809 	b.w	8008fc0 <_close_r>

08008fae <memset>:
 8008fae:	4603      	mov	r3, r0
 8008fb0:	4402      	add	r2, r0
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d100      	bne.n	8008fb8 <memset+0xa>
 8008fb6:	4770      	bx	lr
 8008fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8008fbc:	e7f9      	b.n	8008fb2 <memset+0x4>
	...

08008fc0 <_close_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	4d05      	ldr	r5, [pc, #20]	@ (8008fdc <_close_r+0x1c>)
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	f7f9 f9fd 	bl	80023ca <_close>
 8008fd0:	1c43      	adds	r3, r0, #1
 8008fd2:	d102      	bne.n	8008fda <_close_r+0x1a>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	b103      	cbz	r3, 8008fda <_close_r+0x1a>
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	2000103c 	.word	0x2000103c

08008fe0 <_reclaim_reent>:
 8008fe0:	4b29      	ldr	r3, [pc, #164]	@ (8009088 <_reclaim_reent+0xa8>)
 8008fe2:	b570      	push	{r4, r5, r6, lr}
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4283      	cmp	r3, r0
 8008fea:	d04b      	beq.n	8009084 <_reclaim_reent+0xa4>
 8008fec:	69c3      	ldr	r3, [r0, #28]
 8008fee:	b1ab      	cbz	r3, 800901c <_reclaim_reent+0x3c>
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	b16b      	cbz	r3, 8009010 <_reclaim_reent+0x30>
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	69e3      	ldr	r3, [r4, #28]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	5959      	ldr	r1, [r3, r5]
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d13b      	bne.n	8009078 <_reclaim_reent+0x98>
 8009000:	3504      	adds	r5, #4
 8009002:	2d80      	cmp	r5, #128	@ 0x80
 8009004:	d1f7      	bne.n	8008ff6 <_reclaim_reent+0x16>
 8009006:	69e3      	ldr	r3, [r4, #28]
 8009008:	4620      	mov	r0, r4
 800900a:	68d9      	ldr	r1, [r3, #12]
 800900c:	f000 f8c0 	bl	8009190 <_free_r>
 8009010:	69e3      	ldr	r3, [r4, #28]
 8009012:	6819      	ldr	r1, [r3, #0]
 8009014:	b111      	cbz	r1, 800901c <_reclaim_reent+0x3c>
 8009016:	4620      	mov	r0, r4
 8009018:	f000 f8ba 	bl	8009190 <_free_r>
 800901c:	6961      	ldr	r1, [r4, #20]
 800901e:	b111      	cbz	r1, 8009026 <_reclaim_reent+0x46>
 8009020:	4620      	mov	r0, r4
 8009022:	f000 f8b5 	bl	8009190 <_free_r>
 8009026:	69e1      	ldr	r1, [r4, #28]
 8009028:	b111      	cbz	r1, 8009030 <_reclaim_reent+0x50>
 800902a:	4620      	mov	r0, r4
 800902c:	f000 f8b0 	bl	8009190 <_free_r>
 8009030:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009032:	b111      	cbz	r1, 800903a <_reclaim_reent+0x5a>
 8009034:	4620      	mov	r0, r4
 8009036:	f000 f8ab 	bl	8009190 <_free_r>
 800903a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800903c:	b111      	cbz	r1, 8009044 <_reclaim_reent+0x64>
 800903e:	4620      	mov	r0, r4
 8009040:	f000 f8a6 	bl	8009190 <_free_r>
 8009044:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009046:	b111      	cbz	r1, 800904e <_reclaim_reent+0x6e>
 8009048:	4620      	mov	r0, r4
 800904a:	f000 f8a1 	bl	8009190 <_free_r>
 800904e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009050:	b111      	cbz	r1, 8009058 <_reclaim_reent+0x78>
 8009052:	4620      	mov	r0, r4
 8009054:	f000 f89c 	bl	8009190 <_free_r>
 8009058:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800905a:	b111      	cbz	r1, 8009062 <_reclaim_reent+0x82>
 800905c:	4620      	mov	r0, r4
 800905e:	f000 f897 	bl	8009190 <_free_r>
 8009062:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009064:	b111      	cbz	r1, 800906c <_reclaim_reent+0x8c>
 8009066:	4620      	mov	r0, r4
 8009068:	f000 f892 	bl	8009190 <_free_r>
 800906c:	6a23      	ldr	r3, [r4, #32]
 800906e:	b14b      	cbz	r3, 8009084 <_reclaim_reent+0xa4>
 8009070:	4620      	mov	r0, r4
 8009072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009076:	4718      	bx	r3
 8009078:	680e      	ldr	r6, [r1, #0]
 800907a:	4620      	mov	r0, r4
 800907c:	f000 f888 	bl	8009190 <_free_r>
 8009080:	4631      	mov	r1, r6
 8009082:	e7bb      	b.n	8008ffc <_reclaim_reent+0x1c>
 8009084:	bd70      	pop	{r4, r5, r6, pc}
 8009086:	bf00      	nop
 8009088:	20000034 	.word	0x20000034

0800908c <_lseek_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	2200      	movs	r2, #0
 8009096:	4d05      	ldr	r5, [pc, #20]	@ (80090ac <_lseek_r+0x20>)
 8009098:	602a      	str	r2, [r5, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f7f9 f9b9 	bl	8002412 <_lseek>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_lseek_r+0x1e>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_lseek_r+0x1e>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	2000103c 	.word	0x2000103c

080090b0 <_read_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4604      	mov	r4, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	2200      	movs	r2, #0
 80090ba:	4d05      	ldr	r5, [pc, #20]	@ (80090d0 <_read_r+0x20>)
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f7f9 f94a 	bl	8002358 <_read>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_read_r+0x1e>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_read_r+0x1e>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	2000103c 	.word	0x2000103c

080090d4 <_sbrk_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	2300      	movs	r3, #0
 80090d8:	4d05      	ldr	r5, [pc, #20]	@ (80090f0 <_sbrk_r+0x1c>)
 80090da:	4604      	mov	r4, r0
 80090dc:	4608      	mov	r0, r1
 80090de:	602b      	str	r3, [r5, #0]
 80090e0:	f7f9 f9a4 	bl	800242c <_sbrk>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_sbrk_r+0x1a>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_sbrk_r+0x1a>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	2000103c 	.word	0x2000103c

080090f4 <_write_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4604      	mov	r4, r0
 80090f8:	4608      	mov	r0, r1
 80090fa:	4611      	mov	r1, r2
 80090fc:	2200      	movs	r2, #0
 80090fe:	4d05      	ldr	r5, [pc, #20]	@ (8009114 <_write_r+0x20>)
 8009100:	602a      	str	r2, [r5, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	f7f9 f945 	bl	8002392 <_write>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_write_r+0x1e>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_write_r+0x1e>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	2000103c 	.word	0x2000103c

08009118 <__errno>:
 8009118:	4b01      	ldr	r3, [pc, #4]	@ (8009120 <__errno+0x8>)
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	20000034 	.word	0x20000034

08009124 <__libc_init_array>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	2600      	movs	r6, #0
 8009128:	4d0c      	ldr	r5, [pc, #48]	@ (800915c <__libc_init_array+0x38>)
 800912a:	4c0d      	ldr	r4, [pc, #52]	@ (8009160 <__libc_init_array+0x3c>)
 800912c:	1b64      	subs	r4, r4, r5
 800912e:	10a4      	asrs	r4, r4, #2
 8009130:	42a6      	cmp	r6, r4
 8009132:	d109      	bne.n	8009148 <__libc_init_array+0x24>
 8009134:	f002 fabe 	bl	800b6b4 <_init>
 8009138:	2600      	movs	r6, #0
 800913a:	4d0a      	ldr	r5, [pc, #40]	@ (8009164 <__libc_init_array+0x40>)
 800913c:	4c0a      	ldr	r4, [pc, #40]	@ (8009168 <__libc_init_array+0x44>)
 800913e:	1b64      	subs	r4, r4, r5
 8009140:	10a4      	asrs	r4, r4, #2
 8009142:	42a6      	cmp	r6, r4
 8009144:	d105      	bne.n	8009152 <__libc_init_array+0x2e>
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	f855 3b04 	ldr.w	r3, [r5], #4
 800914c:	4798      	blx	r3
 800914e:	3601      	adds	r6, #1
 8009150:	e7ee      	b.n	8009130 <__libc_init_array+0xc>
 8009152:	f855 3b04 	ldr.w	r3, [r5], #4
 8009156:	4798      	blx	r3
 8009158:	3601      	adds	r6, #1
 800915a:	e7f2      	b.n	8009142 <__libc_init_array+0x1e>
 800915c:	0800c2d8 	.word	0x0800c2d8
 8009160:	0800c2d8 	.word	0x0800c2d8
 8009164:	0800c2d8 	.word	0x0800c2d8
 8009168:	0800c2dc 	.word	0x0800c2dc

0800916c <__retarget_lock_init_recursive>:
 800916c:	4770      	bx	lr

0800916e <__retarget_lock_acquire_recursive>:
 800916e:	4770      	bx	lr

08009170 <__retarget_lock_release_recursive>:
 8009170:	4770      	bx	lr

08009172 <memcpy>:
 8009172:	440a      	add	r2, r1
 8009174:	4291      	cmp	r1, r2
 8009176:	f100 33ff 	add.w	r3, r0, #4294967295
 800917a:	d100      	bne.n	800917e <memcpy+0xc>
 800917c:	4770      	bx	lr
 800917e:	b510      	push	{r4, lr}
 8009180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009184:	4291      	cmp	r1, r2
 8009186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800918a:	d1f9      	bne.n	8009180 <memcpy+0xe>
 800918c:	bd10      	pop	{r4, pc}
	...

08009190 <_free_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4605      	mov	r5, r0
 8009194:	2900      	cmp	r1, #0
 8009196:	d040      	beq.n	800921a <_free_r+0x8a>
 8009198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800919c:	1f0c      	subs	r4, r1, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bfb8      	it	lt
 80091a2:	18e4      	addlt	r4, r4, r3
 80091a4:	f7ff fdce 	bl	8008d44 <__malloc_lock>
 80091a8:	4a1c      	ldr	r2, [pc, #112]	@ (800921c <_free_r+0x8c>)
 80091aa:	6813      	ldr	r3, [r2, #0]
 80091ac:	b933      	cbnz	r3, 80091bc <_free_r+0x2c>
 80091ae:	6063      	str	r3, [r4, #4]
 80091b0:	6014      	str	r4, [r2, #0]
 80091b2:	4628      	mov	r0, r5
 80091b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b8:	f7ff bdca 	b.w	8008d50 <__malloc_unlock>
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d908      	bls.n	80091d2 <_free_r+0x42>
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	1821      	adds	r1, r4, r0
 80091c4:	428b      	cmp	r3, r1
 80091c6:	bf01      	itttt	eq
 80091c8:	6819      	ldreq	r1, [r3, #0]
 80091ca:	685b      	ldreq	r3, [r3, #4]
 80091cc:	1809      	addeq	r1, r1, r0
 80091ce:	6021      	streq	r1, [r4, #0]
 80091d0:	e7ed      	b.n	80091ae <_free_r+0x1e>
 80091d2:	461a      	mov	r2, r3
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	b10b      	cbz	r3, 80091dc <_free_r+0x4c>
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d9fa      	bls.n	80091d2 <_free_r+0x42>
 80091dc:	6811      	ldr	r1, [r2, #0]
 80091de:	1850      	adds	r0, r2, r1
 80091e0:	42a0      	cmp	r0, r4
 80091e2:	d10b      	bne.n	80091fc <_free_r+0x6c>
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	4401      	add	r1, r0
 80091e8:	1850      	adds	r0, r2, r1
 80091ea:	4283      	cmp	r3, r0
 80091ec:	6011      	str	r1, [r2, #0]
 80091ee:	d1e0      	bne.n	80091b2 <_free_r+0x22>
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	4408      	add	r0, r1
 80091f6:	6010      	str	r0, [r2, #0]
 80091f8:	6053      	str	r3, [r2, #4]
 80091fa:	e7da      	b.n	80091b2 <_free_r+0x22>
 80091fc:	d902      	bls.n	8009204 <_free_r+0x74>
 80091fe:	230c      	movs	r3, #12
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	e7d6      	b.n	80091b2 <_free_r+0x22>
 8009204:	6820      	ldr	r0, [r4, #0]
 8009206:	1821      	adds	r1, r4, r0
 8009208:	428b      	cmp	r3, r1
 800920a:	bf01      	itttt	eq
 800920c:	6819      	ldreq	r1, [r3, #0]
 800920e:	685b      	ldreq	r3, [r3, #4]
 8009210:	1809      	addeq	r1, r1, r0
 8009212:	6021      	streq	r1, [r4, #0]
 8009214:	6063      	str	r3, [r4, #4]
 8009216:	6054      	str	r4, [r2, #4]
 8009218:	e7cb      	b.n	80091b2 <_free_r+0x22>
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20000efc 	.word	0x20000efc

08009220 <print_e>:
 8009220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009222:	b08b      	sub	sp, #44	@ 0x2c
 8009224:	460d      	mov	r5, r1
 8009226:	a908      	add	r1, sp, #32
 8009228:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800922a:	9104      	str	r1, [sp, #16]
 800922c:	a907      	add	r1, sp, #28
 800922e:	9103      	str	r1, [sp, #12]
 8009230:	a909      	add	r1, sp, #36	@ 0x24
 8009232:	9102      	str	r1, [sp, #8]
 8009234:	1c71      	adds	r1, r6, #1
 8009236:	9101      	str	r1, [sp, #4]
 8009238:	2102      	movs	r1, #2
 800923a:	9100      	str	r1, [sp, #0]
 800923c:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 8009240:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8009242:	f000 fa61 	bl	8009708 <_dtoa_r>
 8009246:	f242 730f 	movw	r3, #9999	@ 0x270f
 800924a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800924c:	4601      	mov	r1, r0
 800924e:	429a      	cmp	r2, r3
 8009250:	d104      	bne.n	800925c <print_e+0x3c>
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f9c8 	bl	80095e8 <strcpy>
 8009258:	b00b      	add	sp, #44	@ 0x2c
 800925a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925c:	462b      	mov	r3, r5
 800925e:	7800      	ldrb	r0, [r0, #0]
 8009260:	2e00      	cmp	r6, #0
 8009262:	f803 0b01 	strb.w	r0, [r3], #1
 8009266:	bfc8      	it	gt
 8009268:	2401      	movgt	r4, #1
 800926a:	202e      	movs	r0, #46	@ 0x2e
 800926c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009270:	b10d      	cbz	r5, 8009276 <print_e+0x56>
 8009272:	2e00      	cmp	r6, #0
 8009274:	dc29      	bgt.n	80092ca <print_e+0xaa>
 8009276:	2f67      	cmp	r7, #103	@ 0x67
 8009278:	d038      	beq.n	80092ec <print_e+0xcc>
 800927a:	2f47      	cmp	r7, #71	@ 0x47
 800927c:	d038      	beq.n	80092f0 <print_e+0xd0>
 800927e:	212e      	movs	r1, #46	@ 0x2e
 8009280:	2030      	movs	r0, #48	@ 0x30
 8009282:	2e00      	cmp	r6, #0
 8009284:	dc2a      	bgt.n	80092dc <print_e+0xbc>
 8009286:	1e51      	subs	r1, r2, #1
 8009288:	2900      	cmp	r1, #0
 800928a:	bfa8      	it	ge
 800928c:	222b      	movge	r2, #43	@ 0x2b
 800928e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009290:	bfbd      	ittte	lt
 8009292:	212d      	movlt	r1, #45	@ 0x2d
 8009294:	f1c2 0201 	rsblt	r2, r2, #1
 8009298:	9209      	strlt	r2, [sp, #36]	@ 0x24
 800929a:	705a      	strbge	r2, [r3, #1]
 800929c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800929e:	bfb8      	it	lt
 80092a0:	7059      	strblt	r1, [r3, #1]
 80092a2:	2a63      	cmp	r2, #99	@ 0x63
 80092a4:	701f      	strb	r7, [r3, #0]
 80092a6:	dc25      	bgt.n	80092f4 <print_e+0xd4>
 80092a8:	1c98      	adds	r0, r3, #2
 80092aa:	220a      	movs	r2, #10
 80092ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ae:	fb93 f2f2 	sdiv	r2, r3, r2
 80092b2:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 80092b6:	7001      	strb	r1, [r0, #0]
 80092b8:	f06f 0109 	mvn.w	r1, #9
 80092bc:	fb01 3302 	mla	r3, r1, r2, r3
 80092c0:	3330      	adds	r3, #48	@ 0x30
 80092c2:	7043      	strb	r3, [r0, #1]
 80092c4:	2300      	movs	r3, #0
 80092c6:	7083      	strb	r3, [r0, #2]
 80092c8:	e7c6      	b.n	8009258 <print_e+0x38>
 80092ca:	b10c      	cbz	r4, 80092d0 <print_e+0xb0>
 80092cc:	f803 0b01 	strb.w	r0, [r3], #1
 80092d0:	780c      	ldrb	r4, [r1, #0]
 80092d2:	3e01      	subs	r6, #1
 80092d4:	f803 4b01 	strb.w	r4, [r3], #1
 80092d8:	2400      	movs	r4, #0
 80092da:	e7c7      	b.n	800926c <print_e+0x4c>
 80092dc:	b10c      	cbz	r4, 80092e2 <print_e+0xc2>
 80092de:	f803 1b01 	strb.w	r1, [r3], #1
 80092e2:	2400      	movs	r4, #0
 80092e4:	f803 0b01 	strb.w	r0, [r3], #1
 80092e8:	3e01      	subs	r6, #1
 80092ea:	e7ca      	b.n	8009282 <print_e+0x62>
 80092ec:	2765      	movs	r7, #101	@ 0x65
 80092ee:	e7ca      	b.n	8009286 <print_e+0x66>
 80092f0:	2745      	movs	r7, #69	@ 0x45
 80092f2:	e7c8      	b.n	8009286 <print_e+0x66>
 80092f4:	2164      	movs	r1, #100	@ 0x64
 80092f6:	fb92 f1f1 	sdiv	r1, r2, r1
 80092fa:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 80092fe:	1cd8      	adds	r0, r3, #3
 8009300:	709c      	strb	r4, [r3, #2]
 8009302:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8009306:	fb03 2201 	mla	r2, r3, r1, r2
 800930a:	9209      	str	r2, [sp, #36]	@ 0x24
 800930c:	e7cd      	b.n	80092aa <print_e+0x8a>
	...

08009310 <_gcvt>:
 8009310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009314:	4690      	mov	r8, r2
 8009316:	4699      	mov	r9, r3
 8009318:	b08b      	sub	sp, #44	@ 0x2c
 800931a:	4607      	mov	r7, r0
 800931c:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	@ 0x48
 8009320:	2200      	movs	r2, #0
 8009322:	2300      	movs	r3, #0
 8009324:	4640      	mov	r0, r8
 8009326:	4649      	mov	r1, r9
 8009328:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800932a:	f7f7 fb3f 	bl	80009ac <__aeabi_dcmplt>
 800932e:	b110      	cbz	r0, 8009336 <_gcvt+0x26>
 8009330:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009334:	4699      	mov	r9, r3
 8009336:	2200      	movs	r2, #0
 8009338:	2300      	movs	r3, #0
 800933a:	4640      	mov	r0, r8
 800933c:	4649      	mov	r1, r9
 800933e:	f7f7 fb2b 	bl	8000998 <__aeabi_dcmpeq>
 8009342:	b138      	cbz	r0, 8009354 <_gcvt+0x44>
 8009344:	2330      	movs	r3, #48	@ 0x30
 8009346:	702b      	strb	r3, [r5, #0]
 8009348:	2300      	movs	r3, #0
 800934a:	706b      	strb	r3, [r5, #1]
 800934c:	4628      	mov	r0, r5
 800934e:	b00b      	add	sp, #44	@ 0x2c
 8009350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009354:	4640      	mov	r0, r8
 8009356:	a34e      	add	r3, pc, #312	@ (adr r3, 8009490 <_gcvt+0x180>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	4649      	mov	r1, r9
 800935e:	f7f7 fb2f 	bl	80009c0 <__aeabi_dcmple>
 8009362:	b160      	cbz	r0, 800937e <_gcvt+0x6e>
 8009364:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009368:	3c01      	subs	r4, #1
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	4629      	mov	r1, r5
 8009372:	4638      	mov	r0, r7
 8009374:	9602      	str	r6, [sp, #8]
 8009376:	9400      	str	r4, [sp, #0]
 8009378:	f7ff ff52 	bl	8009220 <print_e>
 800937c:	e7e6      	b.n	800934c <_gcvt+0x3c>
 800937e:	4620      	mov	r0, r4
 8009380:	f001 fb0a 	bl	800a998 <_mprec_log10>
 8009384:	4642      	mov	r2, r8
 8009386:	464b      	mov	r3, r9
 8009388:	f7f7 fb1a 	bl	80009c0 <__aeabi_dcmple>
 800938c:	2800      	cmp	r0, #0
 800938e:	d1e9      	bne.n	8009364 <_gcvt+0x54>
 8009390:	ab09      	add	r3, sp, #36	@ 0x24
 8009392:	9304      	str	r3, [sp, #16]
 8009394:	ab08      	add	r3, sp, #32
 8009396:	9303      	str	r3, [sp, #12]
 8009398:	ab07      	add	r3, sp, #28
 800939a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800939e:	2302      	movs	r3, #2
 80093a0:	4642      	mov	r2, r8
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4638      	mov	r0, r7
 80093a6:	464b      	mov	r3, r9
 80093a8:	f000 f9ae 	bl	8009708 <_dtoa_r>
 80093ac:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093b0:	9a07      	ldr	r2, [sp, #28]
 80093b2:	4601      	mov	r1, r0
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d00d      	beq.n	80093d4 <_gcvt+0xc4>
 80093b8:	462b      	mov	r3, r5
 80093ba:	460f      	mov	r7, r1
 80093bc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80093c0:	9a07      	ldr	r2, [sp, #28]
 80093c2:	b108      	cbz	r0, 80093c8 <_gcvt+0xb8>
 80093c4:	2a00      	cmp	r2, #0
 80093c6:	dc09      	bgt.n	80093dc <_gcvt+0xcc>
 80093c8:	1928      	adds	r0, r5, r4
 80093ca:	2100      	movs	r1, #0
 80093cc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80093d0:	1ac0      	subs	r0, r0, r3
 80093d2:	e00c      	b.n	80093ee <_gcvt+0xde>
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 f907 	bl	80095e8 <strcpy>
 80093da:	e7b7      	b.n	800934c <_gcvt+0x3c>
 80093dc:	3a01      	subs	r2, #1
 80093de:	f803 0b01 	strb.w	r0, [r3], #1
 80093e2:	9207      	str	r2, [sp, #28]
 80093e4:	e7e9      	b.n	80093ba <_gcvt+0xaa>
 80093e6:	2101      	movs	r1, #1
 80093e8:	f803 cb01 	strb.w	ip, [r3], #1
 80093ec:	3801      	subs	r0, #1
 80093ee:	2a00      	cmp	r2, #0
 80093f0:	4614      	mov	r4, r2
 80093f2:	dc2e      	bgt.n	8009452 <_gcvt+0x142>
 80093f4:	b101      	cbz	r1, 80093f8 <_gcvt+0xe8>
 80093f6:	9207      	str	r2, [sp, #28]
 80093f8:	b90e      	cbnz	r6, 80093fe <_gcvt+0xee>
 80093fa:	783a      	ldrb	r2, [r7, #0]
 80093fc:	b332      	cbz	r2, 800944c <_gcvt+0x13c>
 80093fe:	42ab      	cmp	r3, r5
 8009400:	bf04      	itt	eq
 8009402:	2230      	moveq	r2, #48	@ 0x30
 8009404:	f803 2b01 	strbeq.w	r2, [r3], #1
 8009408:	222e      	movs	r2, #46	@ 0x2e
 800940a:	4619      	mov	r1, r3
 800940c:	f04f 0c00 	mov.w	ip, #0
 8009410:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	9a07      	ldr	r2, [sp, #28]
 8009418:	1ad4      	subs	r4, r2, r3
 800941a:	42cc      	cmn	r4, r1
 800941c:	d421      	bmi.n	8009462 <_gcvt+0x152>
 800941e:	2a00      	cmp	r2, #0
 8009420:	f1c2 0100 	rsb	r1, r2, #0
 8009424:	bfd4      	ite	le
 8009426:	460c      	movle	r4, r1
 8009428:	2400      	movgt	r4, #0
 800942a:	3401      	adds	r4, #1
 800942c:	4423      	add	r3, r4
 800942e:	f1bc 0f00 	cmp.w	ip, #0
 8009432:	d004      	beq.n	800943e <_gcvt+0x12e>
 8009434:	2a00      	cmp	r2, #0
 8009436:	bfc8      	it	gt
 8009438:	2100      	movgt	r1, #0
 800943a:	440a      	add	r2, r1
 800943c:	9207      	str	r2, [sp, #28]
 800943e:	1e7a      	subs	r2, r7, #1
 8009440:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009444:	b109      	cbz	r1, 800944a <_gcvt+0x13a>
 8009446:	2800      	cmp	r0, #0
 8009448:	dc10      	bgt.n	800946c <_gcvt+0x15c>
 800944a:	b9e6      	cbnz	r6, 8009486 <_gcvt+0x176>
 800944c:	2200      	movs	r2, #0
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	e77c      	b.n	800934c <_gcvt+0x3c>
 8009452:	2800      	cmp	r0, #0
 8009454:	f102 32ff 	add.w	r2, r2, #4294967295
 8009458:	dcc5      	bgt.n	80093e6 <_gcvt+0xd6>
 800945a:	2900      	cmp	r1, #0
 800945c:	d0cc      	beq.n	80093f8 <_gcvt+0xe8>
 800945e:	9407      	str	r4, [sp, #28]
 8009460:	e7ca      	b.n	80093f8 <_gcvt+0xe8>
 8009462:	f04f 0c01 	mov.w	ip, #1
 8009466:	f801 ef01 	strb.w	lr, [r1, #1]!
 800946a:	e7d6      	b.n	800941a <_gcvt+0x10a>
 800946c:	f803 1b01 	strb.w	r1, [r3], #1
 8009470:	3801      	subs	r0, #1
 8009472:	e7e5      	b.n	8009440 <_gcvt+0x130>
 8009474:	f802 6b01 	strb.w	r6, [r2], #1
 8009478:	1aa1      	subs	r1, r4, r2
 800947a:	2900      	cmp	r1, #0
 800947c:	dcfa      	bgt.n	8009474 <_gcvt+0x164>
 800947e:	2800      	cmp	r0, #0
 8009480:	bfa8      	it	ge
 8009482:	181b      	addge	r3, r3, r0
 8009484:	e7e2      	b.n	800944c <_gcvt+0x13c>
 8009486:	461a      	mov	r2, r3
 8009488:	2630      	movs	r6, #48	@ 0x30
 800948a:	181c      	adds	r4, r3, r0
 800948c:	e7f4      	b.n	8009478 <_gcvt+0x168>
 800948e:	bf00      	nop
 8009490:	eb1c432d 	.word	0xeb1c432d
 8009494:	3f1a36e2 	.word	0x3f1a36e2

08009498 <__sflush_r>:
 8009498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	0716      	lsls	r6, r2, #28
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	d454      	bmi.n	8009550 <__sflush_r+0xb8>
 80094a6:	684b      	ldr	r3, [r1, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc02      	bgt.n	80094b2 <__sflush_r+0x1a>
 80094ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dd48      	ble.n	8009544 <__sflush_r+0xac>
 80094b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	d045      	beq.n	8009544 <__sflush_r+0xac>
 80094b8:	2300      	movs	r3, #0
 80094ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094be:	682f      	ldr	r7, [r5, #0]
 80094c0:	6a21      	ldr	r1, [r4, #32]
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	d030      	beq.n	8009528 <__sflush_r+0x90>
 80094c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	0759      	lsls	r1, r3, #29
 80094cc:	d505      	bpl.n	80094da <__sflush_r+0x42>
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	1ad2      	subs	r2, r2, r3
 80094d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094d4:	b10b      	cbz	r3, 80094da <__sflush_r+0x42>
 80094d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094d8:	1ad2      	subs	r2, r2, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	4628      	mov	r0, r5
 80094de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094e0:	6a21      	ldr	r1, [r4, #32]
 80094e2:	47b0      	blx	r6
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	d106      	bne.n	80094f8 <__sflush_r+0x60>
 80094ea:	6829      	ldr	r1, [r5, #0]
 80094ec:	291d      	cmp	r1, #29
 80094ee:	d82b      	bhi.n	8009548 <__sflush_r+0xb0>
 80094f0:	4a28      	ldr	r2, [pc, #160]	@ (8009594 <__sflush_r+0xfc>)
 80094f2:	410a      	asrs	r2, r1
 80094f4:	07d6      	lsls	r6, r2, #31
 80094f6:	d427      	bmi.n	8009548 <__sflush_r+0xb0>
 80094f8:	2200      	movs	r2, #0
 80094fa:	6062      	str	r2, [r4, #4]
 80094fc:	6922      	ldr	r2, [r4, #16]
 80094fe:	04d9      	lsls	r1, r3, #19
 8009500:	6022      	str	r2, [r4, #0]
 8009502:	d504      	bpl.n	800950e <__sflush_r+0x76>
 8009504:	1c42      	adds	r2, r0, #1
 8009506:	d101      	bne.n	800950c <__sflush_r+0x74>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b903      	cbnz	r3, 800950e <__sflush_r+0x76>
 800950c:	6560      	str	r0, [r4, #84]	@ 0x54
 800950e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009510:	602f      	str	r7, [r5, #0]
 8009512:	b1b9      	cbz	r1, 8009544 <__sflush_r+0xac>
 8009514:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009518:	4299      	cmp	r1, r3
 800951a:	d002      	beq.n	8009522 <__sflush_r+0x8a>
 800951c:	4628      	mov	r0, r5
 800951e:	f7ff fe37 	bl	8009190 <_free_r>
 8009522:	2300      	movs	r3, #0
 8009524:	6363      	str	r3, [r4, #52]	@ 0x34
 8009526:	e00d      	b.n	8009544 <__sflush_r+0xac>
 8009528:	2301      	movs	r3, #1
 800952a:	4628      	mov	r0, r5
 800952c:	47b0      	blx	r6
 800952e:	4602      	mov	r2, r0
 8009530:	1c50      	adds	r0, r2, #1
 8009532:	d1c9      	bne.n	80094c8 <__sflush_r+0x30>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0c6      	beq.n	80094c8 <__sflush_r+0x30>
 800953a:	2b1d      	cmp	r3, #29
 800953c:	d001      	beq.n	8009542 <__sflush_r+0xaa>
 800953e:	2b16      	cmp	r3, #22
 8009540:	d11d      	bne.n	800957e <__sflush_r+0xe6>
 8009542:	602f      	str	r7, [r5, #0]
 8009544:	2000      	movs	r0, #0
 8009546:	e021      	b.n	800958c <__sflush_r+0xf4>
 8009548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800954c:	b21b      	sxth	r3, r3
 800954e:	e01a      	b.n	8009586 <__sflush_r+0xee>
 8009550:	690f      	ldr	r7, [r1, #16]
 8009552:	2f00      	cmp	r7, #0
 8009554:	d0f6      	beq.n	8009544 <__sflush_r+0xac>
 8009556:	0793      	lsls	r3, r2, #30
 8009558:	bf18      	it	ne
 800955a:	2300      	movne	r3, #0
 800955c:	680e      	ldr	r6, [r1, #0]
 800955e:	bf08      	it	eq
 8009560:	694b      	ldreq	r3, [r1, #20]
 8009562:	1bf6      	subs	r6, r6, r7
 8009564:	600f      	str	r7, [r1, #0]
 8009566:	608b      	str	r3, [r1, #8]
 8009568:	2e00      	cmp	r6, #0
 800956a:	ddeb      	ble.n	8009544 <__sflush_r+0xac>
 800956c:	4633      	mov	r3, r6
 800956e:	463a      	mov	r2, r7
 8009570:	4628      	mov	r0, r5
 8009572:	6a21      	ldr	r1, [r4, #32]
 8009574:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009578:	47e0      	blx	ip
 800957a:	2800      	cmp	r0, #0
 800957c:	dc07      	bgt.n	800958e <__sflush_r+0xf6>
 800957e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009586:	f04f 30ff 	mov.w	r0, #4294967295
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800958e:	4407      	add	r7, r0
 8009590:	1a36      	subs	r6, r6, r0
 8009592:	e7e9      	b.n	8009568 <__sflush_r+0xd0>
 8009594:	dfbffffe 	.word	0xdfbffffe

08009598 <_fflush_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	690b      	ldr	r3, [r1, #16]
 800959c:	4605      	mov	r5, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	b913      	cbnz	r3, 80095a8 <_fflush_r+0x10>
 80095a2:	2500      	movs	r5, #0
 80095a4:	4628      	mov	r0, r5
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	b118      	cbz	r0, 80095b2 <_fflush_r+0x1a>
 80095aa:	6a03      	ldr	r3, [r0, #32]
 80095ac:	b90b      	cbnz	r3, 80095b2 <_fflush_r+0x1a>
 80095ae:	f7ff fc85 	bl	8008ebc <__sinit>
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0f3      	beq.n	80095a2 <_fflush_r+0xa>
 80095ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095bc:	07d0      	lsls	r0, r2, #31
 80095be:	d404      	bmi.n	80095ca <_fflush_r+0x32>
 80095c0:	0599      	lsls	r1, r3, #22
 80095c2:	d402      	bmi.n	80095ca <_fflush_r+0x32>
 80095c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095c6:	f7ff fdd2 	bl	800916e <__retarget_lock_acquire_recursive>
 80095ca:	4628      	mov	r0, r5
 80095cc:	4621      	mov	r1, r4
 80095ce:	f7ff ff63 	bl	8009498 <__sflush_r>
 80095d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095d4:	4605      	mov	r5, r0
 80095d6:	07da      	lsls	r2, r3, #31
 80095d8:	d4e4      	bmi.n	80095a4 <_fflush_r+0xc>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	059b      	lsls	r3, r3, #22
 80095de:	d4e1      	bmi.n	80095a4 <_fflush_r+0xc>
 80095e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095e2:	f7ff fdc5 	bl	8009170 <__retarget_lock_release_recursive>
 80095e6:	e7dd      	b.n	80095a4 <_fflush_r+0xc>

080095e8 <strcpy>:
 80095e8:	4603      	mov	r3, r0
 80095ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ee:	f803 2b01 	strb.w	r2, [r3], #1
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d1f9      	bne.n	80095ea <strcpy+0x2>
 80095f6:	4770      	bx	lr

080095f8 <quorem>:
 80095f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	6903      	ldr	r3, [r0, #16]
 80095fe:	690c      	ldr	r4, [r1, #16]
 8009600:	4607      	mov	r7, r0
 8009602:	42a3      	cmp	r3, r4
 8009604:	db7e      	blt.n	8009704 <quorem+0x10c>
 8009606:	3c01      	subs	r4, #1
 8009608:	00a3      	lsls	r3, r4, #2
 800960a:	f100 0514 	add.w	r5, r0, #20
 800960e:	f101 0814 	add.w	r8, r1, #20
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800961e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009622:	3301      	adds	r3, #1
 8009624:	429a      	cmp	r2, r3
 8009626:	fbb2 f6f3 	udiv	r6, r2, r3
 800962a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800962e:	d32e      	bcc.n	800968e <quorem+0x96>
 8009630:	f04f 0a00 	mov.w	sl, #0
 8009634:	46c4      	mov	ip, r8
 8009636:	46ae      	mov	lr, r5
 8009638:	46d3      	mov	fp, sl
 800963a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800963e:	b298      	uxth	r0, r3
 8009640:	fb06 a000 	mla	r0, r6, r0, sl
 8009644:	0c1b      	lsrs	r3, r3, #16
 8009646:	0c02      	lsrs	r2, r0, #16
 8009648:	fb06 2303 	mla	r3, r6, r3, r2
 800964c:	f8de 2000 	ldr.w	r2, [lr]
 8009650:	b280      	uxth	r0, r0
 8009652:	b292      	uxth	r2, r2
 8009654:	1a12      	subs	r2, r2, r0
 8009656:	445a      	add	r2, fp
 8009658:	f8de 0000 	ldr.w	r0, [lr]
 800965c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009660:	b29b      	uxth	r3, r3
 8009662:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009666:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800966a:	b292      	uxth	r2, r2
 800966c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009670:	45e1      	cmp	r9, ip
 8009672:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009676:	f84e 2b04 	str.w	r2, [lr], #4
 800967a:	d2de      	bcs.n	800963a <quorem+0x42>
 800967c:	9b00      	ldr	r3, [sp, #0]
 800967e:	58eb      	ldr	r3, [r5, r3]
 8009680:	b92b      	cbnz	r3, 800968e <quorem+0x96>
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	3b04      	subs	r3, #4
 8009686:	429d      	cmp	r5, r3
 8009688:	461a      	mov	r2, r3
 800968a:	d32f      	bcc.n	80096ec <quorem+0xf4>
 800968c:	613c      	str	r4, [r7, #16]
 800968e:	4638      	mov	r0, r7
 8009690:	f001 f87a 	bl	800a788 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	db25      	blt.n	80096e4 <quorem+0xec>
 8009698:	4629      	mov	r1, r5
 800969a:	2000      	movs	r0, #0
 800969c:	f858 2b04 	ldr.w	r2, [r8], #4
 80096a0:	f8d1 c000 	ldr.w	ip, [r1]
 80096a4:	fa1f fe82 	uxth.w	lr, r2
 80096a8:	fa1f f38c 	uxth.w	r3, ip
 80096ac:	eba3 030e 	sub.w	r3, r3, lr
 80096b0:	4403      	add	r3, r0
 80096b2:	0c12      	lsrs	r2, r2, #16
 80096b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096bc:	b29b      	uxth	r3, r3
 80096be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096c2:	45c1      	cmp	r9, r8
 80096c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096c8:	f841 3b04 	str.w	r3, [r1], #4
 80096cc:	d2e6      	bcs.n	800969c <quorem+0xa4>
 80096ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096d6:	b922      	cbnz	r2, 80096e2 <quorem+0xea>
 80096d8:	3b04      	subs	r3, #4
 80096da:	429d      	cmp	r5, r3
 80096dc:	461a      	mov	r2, r3
 80096de:	d30b      	bcc.n	80096f8 <quorem+0x100>
 80096e0:	613c      	str	r4, [r7, #16]
 80096e2:	3601      	adds	r6, #1
 80096e4:	4630      	mov	r0, r6
 80096e6:	b003      	add	sp, #12
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ec:	6812      	ldr	r2, [r2, #0]
 80096ee:	3b04      	subs	r3, #4
 80096f0:	2a00      	cmp	r2, #0
 80096f2:	d1cb      	bne.n	800968c <quorem+0x94>
 80096f4:	3c01      	subs	r4, #1
 80096f6:	e7c6      	b.n	8009686 <quorem+0x8e>
 80096f8:	6812      	ldr	r2, [r2, #0]
 80096fa:	3b04      	subs	r3, #4
 80096fc:	2a00      	cmp	r2, #0
 80096fe:	d1ef      	bne.n	80096e0 <quorem+0xe8>
 8009700:	3c01      	subs	r4, #1
 8009702:	e7ea      	b.n	80096da <quorem+0xe2>
 8009704:	2000      	movs	r0, #0
 8009706:	e7ee      	b.n	80096e6 <quorem+0xee>

08009708 <_dtoa_r>:
 8009708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970c:	4614      	mov	r4, r2
 800970e:	461d      	mov	r5, r3
 8009710:	69c7      	ldr	r7, [r0, #28]
 8009712:	b097      	sub	sp, #92	@ 0x5c
 8009714:	4683      	mov	fp, r0
 8009716:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800971a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800971c:	b97f      	cbnz	r7, 800973e <_dtoa_r+0x36>
 800971e:	2010      	movs	r0, #16
 8009720:	f7ff fa5e 	bl	8008be0 <malloc>
 8009724:	4602      	mov	r2, r0
 8009726:	f8cb 001c 	str.w	r0, [fp, #28]
 800972a:	b920      	cbnz	r0, 8009736 <_dtoa_r+0x2e>
 800972c:	21ef      	movs	r1, #239	@ 0xef
 800972e:	4ba8      	ldr	r3, [pc, #672]	@ (80099d0 <_dtoa_r+0x2c8>)
 8009730:	48a8      	ldr	r0, [pc, #672]	@ (80099d4 <_dtoa_r+0x2cc>)
 8009732:	f001 f94d 	bl	800a9d0 <__assert_func>
 8009736:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800973a:	6007      	str	r7, [r0, #0]
 800973c:	60c7      	str	r7, [r0, #12]
 800973e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	b159      	cbz	r1, 800975e <_dtoa_r+0x56>
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	2301      	movs	r3, #1
 800974a:	4093      	lsls	r3, r2
 800974c:	604a      	str	r2, [r1, #4]
 800974e:	608b      	str	r3, [r1, #8]
 8009750:	4658      	mov	r0, fp
 8009752:	f000 fde1 	bl	800a318 <_Bfree>
 8009756:	2200      	movs	r2, #0
 8009758:	f8db 301c 	ldr.w	r3, [fp, #28]
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	1e2b      	subs	r3, r5, #0
 8009760:	bfaf      	iteee	ge
 8009762:	2300      	movge	r3, #0
 8009764:	2201      	movlt	r2, #1
 8009766:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800976a:	9303      	strlt	r3, [sp, #12]
 800976c:	bfa8      	it	ge
 800976e:	6033      	strge	r3, [r6, #0]
 8009770:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009774:	4b98      	ldr	r3, [pc, #608]	@ (80099d8 <_dtoa_r+0x2d0>)
 8009776:	bfb8      	it	lt
 8009778:	6032      	strlt	r2, [r6, #0]
 800977a:	ea33 0308 	bics.w	r3, r3, r8
 800977e:	d112      	bne.n	80097a6 <_dtoa_r+0x9e>
 8009780:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009784:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800978c:	4323      	orrs	r3, r4
 800978e:	f000 8550 	beq.w	800a232 <_dtoa_r+0xb2a>
 8009792:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009794:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80099dc <_dtoa_r+0x2d4>
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 8552 	beq.w	800a242 <_dtoa_r+0xb3a>
 800979e:	f10a 0303 	add.w	r3, sl, #3
 80097a2:	f000 bd4c 	b.w	800a23e <_dtoa_r+0xb36>
 80097a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	f7f7 f8ef 	bl	8000998 <__aeabi_dcmpeq>
 80097ba:	4607      	mov	r7, r0
 80097bc:	b158      	cbz	r0, 80097d6 <_dtoa_r+0xce>
 80097be:	2301      	movs	r3, #1
 80097c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80097c6:	b113      	cbz	r3, 80097ce <_dtoa_r+0xc6>
 80097c8:	4b85      	ldr	r3, [pc, #532]	@ (80099e0 <_dtoa_r+0x2d8>)
 80097ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80099e4 <_dtoa_r+0x2dc>
 80097d2:	f000 bd36 	b.w	800a242 <_dtoa_r+0xb3a>
 80097d6:	ab14      	add	r3, sp, #80	@ 0x50
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	ab15      	add	r3, sp, #84	@ 0x54
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	4658      	mov	r0, fp
 80097e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80097e4:	f001 f880 	bl	800a8e8 <__d2b>
 80097e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80097ec:	4681      	mov	r9, r0
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	d077      	beq.n	80098e2 <_dtoa_r+0x1da>
 80097f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80097fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009800:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009804:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009808:	9712      	str	r7, [sp, #72]	@ 0x48
 800980a:	4619      	mov	r1, r3
 800980c:	2200      	movs	r2, #0
 800980e:	4b76      	ldr	r3, [pc, #472]	@ (80099e8 <_dtoa_r+0x2e0>)
 8009810:	f7f6 fca2 	bl	8000158 <__aeabi_dsub>
 8009814:	a368      	add	r3, pc, #416	@ (adr r3, 80099b8 <_dtoa_r+0x2b0>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fe55 	bl	80004c8 <__aeabi_dmul>
 800981e:	a368      	add	r3, pc, #416	@ (adr r3, 80099c0 <_dtoa_r+0x2b8>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f7f6 fc9a 	bl	800015c <__adddf3>
 8009828:	4604      	mov	r4, r0
 800982a:	4630      	mov	r0, r6
 800982c:	460d      	mov	r5, r1
 800982e:	f7f6 fde1 	bl	80003f4 <__aeabi_i2d>
 8009832:	a365      	add	r3, pc, #404	@ (adr r3, 80099c8 <_dtoa_r+0x2c0>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f6 fe46 	bl	80004c8 <__aeabi_dmul>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7f6 fc8a 	bl	800015c <__adddf3>
 8009848:	4604      	mov	r4, r0
 800984a:	460d      	mov	r5, r1
 800984c:	f7f7 f8ec 	bl	8000a28 <__aeabi_d2iz>
 8009850:	2200      	movs	r2, #0
 8009852:	4607      	mov	r7, r0
 8009854:	2300      	movs	r3, #0
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f7 f8a7 	bl	80009ac <__aeabi_dcmplt>
 800985e:	b140      	cbz	r0, 8009872 <_dtoa_r+0x16a>
 8009860:	4638      	mov	r0, r7
 8009862:	f7f6 fdc7 	bl	80003f4 <__aeabi_i2d>
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	f7f7 f895 	bl	8000998 <__aeabi_dcmpeq>
 800986e:	b900      	cbnz	r0, 8009872 <_dtoa_r+0x16a>
 8009870:	3f01      	subs	r7, #1
 8009872:	2f16      	cmp	r7, #22
 8009874:	d853      	bhi.n	800991e <_dtoa_r+0x216>
 8009876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800987a:	4b5c      	ldr	r3, [pc, #368]	@ (80099ec <_dtoa_r+0x2e4>)
 800987c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f7f7 f892 	bl	80009ac <__aeabi_dcmplt>
 8009888:	2800      	cmp	r0, #0
 800988a:	d04a      	beq.n	8009922 <_dtoa_r+0x21a>
 800988c:	2300      	movs	r3, #0
 800988e:	3f01      	subs	r7, #1
 8009890:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009892:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009894:	1b9b      	subs	r3, r3, r6
 8009896:	1e5a      	subs	r2, r3, #1
 8009898:	bf46      	itte	mi
 800989a:	f1c3 0801 	rsbmi	r8, r3, #1
 800989e:	2300      	movmi	r3, #0
 80098a0:	f04f 0800 	movpl.w	r8, #0
 80098a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80098a6:	bf48      	it	mi
 80098a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80098aa:	2f00      	cmp	r7, #0
 80098ac:	db3b      	blt.n	8009926 <_dtoa_r+0x21e>
 80098ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80098b2:	443b      	add	r3, r7
 80098b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b6:	2300      	movs	r3, #0
 80098b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80098ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80098bc:	2b09      	cmp	r3, #9
 80098be:	d866      	bhi.n	800998e <_dtoa_r+0x286>
 80098c0:	2b05      	cmp	r3, #5
 80098c2:	bfc4      	itt	gt
 80098c4:	3b04      	subgt	r3, #4
 80098c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80098c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80098ca:	bfc8      	it	gt
 80098cc:	2400      	movgt	r4, #0
 80098ce:	f1a3 0302 	sub.w	r3, r3, #2
 80098d2:	bfd8      	it	le
 80098d4:	2401      	movle	r4, #1
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d864      	bhi.n	80099a4 <_dtoa_r+0x29c>
 80098da:	e8df f003 	tbb	[pc, r3]
 80098de:	382b      	.short	0x382b
 80098e0:	5636      	.short	0x5636
 80098e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80098e6:	441e      	add	r6, r3
 80098e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80098ec:	2b20      	cmp	r3, #32
 80098ee:	bfc1      	itttt	gt
 80098f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80098f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80098f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80098fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009900:	bfd6      	itet	le
 8009902:	f1c3 0320 	rsble	r3, r3, #32
 8009906:	ea48 0003 	orrgt.w	r0, r8, r3
 800990a:	fa04 f003 	lslle.w	r0, r4, r3
 800990e:	f7f6 fd61 	bl	80003d4 <__aeabi_ui2d>
 8009912:	2201      	movs	r2, #1
 8009914:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009918:	3e01      	subs	r6, #1
 800991a:	9212      	str	r2, [sp, #72]	@ 0x48
 800991c:	e775      	b.n	800980a <_dtoa_r+0x102>
 800991e:	2301      	movs	r3, #1
 8009920:	e7b6      	b.n	8009890 <_dtoa_r+0x188>
 8009922:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009924:	e7b5      	b.n	8009892 <_dtoa_r+0x18a>
 8009926:	427b      	negs	r3, r7
 8009928:	930a      	str	r3, [sp, #40]	@ 0x28
 800992a:	2300      	movs	r3, #0
 800992c:	eba8 0807 	sub.w	r8, r8, r7
 8009930:	930e      	str	r3, [sp, #56]	@ 0x38
 8009932:	e7c2      	b.n	80098ba <_dtoa_r+0x1b2>
 8009934:	2300      	movs	r3, #0
 8009936:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009938:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800993a:	2b00      	cmp	r3, #0
 800993c:	dc35      	bgt.n	80099aa <_dtoa_r+0x2a2>
 800993e:	2301      	movs	r3, #1
 8009940:	461a      	mov	r2, r3
 8009942:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009946:	9221      	str	r2, [sp, #132]	@ 0x84
 8009948:	e00b      	b.n	8009962 <_dtoa_r+0x25a>
 800994a:	2301      	movs	r3, #1
 800994c:	e7f3      	b.n	8009936 <_dtoa_r+0x22e>
 800994e:	2300      	movs	r3, #0
 8009950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009952:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	9308      	str	r3, [sp, #32]
 8009958:	3301      	adds	r3, #1
 800995a:	2b01      	cmp	r3, #1
 800995c:	9307      	str	r3, [sp, #28]
 800995e:	bfb8      	it	lt
 8009960:	2301      	movlt	r3, #1
 8009962:	2100      	movs	r1, #0
 8009964:	2204      	movs	r2, #4
 8009966:	f8db 001c 	ldr.w	r0, [fp, #28]
 800996a:	f102 0514 	add.w	r5, r2, #20
 800996e:	429d      	cmp	r5, r3
 8009970:	d91f      	bls.n	80099b2 <_dtoa_r+0x2aa>
 8009972:	6041      	str	r1, [r0, #4]
 8009974:	4658      	mov	r0, fp
 8009976:	f000 fc8f 	bl	800a298 <_Balloc>
 800997a:	4682      	mov	sl, r0
 800997c:	2800      	cmp	r0, #0
 800997e:	d139      	bne.n	80099f4 <_dtoa_r+0x2ec>
 8009980:	4602      	mov	r2, r0
 8009982:	f240 11af 	movw	r1, #431	@ 0x1af
 8009986:	4b1a      	ldr	r3, [pc, #104]	@ (80099f0 <_dtoa_r+0x2e8>)
 8009988:	e6d2      	b.n	8009730 <_dtoa_r+0x28>
 800998a:	2301      	movs	r3, #1
 800998c:	e7e0      	b.n	8009950 <_dtoa_r+0x248>
 800998e:	2401      	movs	r4, #1
 8009990:	2300      	movs	r3, #0
 8009992:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009994:	9320      	str	r3, [sp, #128]	@ 0x80
 8009996:	f04f 33ff 	mov.w	r3, #4294967295
 800999a:	2200      	movs	r2, #0
 800999c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80099a0:	2312      	movs	r3, #18
 80099a2:	e7d0      	b.n	8009946 <_dtoa_r+0x23e>
 80099a4:	2301      	movs	r3, #1
 80099a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099a8:	e7f5      	b.n	8009996 <_dtoa_r+0x28e>
 80099aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80099b0:	e7d7      	b.n	8009962 <_dtoa_r+0x25a>
 80099b2:	3101      	adds	r1, #1
 80099b4:	0052      	lsls	r2, r2, #1
 80099b6:	e7d8      	b.n	800996a <_dtoa_r+0x262>
 80099b8:	636f4361 	.word	0x636f4361
 80099bc:	3fd287a7 	.word	0x3fd287a7
 80099c0:	8b60c8b3 	.word	0x8b60c8b3
 80099c4:	3fc68a28 	.word	0x3fc68a28
 80099c8:	509f79fb 	.word	0x509f79fb
 80099cc:	3fd34413 	.word	0x3fd34413
 80099d0:	0800c093 	.word	0x0800c093
 80099d4:	0800c0aa 	.word	0x0800c0aa
 80099d8:	7ff00000 	.word	0x7ff00000
 80099dc:	0800c08d 	.word	0x0800c08d
 80099e0:	0800c092 	.word	0x0800c092
 80099e4:	0800c091 	.word	0x0800c091
 80099e8:	3ff80000 	.word	0x3ff80000
 80099ec:	0800c1a0 	.word	0x0800c1a0
 80099f0:	0800c102 	.word	0x0800c102
 80099f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099f8:	6018      	str	r0, [r3, #0]
 80099fa:	9b07      	ldr	r3, [sp, #28]
 80099fc:	2b0e      	cmp	r3, #14
 80099fe:	f200 80a4 	bhi.w	8009b4a <_dtoa_r+0x442>
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	f000 80a1 	beq.w	8009b4a <_dtoa_r+0x442>
 8009a08:	2f00      	cmp	r7, #0
 8009a0a:	dd33      	ble.n	8009a74 <_dtoa_r+0x36c>
 8009a0c:	4b86      	ldr	r3, [pc, #536]	@ (8009c28 <_dtoa_r+0x520>)
 8009a0e:	f007 020f 	and.w	r2, r7, #15
 8009a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a16:	05f8      	lsls	r0, r7, #23
 8009a18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a24:	d516      	bpl.n	8009a54 <_dtoa_r+0x34c>
 8009a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a2a:	4b80      	ldr	r3, [pc, #512]	@ (8009c2c <_dtoa_r+0x524>)
 8009a2c:	2603      	movs	r6, #3
 8009a2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a32:	f7f6 fe73 	bl	800071c <__aeabi_ddiv>
 8009a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a3a:	f004 040f 	and.w	r4, r4, #15
 8009a3e:	4d7b      	ldr	r5, [pc, #492]	@ (8009c2c <_dtoa_r+0x524>)
 8009a40:	b954      	cbnz	r4, 8009a58 <_dtoa_r+0x350>
 8009a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4a:	f7f6 fe67 	bl	800071c <__aeabi_ddiv>
 8009a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a52:	e028      	b.n	8009aa6 <_dtoa_r+0x39e>
 8009a54:	2602      	movs	r6, #2
 8009a56:	e7f2      	b.n	8009a3e <_dtoa_r+0x336>
 8009a58:	07e1      	lsls	r1, r4, #31
 8009a5a:	d508      	bpl.n	8009a6e <_dtoa_r+0x366>
 8009a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a64:	f7f6 fd30 	bl	80004c8 <__aeabi_dmul>
 8009a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	1064      	asrs	r4, r4, #1
 8009a70:	3508      	adds	r5, #8
 8009a72:	e7e5      	b.n	8009a40 <_dtoa_r+0x338>
 8009a74:	f000 80d2 	beq.w	8009c1c <_dtoa_r+0x514>
 8009a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a7c:	427c      	negs	r4, r7
 8009a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8009c28 <_dtoa_r+0x520>)
 8009a80:	f004 020f 	and.w	r2, r4, #15
 8009a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fd1c 	bl	80004c8 <__aeabi_dmul>
 8009a90:	2602      	movs	r6, #2
 8009a92:	2300      	movs	r3, #0
 8009a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a98:	4d64      	ldr	r5, [pc, #400]	@ (8009c2c <_dtoa_r+0x524>)
 8009a9a:	1124      	asrs	r4, r4, #4
 8009a9c:	2c00      	cmp	r4, #0
 8009a9e:	f040 80b2 	bne.w	8009c06 <_dtoa_r+0x4fe>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1d3      	bne.n	8009a4e <_dtoa_r+0x346>
 8009aa6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009aaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 80b7 	beq.w	8009c20 <_dtoa_r+0x518>
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8009c30 <_dtoa_r+0x528>)
 8009aba:	f7f6 ff77 	bl	80009ac <__aeabi_dcmplt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f000 80ae 	beq.w	8009c20 <_dtoa_r+0x518>
 8009ac4:	9b07      	ldr	r3, [sp, #28]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 80aa 	beq.w	8009c20 <_dtoa_r+0x518>
 8009acc:	9b08      	ldr	r3, [sp, #32]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	dd37      	ble.n	8009b42 <_dtoa_r+0x43a>
 8009ad2:	1e7b      	subs	r3, r7, #1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	9304      	str	r3, [sp, #16]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4629      	mov	r1, r5
 8009adc:	4b55      	ldr	r3, [pc, #340]	@ (8009c34 <_dtoa_r+0x52c>)
 8009ade:	f7f6 fcf3 	bl	80004c8 <__aeabi_dmul>
 8009ae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ae6:	9c08      	ldr	r4, [sp, #32]
 8009ae8:	3601      	adds	r6, #1
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7f6 fc82 	bl	80003f4 <__aeabi_i2d>
 8009af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009af4:	f7f6 fce8 	bl	80004c8 <__aeabi_dmul>
 8009af8:	2200      	movs	r2, #0
 8009afa:	4b4f      	ldr	r3, [pc, #316]	@ (8009c38 <_dtoa_r+0x530>)
 8009afc:	f7f6 fb2e 	bl	800015c <__adddf3>
 8009b00:	4605      	mov	r5, r0
 8009b02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b06:	2c00      	cmp	r4, #0
 8009b08:	f040 809a 	bne.w	8009c40 <_dtoa_r+0x538>
 8009b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b10:	2200      	movs	r2, #0
 8009b12:	4b4a      	ldr	r3, [pc, #296]	@ (8009c3c <_dtoa_r+0x534>)
 8009b14:	f7f6 fb20 	bl	8000158 <__aeabi_dsub>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b20:	462a      	mov	r2, r5
 8009b22:	4633      	mov	r3, r6
 8009b24:	f7f6 ff60 	bl	80009e8 <__aeabi_dcmpgt>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f040 828e 	bne.w	800a04a <_dtoa_r+0x942>
 8009b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b32:	462a      	mov	r2, r5
 8009b34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b38:	f7f6 ff38 	bl	80009ac <__aeabi_dcmplt>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f040 8127 	bne.w	8009d90 <_dtoa_r+0x688>
 8009b42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f2c0 8163 	blt.w	8009e18 <_dtoa_r+0x710>
 8009b52:	2f0e      	cmp	r7, #14
 8009b54:	f300 8160 	bgt.w	8009e18 <_dtoa_r+0x710>
 8009b58:	4b33      	ldr	r3, [pc, #204]	@ (8009c28 <_dtoa_r+0x520>)
 8009b5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	da03      	bge.n	8009b74 <_dtoa_r+0x46c>
 8009b6c:	9b07      	ldr	r3, [sp, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f340 8100 	ble.w	8009d74 <_dtoa_r+0x66c>
 8009b74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b78:	4656      	mov	r6, sl
 8009b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	4629      	mov	r1, r5
 8009b82:	f7f6 fdcb 	bl	800071c <__aeabi_ddiv>
 8009b86:	f7f6 ff4f 	bl	8000a28 <__aeabi_d2iz>
 8009b8a:	4680      	mov	r8, r0
 8009b8c:	f7f6 fc32 	bl	80003f4 <__aeabi_i2d>
 8009b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b94:	f7f6 fc98 	bl	80004c8 <__aeabi_dmul>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f7f6 fada 	bl	8000158 <__aeabi_dsub>
 8009ba4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ba8:	9d07      	ldr	r5, [sp, #28]
 8009baa:	f806 4b01 	strb.w	r4, [r6], #1
 8009bae:	eba6 040a 	sub.w	r4, r6, sl
 8009bb2:	42a5      	cmp	r5, r4
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	f040 8116 	bne.w	8009de8 <_dtoa_r+0x6e0>
 8009bbc:	f7f6 face 	bl	800015c <__adddf3>
 8009bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	460d      	mov	r5, r1
 8009bc8:	f7f6 ff0e 	bl	80009e8 <__aeabi_dcmpgt>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	f040 80f8 	bne.w	8009dc2 <_dtoa_r+0x6ba>
 8009bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7f6 fedd 	bl	8000998 <__aeabi_dcmpeq>
 8009bde:	b118      	cbz	r0, 8009be8 <_dtoa_r+0x4e0>
 8009be0:	f018 0f01 	tst.w	r8, #1
 8009be4:	f040 80ed 	bne.w	8009dc2 <_dtoa_r+0x6ba>
 8009be8:	4649      	mov	r1, r9
 8009bea:	4658      	mov	r0, fp
 8009bec:	f000 fb94 	bl	800a318 <_Bfree>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	7033      	strb	r3, [r6, #0]
 8009bf4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009bf6:	3701      	adds	r7, #1
 8009bf8:	601f      	str	r7, [r3, #0]
 8009bfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 8320 	beq.w	800a242 <_dtoa_r+0xb3a>
 8009c02:	601e      	str	r6, [r3, #0]
 8009c04:	e31d      	b.n	800a242 <_dtoa_r+0xb3a>
 8009c06:	07e2      	lsls	r2, r4, #31
 8009c08:	d505      	bpl.n	8009c16 <_dtoa_r+0x50e>
 8009c0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c0e:	f7f6 fc5b 	bl	80004c8 <__aeabi_dmul>
 8009c12:	2301      	movs	r3, #1
 8009c14:	3601      	adds	r6, #1
 8009c16:	1064      	asrs	r4, r4, #1
 8009c18:	3508      	adds	r5, #8
 8009c1a:	e73f      	b.n	8009a9c <_dtoa_r+0x394>
 8009c1c:	2602      	movs	r6, #2
 8009c1e:	e742      	b.n	8009aa6 <_dtoa_r+0x39e>
 8009c20:	9c07      	ldr	r4, [sp, #28]
 8009c22:	9704      	str	r7, [sp, #16]
 8009c24:	e761      	b.n	8009aea <_dtoa_r+0x3e2>
 8009c26:	bf00      	nop
 8009c28:	0800c1a0 	.word	0x0800c1a0
 8009c2c:	0800c178 	.word	0x0800c178
 8009c30:	3ff00000 	.word	0x3ff00000
 8009c34:	40240000 	.word	0x40240000
 8009c38:	401c0000 	.word	0x401c0000
 8009c3c:	40140000 	.word	0x40140000
 8009c40:	4b70      	ldr	r3, [pc, #448]	@ (8009e04 <_dtoa_r+0x6fc>)
 8009c42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c4c:	4454      	add	r4, sl
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	d045      	beq.n	8009cde <_dtoa_r+0x5d6>
 8009c52:	2000      	movs	r0, #0
 8009c54:	496c      	ldr	r1, [pc, #432]	@ (8009e08 <_dtoa_r+0x700>)
 8009c56:	f7f6 fd61 	bl	800071c <__aeabi_ddiv>
 8009c5a:	4633      	mov	r3, r6
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	f7f6 fa7b 	bl	8000158 <__aeabi_dsub>
 8009c62:	4656      	mov	r6, sl
 8009c64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c6c:	f7f6 fedc 	bl	8000a28 <__aeabi_d2iz>
 8009c70:	4605      	mov	r5, r0
 8009c72:	f7f6 fbbf 	bl	80003f4 <__aeabi_i2d>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c7e:	f7f6 fa6b 	bl	8000158 <__aeabi_dsub>
 8009c82:	4602      	mov	r2, r0
 8009c84:	460b      	mov	r3, r1
 8009c86:	3530      	adds	r5, #48	@ 0x30
 8009c88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c90:	f806 5b01 	strb.w	r5, [r6], #1
 8009c94:	f7f6 fe8a 	bl	80009ac <__aeabi_dcmplt>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d163      	bne.n	8009d64 <_dtoa_r+0x65c>
 8009c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	495a      	ldr	r1, [pc, #360]	@ (8009e0c <_dtoa_r+0x704>)
 8009ca4:	f7f6 fa58 	bl	8000158 <__aeabi_dsub>
 8009ca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cac:	f7f6 fe7e 	bl	80009ac <__aeabi_dcmplt>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f040 8087 	bne.w	8009dc4 <_dtoa_r+0x6bc>
 8009cb6:	42a6      	cmp	r6, r4
 8009cb8:	f43f af43 	beq.w	8009b42 <_dtoa_r+0x43a>
 8009cbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	4b53      	ldr	r3, [pc, #332]	@ (8009e10 <_dtoa_r+0x708>)
 8009cc4:	f7f6 fc00 	bl	80004c8 <__aeabi_dmul>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8009e10 <_dtoa_r+0x708>)
 8009cd4:	f7f6 fbf8 	bl	80004c8 <__aeabi_dmul>
 8009cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cdc:	e7c4      	b.n	8009c68 <_dtoa_r+0x560>
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f7f6 fbf1 	bl	80004c8 <__aeabi_dmul>
 8009ce6:	4656      	mov	r6, sl
 8009ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cec:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf2:	f7f6 fe99 	bl	8000a28 <__aeabi_d2iz>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	f7f6 fb7c 	bl	80003f4 <__aeabi_i2d>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d04:	f7f6 fa28 	bl	8000158 <__aeabi_dsub>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	3530      	adds	r5, #48	@ 0x30
 8009d0e:	f806 5b01 	strb.w	r5, [r6], #1
 8009d12:	42a6      	cmp	r6, r4
 8009d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d18:	f04f 0200 	mov.w	r2, #0
 8009d1c:	d124      	bne.n	8009d68 <_dtoa_r+0x660>
 8009d1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d22:	4b39      	ldr	r3, [pc, #228]	@ (8009e08 <_dtoa_r+0x700>)
 8009d24:	f7f6 fa1a 	bl	800015c <__adddf3>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d30:	f7f6 fe5a 	bl	80009e8 <__aeabi_dcmpgt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d145      	bne.n	8009dc4 <_dtoa_r+0x6bc>
 8009d38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	4932      	ldr	r1, [pc, #200]	@ (8009e08 <_dtoa_r+0x700>)
 8009d40:	f7f6 fa0a 	bl	8000158 <__aeabi_dsub>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d4c:	f7f6 fe2e 	bl	80009ac <__aeabi_dcmplt>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f43f aef6 	beq.w	8009b42 <_dtoa_r+0x43a>
 8009d56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009d58:	1e73      	subs	r3, r6, #1
 8009d5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d60:	2b30      	cmp	r3, #48	@ 0x30
 8009d62:	d0f8      	beq.n	8009d56 <_dtoa_r+0x64e>
 8009d64:	9f04      	ldr	r7, [sp, #16]
 8009d66:	e73f      	b.n	8009be8 <_dtoa_r+0x4e0>
 8009d68:	4b29      	ldr	r3, [pc, #164]	@ (8009e10 <_dtoa_r+0x708>)
 8009d6a:	f7f6 fbad 	bl	80004c8 <__aeabi_dmul>
 8009d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d72:	e7bc      	b.n	8009cee <_dtoa_r+0x5e6>
 8009d74:	d10c      	bne.n	8009d90 <_dtoa_r+0x688>
 8009d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4b25      	ldr	r3, [pc, #148]	@ (8009e14 <_dtoa_r+0x70c>)
 8009d7e:	f7f6 fba3 	bl	80004c8 <__aeabi_dmul>
 8009d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d86:	f7f6 fe25 	bl	80009d4 <__aeabi_dcmpge>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f000 815b 	beq.w	800a046 <_dtoa_r+0x93e>
 8009d90:	2400      	movs	r4, #0
 8009d92:	4625      	mov	r5, r4
 8009d94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d96:	4656      	mov	r6, sl
 8009d98:	43db      	mvns	r3, r3
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	2700      	movs	r7, #0
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4658      	mov	r0, fp
 8009da2:	f000 fab9 	bl	800a318 <_Bfree>
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	d0dc      	beq.n	8009d64 <_dtoa_r+0x65c>
 8009daa:	b12f      	cbz	r7, 8009db8 <_dtoa_r+0x6b0>
 8009dac:	42af      	cmp	r7, r5
 8009dae:	d003      	beq.n	8009db8 <_dtoa_r+0x6b0>
 8009db0:	4639      	mov	r1, r7
 8009db2:	4658      	mov	r0, fp
 8009db4:	f000 fab0 	bl	800a318 <_Bfree>
 8009db8:	4629      	mov	r1, r5
 8009dba:	4658      	mov	r0, fp
 8009dbc:	f000 faac 	bl	800a318 <_Bfree>
 8009dc0:	e7d0      	b.n	8009d64 <_dtoa_r+0x65c>
 8009dc2:	9704      	str	r7, [sp, #16]
 8009dc4:	4633      	mov	r3, r6
 8009dc6:	461e      	mov	r6, r3
 8009dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dcc:	2a39      	cmp	r2, #57	@ 0x39
 8009dce:	d107      	bne.n	8009de0 <_dtoa_r+0x6d8>
 8009dd0:	459a      	cmp	sl, r3
 8009dd2:	d1f8      	bne.n	8009dc6 <_dtoa_r+0x6be>
 8009dd4:	9a04      	ldr	r2, [sp, #16]
 8009dd6:	3201      	adds	r2, #1
 8009dd8:	9204      	str	r2, [sp, #16]
 8009dda:	2230      	movs	r2, #48	@ 0x30
 8009ddc:	f88a 2000 	strb.w	r2, [sl]
 8009de0:	781a      	ldrb	r2, [r3, #0]
 8009de2:	3201      	adds	r2, #1
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	e7bd      	b.n	8009d64 <_dtoa_r+0x65c>
 8009de8:	2200      	movs	r2, #0
 8009dea:	4b09      	ldr	r3, [pc, #36]	@ (8009e10 <_dtoa_r+0x708>)
 8009dec:	f7f6 fb6c 	bl	80004c8 <__aeabi_dmul>
 8009df0:	2200      	movs	r2, #0
 8009df2:	2300      	movs	r3, #0
 8009df4:	4604      	mov	r4, r0
 8009df6:	460d      	mov	r5, r1
 8009df8:	f7f6 fdce 	bl	8000998 <__aeabi_dcmpeq>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f43f aebc 	beq.w	8009b7a <_dtoa_r+0x472>
 8009e02:	e6f1      	b.n	8009be8 <_dtoa_r+0x4e0>
 8009e04:	0800c1a0 	.word	0x0800c1a0
 8009e08:	3fe00000 	.word	0x3fe00000
 8009e0c:	3ff00000 	.word	0x3ff00000
 8009e10:	40240000 	.word	0x40240000
 8009e14:	40140000 	.word	0x40140000
 8009e18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e1a:	2a00      	cmp	r2, #0
 8009e1c:	f000 80db 	beq.w	8009fd6 <_dtoa_r+0x8ce>
 8009e20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e22:	2a01      	cmp	r2, #1
 8009e24:	f300 80bf 	bgt.w	8009fa6 <_dtoa_r+0x89e>
 8009e28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	f000 80b7 	beq.w	8009f9e <_dtoa_r+0x896>
 8009e30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e34:	4646      	mov	r6, r8
 8009e36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	441a      	add	r2, r3
 8009e3e:	4658      	mov	r0, fp
 8009e40:	4498      	add	r8, r3
 8009e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e44:	f000 fb1c 	bl	800a480 <__i2b>
 8009e48:	4605      	mov	r5, r0
 8009e4a:	b15e      	cbz	r6, 8009e64 <_dtoa_r+0x75c>
 8009e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dd08      	ble.n	8009e64 <_dtoa_r+0x75c>
 8009e52:	42b3      	cmp	r3, r6
 8009e54:	bfa8      	it	ge
 8009e56:	4633      	movge	r3, r6
 8009e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e5a:	eba8 0803 	sub.w	r8, r8, r3
 8009e5e:	1af6      	subs	r6, r6, r3
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e66:	b1f3      	cbz	r3, 8009ea6 <_dtoa_r+0x79e>
 8009e68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 80b7 	beq.w	8009fde <_dtoa_r+0x8d6>
 8009e70:	b18c      	cbz	r4, 8009e96 <_dtoa_r+0x78e>
 8009e72:	4629      	mov	r1, r5
 8009e74:	4622      	mov	r2, r4
 8009e76:	4658      	mov	r0, fp
 8009e78:	f000 fbc0 	bl	800a5fc <__pow5mult>
 8009e7c:	464a      	mov	r2, r9
 8009e7e:	4601      	mov	r1, r0
 8009e80:	4605      	mov	r5, r0
 8009e82:	4658      	mov	r0, fp
 8009e84:	f000 fb12 	bl	800a4ac <__multiply>
 8009e88:	4649      	mov	r1, r9
 8009e8a:	9004      	str	r0, [sp, #16]
 8009e8c:	4658      	mov	r0, fp
 8009e8e:	f000 fa43 	bl	800a318 <_Bfree>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	4699      	mov	r9, r3
 8009e96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e98:	1b1a      	subs	r2, r3, r4
 8009e9a:	d004      	beq.n	8009ea6 <_dtoa_r+0x79e>
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4658      	mov	r0, fp
 8009ea0:	f000 fbac 	bl	800a5fc <__pow5mult>
 8009ea4:	4681      	mov	r9, r0
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	4658      	mov	r0, fp
 8009eaa:	f000 fae9 	bl	800a480 <__i2b>
 8009eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 81c9 	beq.w	800a24a <_dtoa_r+0xb42>
 8009eb8:	461a      	mov	r2, r3
 8009eba:	4601      	mov	r1, r0
 8009ebc:	4658      	mov	r0, fp
 8009ebe:	f000 fb9d 	bl	800a5fc <__pow5mult>
 8009ec2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	f300 808f 	bgt.w	8009fea <_dtoa_r+0x8e2>
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f040 8087 	bne.w	8009fe2 <_dtoa_r+0x8da>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f040 8083 	bne.w	8009fe6 <_dtoa_r+0x8de>
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ee6:	0d1b      	lsrs	r3, r3, #20
 8009ee8:	051b      	lsls	r3, r3, #20
 8009eea:	b12b      	cbz	r3, 8009ef8 <_dtoa_r+0x7f0>
 8009eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eee:	f108 0801 	add.w	r8, r8, #1
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 81aa 	beq.w	800a256 <_dtoa_r+0xb4e>
 8009f02:	6923      	ldr	r3, [r4, #16]
 8009f04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f08:	6918      	ldr	r0, [r3, #16]
 8009f0a:	f000 fa6d 	bl	800a3e8 <__hi0bits>
 8009f0e:	f1c0 0020 	rsb	r0, r0, #32
 8009f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f14:	4418      	add	r0, r3
 8009f16:	f010 001f 	ands.w	r0, r0, #31
 8009f1a:	d071      	beq.n	800a000 <_dtoa_r+0x8f8>
 8009f1c:	f1c0 0320 	rsb	r3, r0, #32
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	dd65      	ble.n	8009ff0 <_dtoa_r+0x8e8>
 8009f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f26:	f1c0 001c 	rsb	r0, r0, #28
 8009f2a:	4403      	add	r3, r0
 8009f2c:	4480      	add	r8, r0
 8009f2e:	4406      	add	r6, r0
 8009f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f32:	f1b8 0f00 	cmp.w	r8, #0
 8009f36:	dd05      	ble.n	8009f44 <_dtoa_r+0x83c>
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4642      	mov	r2, r8
 8009f3c:	4658      	mov	r0, fp
 8009f3e:	f000 fbb7 	bl	800a6b0 <__lshift>
 8009f42:	4681      	mov	r9, r0
 8009f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dd05      	ble.n	8009f56 <_dtoa_r+0x84e>
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4658      	mov	r0, fp
 8009f50:	f000 fbae 	bl	800a6b0 <__lshift>
 8009f54:	4604      	mov	r4, r0
 8009f56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d053      	beq.n	800a004 <_dtoa_r+0x8fc>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4648      	mov	r0, r9
 8009f60:	f000 fc12 	bl	800a788 <__mcmp>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	da4d      	bge.n	800a004 <_dtoa_r+0x8fc>
 8009f68:	1e7b      	subs	r3, r7, #1
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	9304      	str	r3, [sp, #16]
 8009f6e:	220a      	movs	r2, #10
 8009f70:	2300      	movs	r3, #0
 8009f72:	4658      	mov	r0, fp
 8009f74:	f000 f9f2 	bl	800a35c <__multadd>
 8009f78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f7a:	4681      	mov	r9, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 816c 	beq.w	800a25a <_dtoa_r+0xb52>
 8009f82:	2300      	movs	r3, #0
 8009f84:	4629      	mov	r1, r5
 8009f86:	220a      	movs	r2, #10
 8009f88:	4658      	mov	r0, fp
 8009f8a:	f000 f9e7 	bl	800a35c <__multadd>
 8009f8e:	9b08      	ldr	r3, [sp, #32]
 8009f90:	4605      	mov	r5, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dc61      	bgt.n	800a05a <_dtoa_r+0x952>
 8009f96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	dc3b      	bgt.n	800a014 <_dtoa_r+0x90c>
 8009f9c:	e05d      	b.n	800a05a <_dtoa_r+0x952>
 8009f9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009fa0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009fa4:	e746      	b.n	8009e34 <_dtoa_r+0x72c>
 8009fa6:	9b07      	ldr	r3, [sp, #28]
 8009fa8:	1e5c      	subs	r4, r3, #1
 8009faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	bfbf      	itttt	lt
 8009fb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009fb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009fb4:	1ae3      	sublt	r3, r4, r3
 8009fb6:	18d2      	addlt	r2, r2, r3
 8009fb8:	bfa8      	it	ge
 8009fba:	1b1c      	subge	r4, r3, r4
 8009fbc:	9b07      	ldr	r3, [sp, #28]
 8009fbe:	bfbe      	ittt	lt
 8009fc0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009fc2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009fc4:	2400      	movlt	r4, #0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	bfb5      	itete	lt
 8009fca:	eba8 0603 	sublt.w	r6, r8, r3
 8009fce:	4646      	movge	r6, r8
 8009fd0:	2300      	movlt	r3, #0
 8009fd2:	9b07      	ldrge	r3, [sp, #28]
 8009fd4:	e730      	b.n	8009e38 <_dtoa_r+0x730>
 8009fd6:	4646      	mov	r6, r8
 8009fd8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009fdc:	e735      	b.n	8009e4a <_dtoa_r+0x742>
 8009fde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009fe0:	e75c      	b.n	8009e9c <_dtoa_r+0x794>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e788      	b.n	8009ef8 <_dtoa_r+0x7f0>
 8009fe6:	9b02      	ldr	r3, [sp, #8]
 8009fe8:	e786      	b.n	8009ef8 <_dtoa_r+0x7f0>
 8009fea:	2300      	movs	r3, #0
 8009fec:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fee:	e788      	b.n	8009f02 <_dtoa_r+0x7fa>
 8009ff0:	d09f      	beq.n	8009f32 <_dtoa_r+0x82a>
 8009ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ff4:	331c      	adds	r3, #28
 8009ff6:	441a      	add	r2, r3
 8009ff8:	4498      	add	r8, r3
 8009ffa:	441e      	add	r6, r3
 8009ffc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ffe:	e798      	b.n	8009f32 <_dtoa_r+0x82a>
 800a000:	4603      	mov	r3, r0
 800a002:	e7f6      	b.n	8009ff2 <_dtoa_r+0x8ea>
 800a004:	9b07      	ldr	r3, [sp, #28]
 800a006:	9704      	str	r7, [sp, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dc20      	bgt.n	800a04e <_dtoa_r+0x946>
 800a00c:	9308      	str	r3, [sp, #32]
 800a00e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a010:	2b02      	cmp	r3, #2
 800a012:	dd1e      	ble.n	800a052 <_dtoa_r+0x94a>
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f47f aebc 	bne.w	8009d94 <_dtoa_r+0x68c>
 800a01c:	4621      	mov	r1, r4
 800a01e:	2205      	movs	r2, #5
 800a020:	4658      	mov	r0, fp
 800a022:	f000 f99b 	bl	800a35c <__multadd>
 800a026:	4601      	mov	r1, r0
 800a028:	4604      	mov	r4, r0
 800a02a:	4648      	mov	r0, r9
 800a02c:	f000 fbac 	bl	800a788 <__mcmp>
 800a030:	2800      	cmp	r0, #0
 800a032:	f77f aeaf 	ble.w	8009d94 <_dtoa_r+0x68c>
 800a036:	2331      	movs	r3, #49	@ 0x31
 800a038:	4656      	mov	r6, sl
 800a03a:	f806 3b01 	strb.w	r3, [r6], #1
 800a03e:	9b04      	ldr	r3, [sp, #16]
 800a040:	3301      	adds	r3, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	e6aa      	b.n	8009d9c <_dtoa_r+0x694>
 800a046:	9c07      	ldr	r4, [sp, #28]
 800a048:	9704      	str	r7, [sp, #16]
 800a04a:	4625      	mov	r5, r4
 800a04c:	e7f3      	b.n	800a036 <_dtoa_r+0x92e>
 800a04e:	9b07      	ldr	r3, [sp, #28]
 800a050:	9308      	str	r3, [sp, #32]
 800a052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 8104 	beq.w	800a262 <_dtoa_r+0xb5a>
 800a05a:	2e00      	cmp	r6, #0
 800a05c:	dd05      	ble.n	800a06a <_dtoa_r+0x962>
 800a05e:	4629      	mov	r1, r5
 800a060:	4632      	mov	r2, r6
 800a062:	4658      	mov	r0, fp
 800a064:	f000 fb24 	bl	800a6b0 <__lshift>
 800a068:	4605      	mov	r5, r0
 800a06a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d05a      	beq.n	800a126 <_dtoa_r+0xa1e>
 800a070:	4658      	mov	r0, fp
 800a072:	6869      	ldr	r1, [r5, #4]
 800a074:	f000 f910 	bl	800a298 <_Balloc>
 800a078:	4606      	mov	r6, r0
 800a07a:	b928      	cbnz	r0, 800a088 <_dtoa_r+0x980>
 800a07c:	4602      	mov	r2, r0
 800a07e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a082:	4b83      	ldr	r3, [pc, #524]	@ (800a290 <_dtoa_r+0xb88>)
 800a084:	f7ff bb54 	b.w	8009730 <_dtoa_r+0x28>
 800a088:	692a      	ldr	r2, [r5, #16]
 800a08a:	f105 010c 	add.w	r1, r5, #12
 800a08e:	3202      	adds	r2, #2
 800a090:	0092      	lsls	r2, r2, #2
 800a092:	300c      	adds	r0, #12
 800a094:	f7ff f86d 	bl	8009172 <memcpy>
 800a098:	2201      	movs	r2, #1
 800a09a:	4631      	mov	r1, r6
 800a09c:	4658      	mov	r0, fp
 800a09e:	f000 fb07 	bl	800a6b0 <__lshift>
 800a0a2:	462f      	mov	r7, r5
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	f10a 0301 	add.w	r3, sl, #1
 800a0aa:	9307      	str	r3, [sp, #28]
 800a0ac:	9b08      	ldr	r3, [sp, #32]
 800a0ae:	4453      	add	r3, sl
 800a0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0b2:	9b02      	ldr	r3, [sp, #8]
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0ba:	9b07      	ldr	r3, [sp, #28]
 800a0bc:	4621      	mov	r1, r4
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	4648      	mov	r0, r9
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	f7ff fa98 	bl	80095f8 <quorem>
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	9008      	str	r0, [sp, #32]
 800a0cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0d0:	4648      	mov	r0, r9
 800a0d2:	f000 fb59 	bl	800a788 <__mcmp>
 800a0d6:	462a      	mov	r2, r5
 800a0d8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a0da:	4621      	mov	r1, r4
 800a0dc:	4658      	mov	r0, fp
 800a0de:	f000 fb6f 	bl	800a7c0 <__mdiff>
 800a0e2:	68c2      	ldr	r2, [r0, #12]
 800a0e4:	4606      	mov	r6, r0
 800a0e6:	bb02      	cbnz	r2, 800a12a <_dtoa_r+0xa22>
 800a0e8:	4601      	mov	r1, r0
 800a0ea:	4648      	mov	r0, r9
 800a0ec:	f000 fb4c 	bl	800a788 <__mcmp>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4658      	mov	r0, fp
 800a0f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a0f8:	f000 f90e 	bl	800a318 <_Bfree>
 800a0fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a100:	9e07      	ldr	r6, [sp, #28]
 800a102:	ea43 0102 	orr.w	r1, r3, r2
 800a106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a108:	4319      	orrs	r1, r3
 800a10a:	d110      	bne.n	800a12e <_dtoa_r+0xa26>
 800a10c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a110:	d029      	beq.n	800a166 <_dtoa_r+0xa5e>
 800a112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	dd02      	ble.n	800a11e <_dtoa_r+0xa16>
 800a118:	9b08      	ldr	r3, [sp, #32]
 800a11a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	f883 8000 	strb.w	r8, [r3]
 800a124:	e63b      	b.n	8009d9e <_dtoa_r+0x696>
 800a126:	4628      	mov	r0, r5
 800a128:	e7bb      	b.n	800a0a2 <_dtoa_r+0x99a>
 800a12a:	2201      	movs	r2, #1
 800a12c:	e7e1      	b.n	800a0f2 <_dtoa_r+0x9ea>
 800a12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	db04      	blt.n	800a13e <_dtoa_r+0xa36>
 800a134:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a136:	430b      	orrs	r3, r1
 800a138:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a13a:	430b      	orrs	r3, r1
 800a13c:	d120      	bne.n	800a180 <_dtoa_r+0xa78>
 800a13e:	2a00      	cmp	r2, #0
 800a140:	dded      	ble.n	800a11e <_dtoa_r+0xa16>
 800a142:	4649      	mov	r1, r9
 800a144:	2201      	movs	r2, #1
 800a146:	4658      	mov	r0, fp
 800a148:	f000 fab2 	bl	800a6b0 <__lshift>
 800a14c:	4621      	mov	r1, r4
 800a14e:	4681      	mov	r9, r0
 800a150:	f000 fb1a 	bl	800a788 <__mcmp>
 800a154:	2800      	cmp	r0, #0
 800a156:	dc03      	bgt.n	800a160 <_dtoa_r+0xa58>
 800a158:	d1e1      	bne.n	800a11e <_dtoa_r+0xa16>
 800a15a:	f018 0f01 	tst.w	r8, #1
 800a15e:	d0de      	beq.n	800a11e <_dtoa_r+0xa16>
 800a160:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a164:	d1d8      	bne.n	800a118 <_dtoa_r+0xa10>
 800a166:	2339      	movs	r3, #57	@ 0x39
 800a168:	9a02      	ldr	r2, [sp, #8]
 800a16a:	7013      	strb	r3, [r2, #0]
 800a16c:	4633      	mov	r3, r6
 800a16e:	461e      	mov	r6, r3
 800a170:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a174:	3b01      	subs	r3, #1
 800a176:	2a39      	cmp	r2, #57	@ 0x39
 800a178:	d052      	beq.n	800a220 <_dtoa_r+0xb18>
 800a17a:	3201      	adds	r2, #1
 800a17c:	701a      	strb	r2, [r3, #0]
 800a17e:	e60e      	b.n	8009d9e <_dtoa_r+0x696>
 800a180:	2a00      	cmp	r2, #0
 800a182:	dd07      	ble.n	800a194 <_dtoa_r+0xa8c>
 800a184:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a188:	d0ed      	beq.n	800a166 <_dtoa_r+0xa5e>
 800a18a:	9a02      	ldr	r2, [sp, #8]
 800a18c:	f108 0301 	add.w	r3, r8, #1
 800a190:	7013      	strb	r3, [r2, #0]
 800a192:	e604      	b.n	8009d9e <_dtoa_r+0x696>
 800a194:	9b07      	ldr	r3, [sp, #28]
 800a196:	9a07      	ldr	r2, [sp, #28]
 800a198:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a19c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d028      	beq.n	800a1f4 <_dtoa_r+0xaec>
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	220a      	movs	r2, #10
 800a1a8:	4658      	mov	r0, fp
 800a1aa:	f000 f8d7 	bl	800a35c <__multadd>
 800a1ae:	42af      	cmp	r7, r5
 800a1b0:	4681      	mov	r9, r0
 800a1b2:	f04f 0300 	mov.w	r3, #0
 800a1b6:	f04f 020a 	mov.w	r2, #10
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	4658      	mov	r0, fp
 800a1be:	d107      	bne.n	800a1d0 <_dtoa_r+0xac8>
 800a1c0:	f000 f8cc 	bl	800a35c <__multadd>
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	9b07      	ldr	r3, [sp, #28]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	9307      	str	r3, [sp, #28]
 800a1ce:	e774      	b.n	800a0ba <_dtoa_r+0x9b2>
 800a1d0:	f000 f8c4 	bl	800a35c <__multadd>
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	2300      	movs	r3, #0
 800a1da:	220a      	movs	r2, #10
 800a1dc:	4658      	mov	r0, fp
 800a1de:	f000 f8bd 	bl	800a35c <__multadd>
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	e7f0      	b.n	800a1c8 <_dtoa_r+0xac0>
 800a1e6:	9b08      	ldr	r3, [sp, #32]
 800a1e8:	2700      	movs	r7, #0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bfcc      	ite	gt
 800a1ee:	461e      	movgt	r6, r3
 800a1f0:	2601      	movle	r6, #1
 800a1f2:	4456      	add	r6, sl
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	4658      	mov	r0, fp
 800a1fa:	f000 fa59 	bl	800a6b0 <__lshift>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4681      	mov	r9, r0
 800a202:	f000 fac1 	bl	800a788 <__mcmp>
 800a206:	2800      	cmp	r0, #0
 800a208:	dcb0      	bgt.n	800a16c <_dtoa_r+0xa64>
 800a20a:	d102      	bne.n	800a212 <_dtoa_r+0xb0a>
 800a20c:	f018 0f01 	tst.w	r8, #1
 800a210:	d1ac      	bne.n	800a16c <_dtoa_r+0xa64>
 800a212:	4633      	mov	r3, r6
 800a214:	461e      	mov	r6, r3
 800a216:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a21a:	2a30      	cmp	r2, #48	@ 0x30
 800a21c:	d0fa      	beq.n	800a214 <_dtoa_r+0xb0c>
 800a21e:	e5be      	b.n	8009d9e <_dtoa_r+0x696>
 800a220:	459a      	cmp	sl, r3
 800a222:	d1a4      	bne.n	800a16e <_dtoa_r+0xa66>
 800a224:	9b04      	ldr	r3, [sp, #16]
 800a226:	3301      	adds	r3, #1
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	2331      	movs	r3, #49	@ 0x31
 800a22c:	f88a 3000 	strb.w	r3, [sl]
 800a230:	e5b5      	b.n	8009d9e <_dtoa_r+0x696>
 800a232:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a234:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a294 <_dtoa_r+0xb8c>
 800a238:	b11b      	cbz	r3, 800a242 <_dtoa_r+0xb3a>
 800a23a:	f10a 0308 	add.w	r3, sl, #8
 800a23e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	4650      	mov	r0, sl
 800a244:	b017      	add	sp, #92	@ 0x5c
 800a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	f77f ae3d 	ble.w	8009ecc <_dtoa_r+0x7c4>
 800a252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a254:	930a      	str	r3, [sp, #40]	@ 0x28
 800a256:	2001      	movs	r0, #1
 800a258:	e65b      	b.n	8009f12 <_dtoa_r+0x80a>
 800a25a:	9b08      	ldr	r3, [sp, #32]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f77f aed6 	ble.w	800a00e <_dtoa_r+0x906>
 800a262:	4656      	mov	r6, sl
 800a264:	4621      	mov	r1, r4
 800a266:	4648      	mov	r0, r9
 800a268:	f7ff f9c6 	bl	80095f8 <quorem>
 800a26c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a270:	9b08      	ldr	r3, [sp, #32]
 800a272:	f806 8b01 	strb.w	r8, [r6], #1
 800a276:	eba6 020a 	sub.w	r2, r6, sl
 800a27a:	4293      	cmp	r3, r2
 800a27c:	ddb3      	ble.n	800a1e6 <_dtoa_r+0xade>
 800a27e:	4649      	mov	r1, r9
 800a280:	2300      	movs	r3, #0
 800a282:	220a      	movs	r2, #10
 800a284:	4658      	mov	r0, fp
 800a286:	f000 f869 	bl	800a35c <__multadd>
 800a28a:	4681      	mov	r9, r0
 800a28c:	e7ea      	b.n	800a264 <_dtoa_r+0xb5c>
 800a28e:	bf00      	nop
 800a290:	0800c102 	.word	0x0800c102
 800a294:	0800c084 	.word	0x0800c084

0800a298 <_Balloc>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	69c6      	ldr	r6, [r0, #28]
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	b976      	cbnz	r6, 800a2c0 <_Balloc+0x28>
 800a2a2:	2010      	movs	r0, #16
 800a2a4:	f7fe fc9c 	bl	8008be0 <malloc>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	61e0      	str	r0, [r4, #28]
 800a2ac:	b920      	cbnz	r0, 800a2b8 <_Balloc+0x20>
 800a2ae:	216b      	movs	r1, #107	@ 0x6b
 800a2b0:	4b17      	ldr	r3, [pc, #92]	@ (800a310 <_Balloc+0x78>)
 800a2b2:	4818      	ldr	r0, [pc, #96]	@ (800a314 <_Balloc+0x7c>)
 800a2b4:	f000 fb8c 	bl	800a9d0 <__assert_func>
 800a2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2bc:	6006      	str	r6, [r0, #0]
 800a2be:	60c6      	str	r6, [r0, #12]
 800a2c0:	69e6      	ldr	r6, [r4, #28]
 800a2c2:	68f3      	ldr	r3, [r6, #12]
 800a2c4:	b183      	cbz	r3, 800a2e8 <_Balloc+0x50>
 800a2c6:	69e3      	ldr	r3, [r4, #28]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ce:	b9b8      	cbnz	r0, 800a300 <_Balloc+0x68>
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2d6:	1d72      	adds	r2, r6, #5
 800a2d8:	4620      	mov	r0, r4
 800a2da:	0092      	lsls	r2, r2, #2
 800a2dc:	f000 fb96 	bl	800aa0c <_calloc_r>
 800a2e0:	b160      	cbz	r0, 800a2fc <_Balloc+0x64>
 800a2e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2e6:	e00e      	b.n	800a306 <_Balloc+0x6e>
 800a2e8:	2221      	movs	r2, #33	@ 0x21
 800a2ea:	2104      	movs	r1, #4
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 fb8d 	bl	800aa0c <_calloc_r>
 800a2f2:	69e3      	ldr	r3, [r4, #28]
 800a2f4:	60f0      	str	r0, [r6, #12]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e4      	bne.n	800a2c6 <_Balloc+0x2e>
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}
 800a300:	6802      	ldr	r2, [r0, #0]
 800a302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a306:	2300      	movs	r3, #0
 800a308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a30c:	e7f7      	b.n	800a2fe <_Balloc+0x66>
 800a30e:	bf00      	nop
 800a310:	0800c093 	.word	0x0800c093
 800a314:	0800c113 	.word	0x0800c113

0800a318 <_Bfree>:
 800a318:	b570      	push	{r4, r5, r6, lr}
 800a31a:	69c6      	ldr	r6, [r0, #28]
 800a31c:	4605      	mov	r5, r0
 800a31e:	460c      	mov	r4, r1
 800a320:	b976      	cbnz	r6, 800a340 <_Bfree+0x28>
 800a322:	2010      	movs	r0, #16
 800a324:	f7fe fc5c 	bl	8008be0 <malloc>
 800a328:	4602      	mov	r2, r0
 800a32a:	61e8      	str	r0, [r5, #28]
 800a32c:	b920      	cbnz	r0, 800a338 <_Bfree+0x20>
 800a32e:	218f      	movs	r1, #143	@ 0x8f
 800a330:	4b08      	ldr	r3, [pc, #32]	@ (800a354 <_Bfree+0x3c>)
 800a332:	4809      	ldr	r0, [pc, #36]	@ (800a358 <_Bfree+0x40>)
 800a334:	f000 fb4c 	bl	800a9d0 <__assert_func>
 800a338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a33c:	6006      	str	r6, [r0, #0]
 800a33e:	60c6      	str	r6, [r0, #12]
 800a340:	b13c      	cbz	r4, 800a352 <_Bfree+0x3a>
 800a342:	69eb      	ldr	r3, [r5, #28]
 800a344:	6862      	ldr	r2, [r4, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a34c:	6021      	str	r1, [r4, #0]
 800a34e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a352:	bd70      	pop	{r4, r5, r6, pc}
 800a354:	0800c093 	.word	0x0800c093
 800a358:	0800c113 	.word	0x0800c113

0800a35c <__multadd>:
 800a35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a360:	4607      	mov	r7, r0
 800a362:	460c      	mov	r4, r1
 800a364:	461e      	mov	r6, r3
 800a366:	2000      	movs	r0, #0
 800a368:	690d      	ldr	r5, [r1, #16]
 800a36a:	f101 0c14 	add.w	ip, r1, #20
 800a36e:	f8dc 3000 	ldr.w	r3, [ip]
 800a372:	3001      	adds	r0, #1
 800a374:	b299      	uxth	r1, r3
 800a376:	fb02 6101 	mla	r1, r2, r1, r6
 800a37a:	0c1e      	lsrs	r6, r3, #16
 800a37c:	0c0b      	lsrs	r3, r1, #16
 800a37e:	fb02 3306 	mla	r3, r2, r6, r3
 800a382:	b289      	uxth	r1, r1
 800a384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a388:	4285      	cmp	r5, r0
 800a38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a38e:	f84c 1b04 	str.w	r1, [ip], #4
 800a392:	dcec      	bgt.n	800a36e <__multadd+0x12>
 800a394:	b30e      	cbz	r6, 800a3da <__multadd+0x7e>
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	42ab      	cmp	r3, r5
 800a39a:	dc19      	bgt.n	800a3d0 <__multadd+0x74>
 800a39c:	6861      	ldr	r1, [r4, #4]
 800a39e:	4638      	mov	r0, r7
 800a3a0:	3101      	adds	r1, #1
 800a3a2:	f7ff ff79 	bl	800a298 <_Balloc>
 800a3a6:	4680      	mov	r8, r0
 800a3a8:	b928      	cbnz	r0, 800a3b6 <__multadd+0x5a>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	21ba      	movs	r1, #186	@ 0xba
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <__multadd+0x84>)
 800a3b0:	480c      	ldr	r0, [pc, #48]	@ (800a3e4 <__multadd+0x88>)
 800a3b2:	f000 fb0d 	bl	800a9d0 <__assert_func>
 800a3b6:	6922      	ldr	r2, [r4, #16]
 800a3b8:	f104 010c 	add.w	r1, r4, #12
 800a3bc:	3202      	adds	r2, #2
 800a3be:	0092      	lsls	r2, r2, #2
 800a3c0:	300c      	adds	r0, #12
 800a3c2:	f7fe fed6 	bl	8009172 <memcpy>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	f7ff ffa5 	bl	800a318 <_Bfree>
 800a3ce:	4644      	mov	r4, r8
 800a3d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3d4:	3501      	adds	r5, #1
 800a3d6:	615e      	str	r6, [r3, #20]
 800a3d8:	6125      	str	r5, [r4, #16]
 800a3da:	4620      	mov	r0, r4
 800a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e0:	0800c102 	.word	0x0800c102
 800a3e4:	0800c113 	.word	0x0800c113

0800a3e8 <__hi0bits>:
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3ee:	bf3a      	itte	cc
 800a3f0:	0403      	lslcc	r3, r0, #16
 800a3f2:	2010      	movcc	r0, #16
 800a3f4:	2000      	movcs	r0, #0
 800a3f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3fa:	bf3c      	itt	cc
 800a3fc:	021b      	lslcc	r3, r3, #8
 800a3fe:	3008      	addcc	r0, #8
 800a400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a404:	bf3c      	itt	cc
 800a406:	011b      	lslcc	r3, r3, #4
 800a408:	3004      	addcc	r0, #4
 800a40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a40e:	bf3c      	itt	cc
 800a410:	009b      	lslcc	r3, r3, #2
 800a412:	3002      	addcc	r0, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	db05      	blt.n	800a424 <__hi0bits+0x3c>
 800a418:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a41c:	f100 0001 	add.w	r0, r0, #1
 800a420:	bf08      	it	eq
 800a422:	2020      	moveq	r0, #32
 800a424:	4770      	bx	lr

0800a426 <__lo0bits>:
 800a426:	6803      	ldr	r3, [r0, #0]
 800a428:	4602      	mov	r2, r0
 800a42a:	f013 0007 	ands.w	r0, r3, #7
 800a42e:	d00b      	beq.n	800a448 <__lo0bits+0x22>
 800a430:	07d9      	lsls	r1, r3, #31
 800a432:	d421      	bmi.n	800a478 <__lo0bits+0x52>
 800a434:	0798      	lsls	r0, r3, #30
 800a436:	bf49      	itett	mi
 800a438:	085b      	lsrmi	r3, r3, #1
 800a43a:	089b      	lsrpl	r3, r3, #2
 800a43c:	2001      	movmi	r0, #1
 800a43e:	6013      	strmi	r3, [r2, #0]
 800a440:	bf5c      	itt	pl
 800a442:	2002      	movpl	r0, #2
 800a444:	6013      	strpl	r3, [r2, #0]
 800a446:	4770      	bx	lr
 800a448:	b299      	uxth	r1, r3
 800a44a:	b909      	cbnz	r1, 800a450 <__lo0bits+0x2a>
 800a44c:	2010      	movs	r0, #16
 800a44e:	0c1b      	lsrs	r3, r3, #16
 800a450:	b2d9      	uxtb	r1, r3
 800a452:	b909      	cbnz	r1, 800a458 <__lo0bits+0x32>
 800a454:	3008      	adds	r0, #8
 800a456:	0a1b      	lsrs	r3, r3, #8
 800a458:	0719      	lsls	r1, r3, #28
 800a45a:	bf04      	itt	eq
 800a45c:	091b      	lsreq	r3, r3, #4
 800a45e:	3004      	addeq	r0, #4
 800a460:	0799      	lsls	r1, r3, #30
 800a462:	bf04      	itt	eq
 800a464:	089b      	lsreq	r3, r3, #2
 800a466:	3002      	addeq	r0, #2
 800a468:	07d9      	lsls	r1, r3, #31
 800a46a:	d403      	bmi.n	800a474 <__lo0bits+0x4e>
 800a46c:	085b      	lsrs	r3, r3, #1
 800a46e:	f100 0001 	add.w	r0, r0, #1
 800a472:	d003      	beq.n	800a47c <__lo0bits+0x56>
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	4770      	bx	lr
 800a478:	2000      	movs	r0, #0
 800a47a:	4770      	bx	lr
 800a47c:	2020      	movs	r0, #32
 800a47e:	4770      	bx	lr

0800a480 <__i2b>:
 800a480:	b510      	push	{r4, lr}
 800a482:	460c      	mov	r4, r1
 800a484:	2101      	movs	r1, #1
 800a486:	f7ff ff07 	bl	800a298 <_Balloc>
 800a48a:	4602      	mov	r2, r0
 800a48c:	b928      	cbnz	r0, 800a49a <__i2b+0x1a>
 800a48e:	f240 1145 	movw	r1, #325	@ 0x145
 800a492:	4b04      	ldr	r3, [pc, #16]	@ (800a4a4 <__i2b+0x24>)
 800a494:	4804      	ldr	r0, [pc, #16]	@ (800a4a8 <__i2b+0x28>)
 800a496:	f000 fa9b 	bl	800a9d0 <__assert_func>
 800a49a:	2301      	movs	r3, #1
 800a49c:	6144      	str	r4, [r0, #20]
 800a49e:	6103      	str	r3, [r0, #16]
 800a4a0:	bd10      	pop	{r4, pc}
 800a4a2:	bf00      	nop
 800a4a4:	0800c102 	.word	0x0800c102
 800a4a8:	0800c113 	.word	0x0800c113

0800a4ac <__multiply>:
 800a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	690a      	ldr	r2, [r1, #16]
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	460f      	mov	r7, r1
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	bfa2      	ittt	ge
 800a4bc:	4623      	movge	r3, r4
 800a4be:	460c      	movge	r4, r1
 800a4c0:	461f      	movge	r7, r3
 800a4c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a4c6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a4ca:	68a3      	ldr	r3, [r4, #8]
 800a4cc:	6861      	ldr	r1, [r4, #4]
 800a4ce:	eb0a 0609 	add.w	r6, sl, r9
 800a4d2:	42b3      	cmp	r3, r6
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	bfb8      	it	lt
 800a4d8:	3101      	addlt	r1, #1
 800a4da:	f7ff fedd 	bl	800a298 <_Balloc>
 800a4de:	b930      	cbnz	r0, 800a4ee <__multiply+0x42>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4e6:	4b43      	ldr	r3, [pc, #268]	@ (800a5f4 <__multiply+0x148>)
 800a4e8:	4843      	ldr	r0, [pc, #268]	@ (800a5f8 <__multiply+0x14c>)
 800a4ea:	f000 fa71 	bl	800a9d0 <__assert_func>
 800a4ee:	f100 0514 	add.w	r5, r0, #20
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4fa:	4543      	cmp	r3, r8
 800a4fc:	d321      	bcc.n	800a542 <__multiply+0x96>
 800a4fe:	f107 0114 	add.w	r1, r7, #20
 800a502:	f104 0214 	add.w	r2, r4, #20
 800a506:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a50a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a50e:	9302      	str	r3, [sp, #8]
 800a510:	1b13      	subs	r3, r2, r4
 800a512:	3b15      	subs	r3, #21
 800a514:	f023 0303 	bic.w	r3, r3, #3
 800a518:	3304      	adds	r3, #4
 800a51a:	f104 0715 	add.w	r7, r4, #21
 800a51e:	42ba      	cmp	r2, r7
 800a520:	bf38      	it	cc
 800a522:	2304      	movcc	r3, #4
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	9103      	str	r1, [sp, #12]
 800a52a:	428b      	cmp	r3, r1
 800a52c:	d80c      	bhi.n	800a548 <__multiply+0x9c>
 800a52e:	2e00      	cmp	r6, #0
 800a530:	dd03      	ble.n	800a53a <__multiply+0x8e>
 800a532:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a536:	2b00      	cmp	r3, #0
 800a538:	d05a      	beq.n	800a5f0 <__multiply+0x144>
 800a53a:	6106      	str	r6, [r0, #16]
 800a53c:	b005      	add	sp, #20
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	f843 2b04 	str.w	r2, [r3], #4
 800a546:	e7d8      	b.n	800a4fa <__multiply+0x4e>
 800a548:	f8b1 a000 	ldrh.w	sl, [r1]
 800a54c:	f1ba 0f00 	cmp.w	sl, #0
 800a550:	d023      	beq.n	800a59a <__multiply+0xee>
 800a552:	46a9      	mov	r9, r5
 800a554:	f04f 0c00 	mov.w	ip, #0
 800a558:	f104 0e14 	add.w	lr, r4, #20
 800a55c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a560:	f8d9 3000 	ldr.w	r3, [r9]
 800a564:	fa1f fb87 	uxth.w	fp, r7
 800a568:	b29b      	uxth	r3, r3
 800a56a:	fb0a 330b 	mla	r3, sl, fp, r3
 800a56e:	4463      	add	r3, ip
 800a570:	f8d9 c000 	ldr.w	ip, [r9]
 800a574:	0c3f      	lsrs	r7, r7, #16
 800a576:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a57a:	fb0a c707 	mla	r7, sl, r7, ip
 800a57e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a582:	b29b      	uxth	r3, r3
 800a584:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a588:	4572      	cmp	r2, lr
 800a58a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a58e:	f849 3b04 	str.w	r3, [r9], #4
 800a592:	d8e3      	bhi.n	800a55c <__multiply+0xb0>
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	f845 c003 	str.w	ip, [r5, r3]
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	3104      	adds	r1, #4
 800a59e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a5a2:	f1b9 0f00 	cmp.w	r9, #0
 800a5a6:	d021      	beq.n	800a5ec <__multiply+0x140>
 800a5a8:	46ae      	mov	lr, r5
 800a5aa:	f04f 0a00 	mov.w	sl, #0
 800a5ae:	682b      	ldr	r3, [r5, #0]
 800a5b0:	f104 0c14 	add.w	ip, r4, #20
 800a5b4:	f8bc b000 	ldrh.w	fp, [ip]
 800a5b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	fb09 770b 	mla	r7, r9, fp, r7
 800a5c2:	4457      	add	r7, sl
 800a5c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a5c8:	f84e 3b04 	str.w	r3, [lr], #4
 800a5cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5d4:	f8be 3000 	ldrh.w	r3, [lr]
 800a5d8:	4562      	cmp	r2, ip
 800a5da:	fb09 330a 	mla	r3, r9, sl, r3
 800a5de:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5e6:	d8e5      	bhi.n	800a5b4 <__multiply+0x108>
 800a5e8:	9f01      	ldr	r7, [sp, #4]
 800a5ea:	51eb      	str	r3, [r5, r7]
 800a5ec:	3504      	adds	r5, #4
 800a5ee:	e79a      	b.n	800a526 <__multiply+0x7a>
 800a5f0:	3e01      	subs	r6, #1
 800a5f2:	e79c      	b.n	800a52e <__multiply+0x82>
 800a5f4:	0800c102 	.word	0x0800c102
 800a5f8:	0800c113 	.word	0x0800c113

0800a5fc <__pow5mult>:
 800a5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a600:	4615      	mov	r5, r2
 800a602:	f012 0203 	ands.w	r2, r2, #3
 800a606:	4607      	mov	r7, r0
 800a608:	460e      	mov	r6, r1
 800a60a:	d007      	beq.n	800a61c <__pow5mult+0x20>
 800a60c:	4c25      	ldr	r4, [pc, #148]	@ (800a6a4 <__pow5mult+0xa8>)
 800a60e:	3a01      	subs	r2, #1
 800a610:	2300      	movs	r3, #0
 800a612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a616:	f7ff fea1 	bl	800a35c <__multadd>
 800a61a:	4606      	mov	r6, r0
 800a61c:	10ad      	asrs	r5, r5, #2
 800a61e:	d03d      	beq.n	800a69c <__pow5mult+0xa0>
 800a620:	69fc      	ldr	r4, [r7, #28]
 800a622:	b97c      	cbnz	r4, 800a644 <__pow5mult+0x48>
 800a624:	2010      	movs	r0, #16
 800a626:	f7fe fadb 	bl	8008be0 <malloc>
 800a62a:	4602      	mov	r2, r0
 800a62c:	61f8      	str	r0, [r7, #28]
 800a62e:	b928      	cbnz	r0, 800a63c <__pow5mult+0x40>
 800a630:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a634:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a8 <__pow5mult+0xac>)
 800a636:	481d      	ldr	r0, [pc, #116]	@ (800a6ac <__pow5mult+0xb0>)
 800a638:	f000 f9ca 	bl	800a9d0 <__assert_func>
 800a63c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a640:	6004      	str	r4, [r0, #0]
 800a642:	60c4      	str	r4, [r0, #12]
 800a644:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a648:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a64c:	b94c      	cbnz	r4, 800a662 <__pow5mult+0x66>
 800a64e:	f240 2171 	movw	r1, #625	@ 0x271
 800a652:	4638      	mov	r0, r7
 800a654:	f7ff ff14 	bl	800a480 <__i2b>
 800a658:	2300      	movs	r3, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	f04f 0900 	mov.w	r9, #0
 800a666:	07eb      	lsls	r3, r5, #31
 800a668:	d50a      	bpl.n	800a680 <__pow5mult+0x84>
 800a66a:	4631      	mov	r1, r6
 800a66c:	4622      	mov	r2, r4
 800a66e:	4638      	mov	r0, r7
 800a670:	f7ff ff1c 	bl	800a4ac <__multiply>
 800a674:	4680      	mov	r8, r0
 800a676:	4631      	mov	r1, r6
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff fe4d 	bl	800a318 <_Bfree>
 800a67e:	4646      	mov	r6, r8
 800a680:	106d      	asrs	r5, r5, #1
 800a682:	d00b      	beq.n	800a69c <__pow5mult+0xa0>
 800a684:	6820      	ldr	r0, [r4, #0]
 800a686:	b938      	cbnz	r0, 800a698 <__pow5mult+0x9c>
 800a688:	4622      	mov	r2, r4
 800a68a:	4621      	mov	r1, r4
 800a68c:	4638      	mov	r0, r7
 800a68e:	f7ff ff0d 	bl	800a4ac <__multiply>
 800a692:	6020      	str	r0, [r4, #0]
 800a694:	f8c0 9000 	str.w	r9, [r0]
 800a698:	4604      	mov	r4, r0
 800a69a:	e7e4      	b.n	800a666 <__pow5mult+0x6a>
 800a69c:	4630      	mov	r0, r6
 800a69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a2:	bf00      	nop
 800a6a4:	0800c16c 	.word	0x0800c16c
 800a6a8:	0800c093 	.word	0x0800c093
 800a6ac:	0800c113 	.word	0x0800c113

0800a6b0 <__lshift>:
 800a6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	4691      	mov	r9, r2
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	6849      	ldr	r1, [r1, #4]
 800a6be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6c2:	68a3      	ldr	r3, [r4, #8]
 800a6c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6c8:	f108 0601 	add.w	r6, r8, #1
 800a6cc:	42b3      	cmp	r3, r6
 800a6ce:	db0b      	blt.n	800a6e8 <__lshift+0x38>
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f7ff fde1 	bl	800a298 <_Balloc>
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	b948      	cbnz	r0, 800a6ee <__lshift+0x3e>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6e0:	4b27      	ldr	r3, [pc, #156]	@ (800a780 <__lshift+0xd0>)
 800a6e2:	4828      	ldr	r0, [pc, #160]	@ (800a784 <__lshift+0xd4>)
 800a6e4:	f000 f974 	bl	800a9d0 <__assert_func>
 800a6e8:	3101      	adds	r1, #1
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	e7ee      	b.n	800a6cc <__lshift+0x1c>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f100 0114 	add.w	r1, r0, #20
 800a6f4:	f100 0210 	add.w	r2, r0, #16
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	4553      	cmp	r3, sl
 800a6fc:	db33      	blt.n	800a766 <__lshift+0xb6>
 800a6fe:	6920      	ldr	r0, [r4, #16]
 800a700:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a704:	f104 0314 	add.w	r3, r4, #20
 800a708:	f019 091f 	ands.w	r9, r9, #31
 800a70c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a710:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a714:	d02b      	beq.n	800a76e <__lshift+0xbe>
 800a716:	468a      	mov	sl, r1
 800a718:	2200      	movs	r2, #0
 800a71a:	f1c9 0e20 	rsb	lr, r9, #32
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	fa00 f009 	lsl.w	r0, r0, r9
 800a724:	4310      	orrs	r0, r2
 800a726:	f84a 0b04 	str.w	r0, [sl], #4
 800a72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72e:	459c      	cmp	ip, r3
 800a730:	fa22 f20e 	lsr.w	r2, r2, lr
 800a734:	d8f3      	bhi.n	800a71e <__lshift+0x6e>
 800a736:	ebac 0304 	sub.w	r3, ip, r4
 800a73a:	3b15      	subs	r3, #21
 800a73c:	f023 0303 	bic.w	r3, r3, #3
 800a740:	3304      	adds	r3, #4
 800a742:	f104 0015 	add.w	r0, r4, #21
 800a746:	4584      	cmp	ip, r0
 800a748:	bf38      	it	cc
 800a74a:	2304      	movcc	r3, #4
 800a74c:	50ca      	str	r2, [r1, r3]
 800a74e:	b10a      	cbz	r2, 800a754 <__lshift+0xa4>
 800a750:	f108 0602 	add.w	r6, r8, #2
 800a754:	3e01      	subs	r6, #1
 800a756:	4638      	mov	r0, r7
 800a758:	4621      	mov	r1, r4
 800a75a:	612e      	str	r6, [r5, #16]
 800a75c:	f7ff fddc 	bl	800a318 <_Bfree>
 800a760:	4628      	mov	r0, r5
 800a762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a766:	f842 0f04 	str.w	r0, [r2, #4]!
 800a76a:	3301      	adds	r3, #1
 800a76c:	e7c5      	b.n	800a6fa <__lshift+0x4a>
 800a76e:	3904      	subs	r1, #4
 800a770:	f853 2b04 	ldr.w	r2, [r3], #4
 800a774:	459c      	cmp	ip, r3
 800a776:	f841 2f04 	str.w	r2, [r1, #4]!
 800a77a:	d8f9      	bhi.n	800a770 <__lshift+0xc0>
 800a77c:	e7ea      	b.n	800a754 <__lshift+0xa4>
 800a77e:	bf00      	nop
 800a780:	0800c102 	.word	0x0800c102
 800a784:	0800c113 	.word	0x0800c113

0800a788 <__mcmp>:
 800a788:	4603      	mov	r3, r0
 800a78a:	690a      	ldr	r2, [r1, #16]
 800a78c:	6900      	ldr	r0, [r0, #16]
 800a78e:	b530      	push	{r4, r5, lr}
 800a790:	1a80      	subs	r0, r0, r2
 800a792:	d10e      	bne.n	800a7b2 <__mcmp+0x2a>
 800a794:	3314      	adds	r3, #20
 800a796:	3114      	adds	r1, #20
 800a798:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a79c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a7a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a7a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a7a8:	4295      	cmp	r5, r2
 800a7aa:	d003      	beq.n	800a7b4 <__mcmp+0x2c>
 800a7ac:	d205      	bcs.n	800a7ba <__mcmp+0x32>
 800a7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b2:	bd30      	pop	{r4, r5, pc}
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	d3f3      	bcc.n	800a7a0 <__mcmp+0x18>
 800a7b8:	e7fb      	b.n	800a7b2 <__mcmp+0x2a>
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e7f9      	b.n	800a7b2 <__mcmp+0x2a>
	...

0800a7c0 <__mdiff>:
 800a7c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	4689      	mov	r9, r1
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4648      	mov	r0, r9
 800a7cc:	4614      	mov	r4, r2
 800a7ce:	f7ff ffdb 	bl	800a788 <__mcmp>
 800a7d2:	1e05      	subs	r5, r0, #0
 800a7d4:	d112      	bne.n	800a7fc <__mdiff+0x3c>
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff fd5d 	bl	800a298 <_Balloc>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	b928      	cbnz	r0, 800a7ee <__mdiff+0x2e>
 800a7e2:	f240 2137 	movw	r1, #567	@ 0x237
 800a7e6:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e0 <__mdiff+0x120>)
 800a7e8:	483e      	ldr	r0, [pc, #248]	@ (800a8e4 <__mdiff+0x124>)
 800a7ea:	f000 f8f1 	bl	800a9d0 <__assert_func>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	b003      	add	sp, #12
 800a7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fc:	bfbc      	itt	lt
 800a7fe:	464b      	movlt	r3, r9
 800a800:	46a1      	movlt	r9, r4
 800a802:	4630      	mov	r0, r6
 800a804:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a808:	bfba      	itte	lt
 800a80a:	461c      	movlt	r4, r3
 800a80c:	2501      	movlt	r5, #1
 800a80e:	2500      	movge	r5, #0
 800a810:	f7ff fd42 	bl	800a298 <_Balloc>
 800a814:	4602      	mov	r2, r0
 800a816:	b918      	cbnz	r0, 800a820 <__mdiff+0x60>
 800a818:	f240 2145 	movw	r1, #581	@ 0x245
 800a81c:	4b30      	ldr	r3, [pc, #192]	@ (800a8e0 <__mdiff+0x120>)
 800a81e:	e7e3      	b.n	800a7e8 <__mdiff+0x28>
 800a820:	f100 0b14 	add.w	fp, r0, #20
 800a824:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a828:	f109 0310 	add.w	r3, r9, #16
 800a82c:	60c5      	str	r5, [r0, #12]
 800a82e:	f04f 0c00 	mov.w	ip, #0
 800a832:	f109 0514 	add.w	r5, r9, #20
 800a836:	46d9      	mov	r9, fp
 800a838:	6926      	ldr	r6, [r4, #16]
 800a83a:	f104 0e14 	add.w	lr, r4, #20
 800a83e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a842:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a84e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a852:	b281      	uxth	r1, r0
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	fa1f f38a 	uxth.w	r3, sl
 800a85a:	1a5b      	subs	r3, r3, r1
 800a85c:	0c00      	lsrs	r0, r0, #16
 800a85e:	4463      	add	r3, ip
 800a860:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a864:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a868:	b29b      	uxth	r3, r3
 800a86a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a86e:	4576      	cmp	r6, lr
 800a870:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a874:	f849 3b04 	str.w	r3, [r9], #4
 800a878:	d8e6      	bhi.n	800a848 <__mdiff+0x88>
 800a87a:	1b33      	subs	r3, r6, r4
 800a87c:	3b15      	subs	r3, #21
 800a87e:	f023 0303 	bic.w	r3, r3, #3
 800a882:	3415      	adds	r4, #21
 800a884:	3304      	adds	r3, #4
 800a886:	42a6      	cmp	r6, r4
 800a888:	bf38      	it	cc
 800a88a:	2304      	movcc	r3, #4
 800a88c:	441d      	add	r5, r3
 800a88e:	445b      	add	r3, fp
 800a890:	461e      	mov	r6, r3
 800a892:	462c      	mov	r4, r5
 800a894:	4544      	cmp	r4, r8
 800a896:	d30e      	bcc.n	800a8b6 <__mdiff+0xf6>
 800a898:	f108 0103 	add.w	r1, r8, #3
 800a89c:	1b49      	subs	r1, r1, r5
 800a89e:	f021 0103 	bic.w	r1, r1, #3
 800a8a2:	3d03      	subs	r5, #3
 800a8a4:	45a8      	cmp	r8, r5
 800a8a6:	bf38      	it	cc
 800a8a8:	2100      	movcc	r1, #0
 800a8aa:	440b      	add	r3, r1
 800a8ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8b0:	b199      	cbz	r1, 800a8da <__mdiff+0x11a>
 800a8b2:	6117      	str	r7, [r2, #16]
 800a8b4:	e79e      	b.n	800a7f4 <__mdiff+0x34>
 800a8b6:	46e6      	mov	lr, ip
 800a8b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a8bc:	fa1f fc81 	uxth.w	ip, r1
 800a8c0:	44f4      	add	ip, lr
 800a8c2:	0c08      	lsrs	r0, r1, #16
 800a8c4:	4471      	add	r1, lr
 800a8c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a8ca:	b289      	uxth	r1, r1
 800a8cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8d4:	f846 1b04 	str.w	r1, [r6], #4
 800a8d8:	e7dc      	b.n	800a894 <__mdiff+0xd4>
 800a8da:	3f01      	subs	r7, #1
 800a8dc:	e7e6      	b.n	800a8ac <__mdiff+0xec>
 800a8de:	bf00      	nop
 800a8e0:	0800c102 	.word	0x0800c102
 800a8e4:	0800c113 	.word	0x0800c113

0800a8e8 <__d2b>:
 800a8e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4690      	mov	r8, r2
 800a8f0:	4699      	mov	r9, r3
 800a8f2:	9e08      	ldr	r6, [sp, #32]
 800a8f4:	f7ff fcd0 	bl	800a298 <_Balloc>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	b930      	cbnz	r0, 800a90a <__d2b+0x22>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	f240 310f 	movw	r1, #783	@ 0x30f
 800a902:	4b23      	ldr	r3, [pc, #140]	@ (800a990 <__d2b+0xa8>)
 800a904:	4823      	ldr	r0, [pc, #140]	@ (800a994 <__d2b+0xac>)
 800a906:	f000 f863 	bl	800a9d0 <__assert_func>
 800a90a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a90e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a912:	b10d      	cbz	r5, 800a918 <__d2b+0x30>
 800a914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	f1b8 0300 	subs.w	r3, r8, #0
 800a91e:	d024      	beq.n	800a96a <__d2b+0x82>
 800a920:	4668      	mov	r0, sp
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	f7ff fd7f 	bl	800a426 <__lo0bits>
 800a928:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a92c:	b1d8      	cbz	r0, 800a966 <__d2b+0x7e>
 800a92e:	f1c0 0320 	rsb	r3, r0, #32
 800a932:	fa02 f303 	lsl.w	r3, r2, r3
 800a936:	430b      	orrs	r3, r1
 800a938:	40c2      	lsrs	r2, r0
 800a93a:	6163      	str	r3, [r4, #20]
 800a93c:	9201      	str	r2, [sp, #4]
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	bf0c      	ite	eq
 800a944:	2201      	moveq	r2, #1
 800a946:	2202      	movne	r2, #2
 800a948:	61a3      	str	r3, [r4, #24]
 800a94a:	6122      	str	r2, [r4, #16]
 800a94c:	b1ad      	cbz	r5, 800a97a <__d2b+0x92>
 800a94e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a952:	4405      	add	r5, r0
 800a954:	6035      	str	r5, [r6, #0]
 800a956:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95c:	6018      	str	r0, [r3, #0]
 800a95e:	4620      	mov	r0, r4
 800a960:	b002      	add	sp, #8
 800a962:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a966:	6161      	str	r1, [r4, #20]
 800a968:	e7e9      	b.n	800a93e <__d2b+0x56>
 800a96a:	a801      	add	r0, sp, #4
 800a96c:	f7ff fd5b 	bl	800a426 <__lo0bits>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	6163      	str	r3, [r4, #20]
 800a976:	3020      	adds	r0, #32
 800a978:	e7e7      	b.n	800a94a <__d2b+0x62>
 800a97a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a97e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a982:	6030      	str	r0, [r6, #0]
 800a984:	6918      	ldr	r0, [r3, #16]
 800a986:	f7ff fd2f 	bl	800a3e8 <__hi0bits>
 800a98a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a98e:	e7e4      	b.n	800a95a <__d2b+0x72>
 800a990:	0800c102 	.word	0x0800c102
 800a994:	0800c113 	.word	0x0800c113

0800a998 <_mprec_log10>:
 800a998:	2817      	cmp	r0, #23
 800a99a:	b5d0      	push	{r4, r6, r7, lr}
 800a99c:	4604      	mov	r4, r0
 800a99e:	dc05      	bgt.n	800a9ac <_mprec_log10+0x14>
 800a9a0:	4b08      	ldr	r3, [pc, #32]	@ (800a9c4 <_mprec_log10+0x2c>)
 800a9a2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a9a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9aa:	bdd0      	pop	{r4, r6, r7, pc}
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	2600      	movs	r6, #0
 800a9b0:	4905      	ldr	r1, [pc, #20]	@ (800a9c8 <_mprec_log10+0x30>)
 800a9b2:	4f06      	ldr	r7, [pc, #24]	@ (800a9cc <_mprec_log10+0x34>)
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	f7f5 fd86 	bl	80004c8 <__aeabi_dmul>
 800a9bc:	3c01      	subs	r4, #1
 800a9be:	d1f9      	bne.n	800a9b4 <_mprec_log10+0x1c>
 800a9c0:	e7f3      	b.n	800a9aa <_mprec_log10+0x12>
 800a9c2:	bf00      	nop
 800a9c4:	0800c1a0 	.word	0x0800c1a0
 800a9c8:	3ff00000 	.word	0x3ff00000
 800a9cc:	40240000 	.word	0x40240000

0800a9d0 <__assert_func>:
 800a9d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9d2:	4614      	mov	r4, r2
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4b09      	ldr	r3, [pc, #36]	@ (800a9fc <__assert_func+0x2c>)
 800a9d8:	4605      	mov	r5, r0
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	68d8      	ldr	r0, [r3, #12]
 800a9de:	b954      	cbnz	r4, 800a9f6 <__assert_func+0x26>
 800a9e0:	4b07      	ldr	r3, [pc, #28]	@ (800aa00 <__assert_func+0x30>)
 800a9e2:	461c      	mov	r4, r3
 800a9e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9e8:	9100      	str	r1, [sp, #0]
 800a9ea:	462b      	mov	r3, r5
 800a9ec:	4905      	ldr	r1, [pc, #20]	@ (800aa04 <__assert_func+0x34>)
 800a9ee:	f000 f821 	bl	800aa34 <fiprintf>
 800a9f2:	f000 f831 	bl	800aa58 <abort>
 800a9f6:	4b04      	ldr	r3, [pc, #16]	@ (800aa08 <__assert_func+0x38>)
 800a9f8:	e7f4      	b.n	800a9e4 <__assert_func+0x14>
 800a9fa:	bf00      	nop
 800a9fc:	20000034 	.word	0x20000034
 800aa00:	0800c2a3 	.word	0x0800c2a3
 800aa04:	0800c275 	.word	0x0800c275
 800aa08:	0800c268 	.word	0x0800c268

0800aa0c <_calloc_r>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	fba1 5402 	umull	r5, r4, r1, r2
 800aa12:	b93c      	cbnz	r4, 800aa24 <_calloc_r+0x18>
 800aa14:	4629      	mov	r1, r5
 800aa16:	f7fe f915 	bl	8008c44 <_malloc_r>
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	b928      	cbnz	r0, 800aa2a <_calloc_r+0x1e>
 800aa1e:	2600      	movs	r6, #0
 800aa20:	4630      	mov	r0, r6
 800aa22:	bd70      	pop	{r4, r5, r6, pc}
 800aa24:	220c      	movs	r2, #12
 800aa26:	6002      	str	r2, [r0, #0]
 800aa28:	e7f9      	b.n	800aa1e <_calloc_r+0x12>
 800aa2a:	462a      	mov	r2, r5
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	f7fe fabe 	bl	8008fae <memset>
 800aa32:	e7f5      	b.n	800aa20 <_calloc_r+0x14>

0800aa34 <fiprintf>:
 800aa34:	b40e      	push	{r1, r2, r3}
 800aa36:	b503      	push	{r0, r1, lr}
 800aa38:	4601      	mov	r1, r0
 800aa3a:	ab03      	add	r3, sp, #12
 800aa3c:	4805      	ldr	r0, [pc, #20]	@ (800aa54 <fiprintf+0x20>)
 800aa3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa42:	6800      	ldr	r0, [r0, #0]
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	f000 f835 	bl	800aab4 <_vfiprintf_r>
 800aa4a:	b002      	add	sp, #8
 800aa4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa50:	b003      	add	sp, #12
 800aa52:	4770      	bx	lr
 800aa54:	20000034 	.word	0x20000034

0800aa58 <abort>:
 800aa58:	2006      	movs	r0, #6
 800aa5a:	b508      	push	{r3, lr}
 800aa5c:	f000 fb90 	bl	800b180 <raise>
 800aa60:	2001      	movs	r0, #1
 800aa62:	f7f7 fc6e 	bl	8002342 <_exit>

0800aa66 <__sfputc_r>:
 800aa66:	6893      	ldr	r3, [r2, #8]
 800aa68:	b410      	push	{r4}
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	6093      	str	r3, [r2, #8]
 800aa70:	da07      	bge.n	800aa82 <__sfputc_r+0x1c>
 800aa72:	6994      	ldr	r4, [r2, #24]
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	db01      	blt.n	800aa7c <__sfputc_r+0x16>
 800aa78:	290a      	cmp	r1, #10
 800aa7a:	d102      	bne.n	800aa82 <__sfputc_r+0x1c>
 800aa7c:	bc10      	pop	{r4}
 800aa7e:	f000 bac3 	b.w	800b008 <__swbuf_r>
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	1c58      	adds	r0, r3, #1
 800aa86:	6010      	str	r0, [r2, #0]
 800aa88:	7019      	strb	r1, [r3, #0]
 800aa8a:	4608      	mov	r0, r1
 800aa8c:	bc10      	pop	{r4}
 800aa8e:	4770      	bx	lr

0800aa90 <__sfputs_r>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	4606      	mov	r6, r0
 800aa94:	460f      	mov	r7, r1
 800aa96:	4614      	mov	r4, r2
 800aa98:	18d5      	adds	r5, r2, r3
 800aa9a:	42ac      	cmp	r4, r5
 800aa9c:	d101      	bne.n	800aaa2 <__sfputs_r+0x12>
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e007      	b.n	800aab2 <__sfputs_r+0x22>
 800aaa2:	463a      	mov	r2, r7
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaaa:	f7ff ffdc 	bl	800aa66 <__sfputc_r>
 800aaae:	1c43      	adds	r3, r0, #1
 800aab0:	d1f3      	bne.n	800aa9a <__sfputs_r+0xa>
 800aab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aab4 <_vfiprintf_r>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	460d      	mov	r5, r1
 800aaba:	4614      	mov	r4, r2
 800aabc:	4698      	mov	r8, r3
 800aabe:	4606      	mov	r6, r0
 800aac0:	b09d      	sub	sp, #116	@ 0x74
 800aac2:	b118      	cbz	r0, 800aacc <_vfiprintf_r+0x18>
 800aac4:	6a03      	ldr	r3, [r0, #32]
 800aac6:	b90b      	cbnz	r3, 800aacc <_vfiprintf_r+0x18>
 800aac8:	f7fe f9f8 	bl	8008ebc <__sinit>
 800aacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aace:	07d9      	lsls	r1, r3, #31
 800aad0:	d405      	bmi.n	800aade <_vfiprintf_r+0x2a>
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	059a      	lsls	r2, r3, #22
 800aad6:	d402      	bmi.n	800aade <_vfiprintf_r+0x2a>
 800aad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aada:	f7fe fb48 	bl	800916e <__retarget_lock_acquire_recursive>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	071b      	lsls	r3, r3, #28
 800aae2:	d501      	bpl.n	800aae8 <_vfiprintf_r+0x34>
 800aae4:	692b      	ldr	r3, [r5, #16]
 800aae6:	b99b      	cbnz	r3, 800ab10 <_vfiprintf_r+0x5c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	f000 faca 	bl	800b084 <__swsetup_r>
 800aaf0:	b170      	cbz	r0, 800ab10 <_vfiprintf_r+0x5c>
 800aaf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaf4:	07dc      	lsls	r4, r3, #31
 800aaf6:	d504      	bpl.n	800ab02 <_vfiprintf_r+0x4e>
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	b01d      	add	sp, #116	@ 0x74
 800aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	0598      	lsls	r0, r3, #22
 800ab06:	d4f7      	bmi.n	800aaf8 <_vfiprintf_r+0x44>
 800ab08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0a:	f7fe fb31 	bl	8009170 <__retarget_lock_release_recursive>
 800ab0e:	e7f3      	b.n	800aaf8 <_vfiprintf_r+0x44>
 800ab10:	2300      	movs	r3, #0
 800ab12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab14:	2320      	movs	r3, #32
 800ab16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab1a:	2330      	movs	r3, #48	@ 0x30
 800ab1c:	f04f 0901 	mov.w	r9, #1
 800ab20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab24:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800acd0 <_vfiprintf_r+0x21c>
 800ab28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	469a      	mov	sl, r3
 800ab30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab34:	b10a      	cbz	r2, 800ab3a <_vfiprintf_r+0x86>
 800ab36:	2a25      	cmp	r2, #37	@ 0x25
 800ab38:	d1f9      	bne.n	800ab2e <_vfiprintf_r+0x7a>
 800ab3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab3e:	d00b      	beq.n	800ab58 <_vfiprintf_r+0xa4>
 800ab40:	465b      	mov	r3, fp
 800ab42:	4622      	mov	r2, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7ff ffa2 	bl	800aa90 <__sfputs_r>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f000 80a7 	beq.w	800aca0 <_vfiprintf_r+0x1ec>
 800ab52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab54:	445a      	add	r2, fp
 800ab56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab58:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 809f 	beq.w	800aca0 <_vfiprintf_r+0x1ec>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f04f 32ff 	mov.w	r2, #4294967295
 800ab68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab6c:	f10a 0a01 	add.w	sl, sl, #1
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab7a:	4654      	mov	r4, sl
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab82:	4853      	ldr	r0, [pc, #332]	@ (800acd0 <_vfiprintf_r+0x21c>)
 800ab84:	f000 fb18 	bl	800b1b8 <memchr>
 800ab88:	9a04      	ldr	r2, [sp, #16]
 800ab8a:	b9d8      	cbnz	r0, 800abc4 <_vfiprintf_r+0x110>
 800ab8c:	06d1      	lsls	r1, r2, #27
 800ab8e:	bf44      	itt	mi
 800ab90:	2320      	movmi	r3, #32
 800ab92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab96:	0713      	lsls	r3, r2, #28
 800ab98:	bf44      	itt	mi
 800ab9a:	232b      	movmi	r3, #43	@ 0x2b
 800ab9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba0:	f89a 3000 	ldrb.w	r3, [sl]
 800aba4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aba6:	d015      	beq.n	800abd4 <_vfiprintf_r+0x120>
 800aba8:	4654      	mov	r4, sl
 800abaa:	2000      	movs	r0, #0
 800abac:	f04f 0c0a 	mov.w	ip, #10
 800abb0:	9a07      	ldr	r2, [sp, #28]
 800abb2:	4621      	mov	r1, r4
 800abb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abb8:	3b30      	subs	r3, #48	@ 0x30
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d94b      	bls.n	800ac56 <_vfiprintf_r+0x1a2>
 800abbe:	b1b0      	cbz	r0, 800abee <_vfiprintf_r+0x13a>
 800abc0:	9207      	str	r2, [sp, #28]
 800abc2:	e014      	b.n	800abee <_vfiprintf_r+0x13a>
 800abc4:	eba0 0308 	sub.w	r3, r0, r8
 800abc8:	fa09 f303 	lsl.w	r3, r9, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	46a2      	mov	sl, r4
 800abd0:	9304      	str	r3, [sp, #16]
 800abd2:	e7d2      	b.n	800ab7a <_vfiprintf_r+0xc6>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1d19      	adds	r1, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	9103      	str	r1, [sp, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfbb      	ittet	lt
 800abe0:	425b      	neglt	r3, r3
 800abe2:	f042 0202 	orrlt.w	r2, r2, #2
 800abe6:	9307      	strge	r3, [sp, #28]
 800abe8:	9307      	strlt	r3, [sp, #28]
 800abea:	bfb8      	it	lt
 800abec:	9204      	strlt	r2, [sp, #16]
 800abee:	7823      	ldrb	r3, [r4, #0]
 800abf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800abf2:	d10a      	bne.n	800ac0a <_vfiprintf_r+0x156>
 800abf4:	7863      	ldrb	r3, [r4, #1]
 800abf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abf8:	d132      	bne.n	800ac60 <_vfiprintf_r+0x1ac>
 800abfa:	9b03      	ldr	r3, [sp, #12]
 800abfc:	3402      	adds	r4, #2
 800abfe:	1d1a      	adds	r2, r3, #4
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	9203      	str	r2, [sp, #12]
 800ac04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800acd4 <_vfiprintf_r+0x220>
 800ac0e:	2203      	movs	r2, #3
 800ac10:	4650      	mov	r0, sl
 800ac12:	7821      	ldrb	r1, [r4, #0]
 800ac14:	f000 fad0 	bl	800b1b8 <memchr>
 800ac18:	b138      	cbz	r0, 800ac2a <_vfiprintf_r+0x176>
 800ac1a:	2240      	movs	r2, #64	@ 0x40
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	eba0 000a 	sub.w	r0, r0, sl
 800ac22:	4082      	lsls	r2, r0
 800ac24:	4313      	orrs	r3, r2
 800ac26:	3401      	adds	r4, #1
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac2e:	2206      	movs	r2, #6
 800ac30:	4829      	ldr	r0, [pc, #164]	@ (800acd8 <_vfiprintf_r+0x224>)
 800ac32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac36:	f000 fabf 	bl	800b1b8 <memchr>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d03f      	beq.n	800acbe <_vfiprintf_r+0x20a>
 800ac3e:	4b27      	ldr	r3, [pc, #156]	@ (800acdc <_vfiprintf_r+0x228>)
 800ac40:	bb1b      	cbnz	r3, 800ac8a <_vfiprintf_r+0x1d6>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	3307      	adds	r3, #7
 800ac46:	f023 0307 	bic.w	r3, r3, #7
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	9303      	str	r3, [sp, #12]
 800ac4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac50:	443b      	add	r3, r7
 800ac52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac54:	e76a      	b.n	800ab2c <_vfiprintf_r+0x78>
 800ac56:	460c      	mov	r4, r1
 800ac58:	2001      	movs	r0, #1
 800ac5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac5e:	e7a8      	b.n	800abb2 <_vfiprintf_r+0xfe>
 800ac60:	2300      	movs	r3, #0
 800ac62:	f04f 0c0a 	mov.w	ip, #10
 800ac66:	4619      	mov	r1, r3
 800ac68:	3401      	adds	r4, #1
 800ac6a:	9305      	str	r3, [sp, #20]
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac72:	3a30      	subs	r2, #48	@ 0x30
 800ac74:	2a09      	cmp	r2, #9
 800ac76:	d903      	bls.n	800ac80 <_vfiprintf_r+0x1cc>
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d0c6      	beq.n	800ac0a <_vfiprintf_r+0x156>
 800ac7c:	9105      	str	r1, [sp, #20]
 800ac7e:	e7c4      	b.n	800ac0a <_vfiprintf_r+0x156>
 800ac80:	4604      	mov	r4, r0
 800ac82:	2301      	movs	r3, #1
 800ac84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac88:	e7f0      	b.n	800ac6c <_vfiprintf_r+0x1b8>
 800ac8a:	ab03      	add	r3, sp, #12
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4630      	mov	r0, r6
 800ac92:	4b13      	ldr	r3, [pc, #76]	@ (800ace0 <_vfiprintf_r+0x22c>)
 800ac94:	a904      	add	r1, sp, #16
 800ac96:	f3af 8000 	nop.w
 800ac9a:	4607      	mov	r7, r0
 800ac9c:	1c78      	adds	r0, r7, #1
 800ac9e:	d1d6      	bne.n	800ac4e <_vfiprintf_r+0x19a>
 800aca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aca2:	07d9      	lsls	r1, r3, #31
 800aca4:	d405      	bmi.n	800acb2 <_vfiprintf_r+0x1fe>
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	059a      	lsls	r2, r3, #22
 800acaa:	d402      	bmi.n	800acb2 <_vfiprintf_r+0x1fe>
 800acac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acae:	f7fe fa5f 	bl	8009170 <__retarget_lock_release_recursive>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	065b      	lsls	r3, r3, #25
 800acb6:	f53f af1f 	bmi.w	800aaf8 <_vfiprintf_r+0x44>
 800acba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acbc:	e71e      	b.n	800aafc <_vfiprintf_r+0x48>
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	462a      	mov	r2, r5
 800acc4:	4630      	mov	r0, r6
 800acc6:	4b06      	ldr	r3, [pc, #24]	@ (800ace0 <_vfiprintf_r+0x22c>)
 800acc8:	a904      	add	r1, sp, #16
 800acca:	f000 f87d 	bl	800adc8 <_printf_i>
 800acce:	e7e4      	b.n	800ac9a <_vfiprintf_r+0x1e6>
 800acd0:	0800c2a4 	.word	0x0800c2a4
 800acd4:	0800c2aa 	.word	0x0800c2aa
 800acd8:	0800c2ae 	.word	0x0800c2ae
 800acdc:	00000000 	.word	0x00000000
 800ace0:	0800aa91 	.word	0x0800aa91

0800ace4 <_printf_common>:
 800ace4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace8:	4616      	mov	r6, r2
 800acea:	4698      	mov	r8, r3
 800acec:	688a      	ldr	r2, [r1, #8]
 800acee:	690b      	ldr	r3, [r1, #16]
 800acf0:	4607      	mov	r7, r0
 800acf2:	4293      	cmp	r3, r2
 800acf4:	bfb8      	it	lt
 800acf6:	4613      	movlt	r3, r2
 800acf8:	6033      	str	r3, [r6, #0]
 800acfa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800acfe:	460c      	mov	r4, r1
 800ad00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad04:	b10a      	cbz	r2, 800ad0a <_printf_common+0x26>
 800ad06:	3301      	adds	r3, #1
 800ad08:	6033      	str	r3, [r6, #0]
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	0699      	lsls	r1, r3, #26
 800ad0e:	bf42      	ittt	mi
 800ad10:	6833      	ldrmi	r3, [r6, #0]
 800ad12:	3302      	addmi	r3, #2
 800ad14:	6033      	strmi	r3, [r6, #0]
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	f015 0506 	ands.w	r5, r5, #6
 800ad1c:	d106      	bne.n	800ad2c <_printf_common+0x48>
 800ad1e:	f104 0a19 	add.w	sl, r4, #25
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	6832      	ldr	r2, [r6, #0]
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dc2b      	bgt.n	800ad84 <_printf_common+0xa0>
 800ad2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	3b00      	subs	r3, #0
 800ad34:	bf18      	it	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	0692      	lsls	r2, r2, #26
 800ad3a:	d430      	bmi.n	800ad9e <_printf_common+0xba>
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad44:	47c8      	blx	r9
 800ad46:	3001      	adds	r0, #1
 800ad48:	d023      	beq.n	800ad92 <_printf_common+0xae>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	6922      	ldr	r2, [r4, #16]
 800ad4e:	f003 0306 	and.w	r3, r3, #6
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	bf14      	ite	ne
 800ad56:	2500      	movne	r5, #0
 800ad58:	6833      	ldreq	r3, [r6, #0]
 800ad5a:	f04f 0600 	mov.w	r6, #0
 800ad5e:	bf08      	it	eq
 800ad60:	68e5      	ldreq	r5, [r4, #12]
 800ad62:	f104 041a 	add.w	r4, r4, #26
 800ad66:	bf08      	it	eq
 800ad68:	1aed      	subeq	r5, r5, r3
 800ad6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ad6e:	bf08      	it	eq
 800ad70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad74:	4293      	cmp	r3, r2
 800ad76:	bfc4      	itt	gt
 800ad78:	1a9b      	subgt	r3, r3, r2
 800ad7a:	18ed      	addgt	r5, r5, r3
 800ad7c:	42b5      	cmp	r5, r6
 800ad7e:	d11a      	bne.n	800adb6 <_printf_common+0xd2>
 800ad80:	2000      	movs	r0, #0
 800ad82:	e008      	b.n	800ad96 <_printf_common+0xb2>
 800ad84:	2301      	movs	r3, #1
 800ad86:	4652      	mov	r2, sl
 800ad88:	4641      	mov	r1, r8
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	47c8      	blx	r9
 800ad8e:	3001      	adds	r0, #1
 800ad90:	d103      	bne.n	800ad9a <_printf_common+0xb6>
 800ad92:	f04f 30ff 	mov.w	r0, #4294967295
 800ad96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad9a:	3501      	adds	r5, #1
 800ad9c:	e7c1      	b.n	800ad22 <_printf_common+0x3e>
 800ad9e:	2030      	movs	r0, #48	@ 0x30
 800ada0:	18e1      	adds	r1, r4, r3
 800ada2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800adac:	4422      	add	r2, r4
 800adae:	3302      	adds	r3, #2
 800adb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800adb4:	e7c2      	b.n	800ad3c <_printf_common+0x58>
 800adb6:	2301      	movs	r3, #1
 800adb8:	4622      	mov	r2, r4
 800adba:	4641      	mov	r1, r8
 800adbc:	4638      	mov	r0, r7
 800adbe:	47c8      	blx	r9
 800adc0:	3001      	adds	r0, #1
 800adc2:	d0e6      	beq.n	800ad92 <_printf_common+0xae>
 800adc4:	3601      	adds	r6, #1
 800adc6:	e7d9      	b.n	800ad7c <_printf_common+0x98>

0800adc8 <_printf_i>:
 800adc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	7e0f      	ldrb	r7, [r1, #24]
 800adce:	4691      	mov	r9, r2
 800add0:	2f78      	cmp	r7, #120	@ 0x78
 800add2:	4680      	mov	r8, r0
 800add4:	460c      	mov	r4, r1
 800add6:	469a      	mov	sl, r3
 800add8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adde:	d807      	bhi.n	800adf0 <_printf_i+0x28>
 800ade0:	2f62      	cmp	r7, #98	@ 0x62
 800ade2:	d80a      	bhi.n	800adfa <_printf_i+0x32>
 800ade4:	2f00      	cmp	r7, #0
 800ade6:	f000 80d3 	beq.w	800af90 <_printf_i+0x1c8>
 800adea:	2f58      	cmp	r7, #88	@ 0x58
 800adec:	f000 80ba 	beq.w	800af64 <_printf_i+0x19c>
 800adf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adf8:	e03a      	b.n	800ae70 <_printf_i+0xa8>
 800adfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adfe:	2b15      	cmp	r3, #21
 800ae00:	d8f6      	bhi.n	800adf0 <_printf_i+0x28>
 800ae02:	a101      	add	r1, pc, #4	@ (adr r1, 800ae08 <_printf_i+0x40>)
 800ae04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae08:	0800ae61 	.word	0x0800ae61
 800ae0c:	0800ae75 	.word	0x0800ae75
 800ae10:	0800adf1 	.word	0x0800adf1
 800ae14:	0800adf1 	.word	0x0800adf1
 800ae18:	0800adf1 	.word	0x0800adf1
 800ae1c:	0800adf1 	.word	0x0800adf1
 800ae20:	0800ae75 	.word	0x0800ae75
 800ae24:	0800adf1 	.word	0x0800adf1
 800ae28:	0800adf1 	.word	0x0800adf1
 800ae2c:	0800adf1 	.word	0x0800adf1
 800ae30:	0800adf1 	.word	0x0800adf1
 800ae34:	0800af77 	.word	0x0800af77
 800ae38:	0800ae9f 	.word	0x0800ae9f
 800ae3c:	0800af31 	.word	0x0800af31
 800ae40:	0800adf1 	.word	0x0800adf1
 800ae44:	0800adf1 	.word	0x0800adf1
 800ae48:	0800af99 	.word	0x0800af99
 800ae4c:	0800adf1 	.word	0x0800adf1
 800ae50:	0800ae9f 	.word	0x0800ae9f
 800ae54:	0800adf1 	.word	0x0800adf1
 800ae58:	0800adf1 	.word	0x0800adf1
 800ae5c:	0800af39 	.word	0x0800af39
 800ae60:	6833      	ldr	r3, [r6, #0]
 800ae62:	1d1a      	adds	r2, r3, #4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6032      	str	r2, [r6, #0]
 800ae68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae70:	2301      	movs	r3, #1
 800ae72:	e09e      	b.n	800afb2 <_printf_i+0x1ea>
 800ae74:	6833      	ldr	r3, [r6, #0]
 800ae76:	6820      	ldr	r0, [r4, #0]
 800ae78:	1d19      	adds	r1, r3, #4
 800ae7a:	6031      	str	r1, [r6, #0]
 800ae7c:	0606      	lsls	r6, r0, #24
 800ae7e:	d501      	bpl.n	800ae84 <_printf_i+0xbc>
 800ae80:	681d      	ldr	r5, [r3, #0]
 800ae82:	e003      	b.n	800ae8c <_printf_i+0xc4>
 800ae84:	0645      	lsls	r5, r0, #25
 800ae86:	d5fb      	bpl.n	800ae80 <_printf_i+0xb8>
 800ae88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae8c:	2d00      	cmp	r5, #0
 800ae8e:	da03      	bge.n	800ae98 <_printf_i+0xd0>
 800ae90:	232d      	movs	r3, #45	@ 0x2d
 800ae92:	426d      	negs	r5, r5
 800ae94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae98:	230a      	movs	r3, #10
 800ae9a:	4859      	ldr	r0, [pc, #356]	@ (800b000 <_printf_i+0x238>)
 800ae9c:	e011      	b.n	800aec2 <_printf_i+0xfa>
 800ae9e:	6821      	ldr	r1, [r4, #0]
 800aea0:	6833      	ldr	r3, [r6, #0]
 800aea2:	0608      	lsls	r0, r1, #24
 800aea4:	f853 5b04 	ldr.w	r5, [r3], #4
 800aea8:	d402      	bmi.n	800aeb0 <_printf_i+0xe8>
 800aeaa:	0649      	lsls	r1, r1, #25
 800aeac:	bf48      	it	mi
 800aeae:	b2ad      	uxthmi	r5, r5
 800aeb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeb2:	6033      	str	r3, [r6, #0]
 800aeb4:	bf14      	ite	ne
 800aeb6:	230a      	movne	r3, #10
 800aeb8:	2308      	moveq	r3, #8
 800aeba:	4851      	ldr	r0, [pc, #324]	@ (800b000 <_printf_i+0x238>)
 800aebc:	2100      	movs	r1, #0
 800aebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aec2:	6866      	ldr	r6, [r4, #4]
 800aec4:	2e00      	cmp	r6, #0
 800aec6:	bfa8      	it	ge
 800aec8:	6821      	ldrge	r1, [r4, #0]
 800aeca:	60a6      	str	r6, [r4, #8]
 800aecc:	bfa4      	itt	ge
 800aece:	f021 0104 	bicge.w	r1, r1, #4
 800aed2:	6021      	strge	r1, [r4, #0]
 800aed4:	b90d      	cbnz	r5, 800aeda <_printf_i+0x112>
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	d04b      	beq.n	800af72 <_printf_i+0x1aa>
 800aeda:	4616      	mov	r6, r2
 800aedc:	fbb5 f1f3 	udiv	r1, r5, r3
 800aee0:	fb03 5711 	mls	r7, r3, r1, r5
 800aee4:	5dc7      	ldrb	r7, [r0, r7]
 800aee6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aeea:	462f      	mov	r7, r5
 800aeec:	42bb      	cmp	r3, r7
 800aeee:	460d      	mov	r5, r1
 800aef0:	d9f4      	bls.n	800aedc <_printf_i+0x114>
 800aef2:	2b08      	cmp	r3, #8
 800aef4:	d10b      	bne.n	800af0e <_printf_i+0x146>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	07df      	lsls	r7, r3, #31
 800aefa:	d508      	bpl.n	800af0e <_printf_i+0x146>
 800aefc:	6923      	ldr	r3, [r4, #16]
 800aefe:	6861      	ldr	r1, [r4, #4]
 800af00:	4299      	cmp	r1, r3
 800af02:	bfde      	ittt	le
 800af04:	2330      	movle	r3, #48	@ 0x30
 800af06:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af0e:	1b92      	subs	r2, r2, r6
 800af10:	6122      	str	r2, [r4, #16]
 800af12:	464b      	mov	r3, r9
 800af14:	4621      	mov	r1, r4
 800af16:	4640      	mov	r0, r8
 800af18:	f8cd a000 	str.w	sl, [sp]
 800af1c:	aa03      	add	r2, sp, #12
 800af1e:	f7ff fee1 	bl	800ace4 <_printf_common>
 800af22:	3001      	adds	r0, #1
 800af24:	d14a      	bne.n	800afbc <_printf_i+0x1f4>
 800af26:	f04f 30ff 	mov.w	r0, #4294967295
 800af2a:	b004      	add	sp, #16
 800af2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	f043 0320 	orr.w	r3, r3, #32
 800af36:	6023      	str	r3, [r4, #0]
 800af38:	2778      	movs	r7, #120	@ 0x78
 800af3a:	4832      	ldr	r0, [pc, #200]	@ (800b004 <_printf_i+0x23c>)
 800af3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	6831      	ldr	r1, [r6, #0]
 800af44:	061f      	lsls	r7, r3, #24
 800af46:	f851 5b04 	ldr.w	r5, [r1], #4
 800af4a:	d402      	bmi.n	800af52 <_printf_i+0x18a>
 800af4c:	065f      	lsls	r7, r3, #25
 800af4e:	bf48      	it	mi
 800af50:	b2ad      	uxthmi	r5, r5
 800af52:	6031      	str	r1, [r6, #0]
 800af54:	07d9      	lsls	r1, r3, #31
 800af56:	bf44      	itt	mi
 800af58:	f043 0320 	orrmi.w	r3, r3, #32
 800af5c:	6023      	strmi	r3, [r4, #0]
 800af5e:	b11d      	cbz	r5, 800af68 <_printf_i+0x1a0>
 800af60:	2310      	movs	r3, #16
 800af62:	e7ab      	b.n	800aebc <_printf_i+0xf4>
 800af64:	4826      	ldr	r0, [pc, #152]	@ (800b000 <_printf_i+0x238>)
 800af66:	e7e9      	b.n	800af3c <_printf_i+0x174>
 800af68:	6823      	ldr	r3, [r4, #0]
 800af6a:	f023 0320 	bic.w	r3, r3, #32
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	e7f6      	b.n	800af60 <_printf_i+0x198>
 800af72:	4616      	mov	r6, r2
 800af74:	e7bd      	b.n	800aef2 <_printf_i+0x12a>
 800af76:	6833      	ldr	r3, [r6, #0]
 800af78:	6825      	ldr	r5, [r4, #0]
 800af7a:	1d18      	adds	r0, r3, #4
 800af7c:	6961      	ldr	r1, [r4, #20]
 800af7e:	6030      	str	r0, [r6, #0]
 800af80:	062e      	lsls	r6, r5, #24
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	d501      	bpl.n	800af8a <_printf_i+0x1c2>
 800af86:	6019      	str	r1, [r3, #0]
 800af88:	e002      	b.n	800af90 <_printf_i+0x1c8>
 800af8a:	0668      	lsls	r0, r5, #25
 800af8c:	d5fb      	bpl.n	800af86 <_printf_i+0x1be>
 800af8e:	8019      	strh	r1, [r3, #0]
 800af90:	2300      	movs	r3, #0
 800af92:	4616      	mov	r6, r2
 800af94:	6123      	str	r3, [r4, #16]
 800af96:	e7bc      	b.n	800af12 <_printf_i+0x14a>
 800af98:	6833      	ldr	r3, [r6, #0]
 800af9a:	2100      	movs	r1, #0
 800af9c:	1d1a      	adds	r2, r3, #4
 800af9e:	6032      	str	r2, [r6, #0]
 800afa0:	681e      	ldr	r6, [r3, #0]
 800afa2:	6862      	ldr	r2, [r4, #4]
 800afa4:	4630      	mov	r0, r6
 800afa6:	f000 f907 	bl	800b1b8 <memchr>
 800afaa:	b108      	cbz	r0, 800afb0 <_printf_i+0x1e8>
 800afac:	1b80      	subs	r0, r0, r6
 800afae:	6060      	str	r0, [r4, #4]
 800afb0:	6863      	ldr	r3, [r4, #4]
 800afb2:	6123      	str	r3, [r4, #16]
 800afb4:	2300      	movs	r3, #0
 800afb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afba:	e7aa      	b.n	800af12 <_printf_i+0x14a>
 800afbc:	4632      	mov	r2, r6
 800afbe:	4649      	mov	r1, r9
 800afc0:	4640      	mov	r0, r8
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	47d0      	blx	sl
 800afc6:	3001      	adds	r0, #1
 800afc8:	d0ad      	beq.n	800af26 <_printf_i+0x15e>
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	079b      	lsls	r3, r3, #30
 800afce:	d413      	bmi.n	800aff8 <_printf_i+0x230>
 800afd0:	68e0      	ldr	r0, [r4, #12]
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	4298      	cmp	r0, r3
 800afd6:	bfb8      	it	lt
 800afd8:	4618      	movlt	r0, r3
 800afda:	e7a6      	b.n	800af2a <_printf_i+0x162>
 800afdc:	2301      	movs	r3, #1
 800afde:	4632      	mov	r2, r6
 800afe0:	4649      	mov	r1, r9
 800afe2:	4640      	mov	r0, r8
 800afe4:	47d0      	blx	sl
 800afe6:	3001      	adds	r0, #1
 800afe8:	d09d      	beq.n	800af26 <_printf_i+0x15e>
 800afea:	3501      	adds	r5, #1
 800afec:	68e3      	ldr	r3, [r4, #12]
 800afee:	9903      	ldr	r1, [sp, #12]
 800aff0:	1a5b      	subs	r3, r3, r1
 800aff2:	42ab      	cmp	r3, r5
 800aff4:	dcf2      	bgt.n	800afdc <_printf_i+0x214>
 800aff6:	e7eb      	b.n	800afd0 <_printf_i+0x208>
 800aff8:	2500      	movs	r5, #0
 800affa:	f104 0619 	add.w	r6, r4, #25
 800affe:	e7f5      	b.n	800afec <_printf_i+0x224>
 800b000:	0800c2b5 	.word	0x0800c2b5
 800b004:	0800c2c6 	.word	0x0800c2c6

0800b008 <__swbuf_r>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	460e      	mov	r6, r1
 800b00c:	4614      	mov	r4, r2
 800b00e:	4605      	mov	r5, r0
 800b010:	b118      	cbz	r0, 800b01a <__swbuf_r+0x12>
 800b012:	6a03      	ldr	r3, [r0, #32]
 800b014:	b90b      	cbnz	r3, 800b01a <__swbuf_r+0x12>
 800b016:	f7fd ff51 	bl	8008ebc <__sinit>
 800b01a:	69a3      	ldr	r3, [r4, #24]
 800b01c:	60a3      	str	r3, [r4, #8]
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	071a      	lsls	r2, r3, #28
 800b022:	d501      	bpl.n	800b028 <__swbuf_r+0x20>
 800b024:	6923      	ldr	r3, [r4, #16]
 800b026:	b943      	cbnz	r3, 800b03a <__swbuf_r+0x32>
 800b028:	4621      	mov	r1, r4
 800b02a:	4628      	mov	r0, r5
 800b02c:	f000 f82a 	bl	800b084 <__swsetup_r>
 800b030:	b118      	cbz	r0, 800b03a <__swbuf_r+0x32>
 800b032:	f04f 37ff 	mov.w	r7, #4294967295
 800b036:	4638      	mov	r0, r7
 800b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	6922      	ldr	r2, [r4, #16]
 800b03e:	b2f6      	uxtb	r6, r6
 800b040:	1a98      	subs	r0, r3, r2
 800b042:	6963      	ldr	r3, [r4, #20]
 800b044:	4637      	mov	r7, r6
 800b046:	4283      	cmp	r3, r0
 800b048:	dc05      	bgt.n	800b056 <__swbuf_r+0x4e>
 800b04a:	4621      	mov	r1, r4
 800b04c:	4628      	mov	r0, r5
 800b04e:	f7fe faa3 	bl	8009598 <_fflush_r>
 800b052:	2800      	cmp	r0, #0
 800b054:	d1ed      	bne.n	800b032 <__swbuf_r+0x2a>
 800b056:	68a3      	ldr	r3, [r4, #8]
 800b058:	3b01      	subs	r3, #1
 800b05a:	60a3      	str	r3, [r4, #8]
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	6022      	str	r2, [r4, #0]
 800b062:	701e      	strb	r6, [r3, #0]
 800b064:	6962      	ldr	r2, [r4, #20]
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	429a      	cmp	r2, r3
 800b06a:	d004      	beq.n	800b076 <__swbuf_r+0x6e>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	07db      	lsls	r3, r3, #31
 800b070:	d5e1      	bpl.n	800b036 <__swbuf_r+0x2e>
 800b072:	2e0a      	cmp	r6, #10
 800b074:	d1df      	bne.n	800b036 <__swbuf_r+0x2e>
 800b076:	4621      	mov	r1, r4
 800b078:	4628      	mov	r0, r5
 800b07a:	f7fe fa8d 	bl	8009598 <_fflush_r>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d0d9      	beq.n	800b036 <__swbuf_r+0x2e>
 800b082:	e7d6      	b.n	800b032 <__swbuf_r+0x2a>

0800b084 <__swsetup_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4b29      	ldr	r3, [pc, #164]	@ (800b12c <__swsetup_r+0xa8>)
 800b088:	4605      	mov	r5, r0
 800b08a:	6818      	ldr	r0, [r3, #0]
 800b08c:	460c      	mov	r4, r1
 800b08e:	b118      	cbz	r0, 800b098 <__swsetup_r+0x14>
 800b090:	6a03      	ldr	r3, [r0, #32]
 800b092:	b90b      	cbnz	r3, 800b098 <__swsetup_r+0x14>
 800b094:	f7fd ff12 	bl	8008ebc <__sinit>
 800b098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09c:	0719      	lsls	r1, r3, #28
 800b09e:	d422      	bmi.n	800b0e6 <__swsetup_r+0x62>
 800b0a0:	06da      	lsls	r2, r3, #27
 800b0a2:	d407      	bmi.n	800b0b4 <__swsetup_r+0x30>
 800b0a4:	2209      	movs	r2, #9
 800b0a6:	602a      	str	r2, [r5, #0]
 800b0a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	e033      	b.n	800b11c <__swsetup_r+0x98>
 800b0b4:	0758      	lsls	r0, r3, #29
 800b0b6:	d512      	bpl.n	800b0de <__swsetup_r+0x5a>
 800b0b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ba:	b141      	cbz	r1, 800b0ce <__swsetup_r+0x4a>
 800b0bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0c0:	4299      	cmp	r1, r3
 800b0c2:	d002      	beq.n	800b0ca <__swsetup_r+0x46>
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	f7fe f863 	bl	8009190 <_free_r>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0d4:	81a3      	strh	r3, [r4, #12]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	6063      	str	r3, [r4, #4]
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	f043 0308 	orr.w	r3, r3, #8
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	b94b      	cbnz	r3, 800b0fe <__swsetup_r+0x7a>
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0f4:	d003      	beq.n	800b0fe <__swsetup_r+0x7a>
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	f000 f890 	bl	800b21e <__smakebuf_r>
 800b0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b102:	f013 0201 	ands.w	r2, r3, #1
 800b106:	d00a      	beq.n	800b11e <__swsetup_r+0x9a>
 800b108:	2200      	movs	r2, #0
 800b10a:	60a2      	str	r2, [r4, #8]
 800b10c:	6962      	ldr	r2, [r4, #20]
 800b10e:	4252      	negs	r2, r2
 800b110:	61a2      	str	r2, [r4, #24]
 800b112:	6922      	ldr	r2, [r4, #16]
 800b114:	b942      	cbnz	r2, 800b128 <__swsetup_r+0xa4>
 800b116:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b11a:	d1c5      	bne.n	800b0a8 <__swsetup_r+0x24>
 800b11c:	bd38      	pop	{r3, r4, r5, pc}
 800b11e:	0799      	lsls	r1, r3, #30
 800b120:	bf58      	it	pl
 800b122:	6962      	ldrpl	r2, [r4, #20]
 800b124:	60a2      	str	r2, [r4, #8]
 800b126:	e7f4      	b.n	800b112 <__swsetup_r+0x8e>
 800b128:	2000      	movs	r0, #0
 800b12a:	e7f7      	b.n	800b11c <__swsetup_r+0x98>
 800b12c:	20000034 	.word	0x20000034

0800b130 <_raise_r>:
 800b130:	291f      	cmp	r1, #31
 800b132:	b538      	push	{r3, r4, r5, lr}
 800b134:	4605      	mov	r5, r0
 800b136:	460c      	mov	r4, r1
 800b138:	d904      	bls.n	800b144 <_raise_r+0x14>
 800b13a:	2316      	movs	r3, #22
 800b13c:	6003      	str	r3, [r0, #0]
 800b13e:	f04f 30ff 	mov.w	r0, #4294967295
 800b142:	bd38      	pop	{r3, r4, r5, pc}
 800b144:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b146:	b112      	cbz	r2, 800b14e <_raise_r+0x1e>
 800b148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b14c:	b94b      	cbnz	r3, 800b162 <_raise_r+0x32>
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 f830 	bl	800b1b4 <_getpid_r>
 800b154:	4622      	mov	r2, r4
 800b156:	4601      	mov	r1, r0
 800b158:	4628      	mov	r0, r5
 800b15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b15e:	f000 b817 	b.w	800b190 <_kill_r>
 800b162:	2b01      	cmp	r3, #1
 800b164:	d00a      	beq.n	800b17c <_raise_r+0x4c>
 800b166:	1c59      	adds	r1, r3, #1
 800b168:	d103      	bne.n	800b172 <_raise_r+0x42>
 800b16a:	2316      	movs	r3, #22
 800b16c:	6003      	str	r3, [r0, #0]
 800b16e:	2001      	movs	r0, #1
 800b170:	e7e7      	b.n	800b142 <_raise_r+0x12>
 800b172:	2100      	movs	r1, #0
 800b174:	4620      	mov	r0, r4
 800b176:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b17a:	4798      	blx	r3
 800b17c:	2000      	movs	r0, #0
 800b17e:	e7e0      	b.n	800b142 <_raise_r+0x12>

0800b180 <raise>:
 800b180:	4b02      	ldr	r3, [pc, #8]	@ (800b18c <raise+0xc>)
 800b182:	4601      	mov	r1, r0
 800b184:	6818      	ldr	r0, [r3, #0]
 800b186:	f7ff bfd3 	b.w	800b130 <_raise_r>
 800b18a:	bf00      	nop
 800b18c:	20000034 	.word	0x20000034

0800b190 <_kill_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	2300      	movs	r3, #0
 800b194:	4d06      	ldr	r5, [pc, #24]	@ (800b1b0 <_kill_r+0x20>)
 800b196:	4604      	mov	r4, r0
 800b198:	4608      	mov	r0, r1
 800b19a:	4611      	mov	r1, r2
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	f7f7 f8c0 	bl	8002322 <_kill>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	d102      	bne.n	800b1ac <_kill_r+0x1c>
 800b1a6:	682b      	ldr	r3, [r5, #0]
 800b1a8:	b103      	cbz	r3, 800b1ac <_kill_r+0x1c>
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	bd38      	pop	{r3, r4, r5, pc}
 800b1ae:	bf00      	nop
 800b1b0:	2000103c 	.word	0x2000103c

0800b1b4 <_getpid_r>:
 800b1b4:	f7f7 b8ae 	b.w	8002314 <_getpid>

0800b1b8 <memchr>:
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	b2c9      	uxtb	r1, r1
 800b1be:	4402      	add	r2, r0
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	d101      	bne.n	800b1ca <memchr+0x12>
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e003      	b.n	800b1d2 <memchr+0x1a>
 800b1ca:	7804      	ldrb	r4, [r0, #0]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	428c      	cmp	r4, r1
 800b1d0:	d1f6      	bne.n	800b1c0 <memchr+0x8>
 800b1d2:	bd10      	pop	{r4, pc}

0800b1d4 <__swhatbuf_r>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1dc:	4615      	mov	r5, r2
 800b1de:	2900      	cmp	r1, #0
 800b1e0:	461e      	mov	r6, r3
 800b1e2:	b096      	sub	sp, #88	@ 0x58
 800b1e4:	da0c      	bge.n	800b200 <__swhatbuf_r+0x2c>
 800b1e6:	89a3      	ldrh	r3, [r4, #12]
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1ee:	bf14      	ite	ne
 800b1f0:	2340      	movne	r3, #64	@ 0x40
 800b1f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	6031      	str	r1, [r6, #0]
 800b1fa:	602b      	str	r3, [r5, #0]
 800b1fc:	b016      	add	sp, #88	@ 0x58
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
 800b200:	466a      	mov	r2, sp
 800b202:	f000 f849 	bl	800b298 <_fstat_r>
 800b206:	2800      	cmp	r0, #0
 800b208:	dbed      	blt.n	800b1e6 <__swhatbuf_r+0x12>
 800b20a:	9901      	ldr	r1, [sp, #4]
 800b20c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b210:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b214:	4259      	negs	r1, r3
 800b216:	4159      	adcs	r1, r3
 800b218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b21c:	e7eb      	b.n	800b1f6 <__swhatbuf_r+0x22>

0800b21e <__smakebuf_r>:
 800b21e:	898b      	ldrh	r3, [r1, #12]
 800b220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b222:	079d      	lsls	r5, r3, #30
 800b224:	4606      	mov	r6, r0
 800b226:	460c      	mov	r4, r1
 800b228:	d507      	bpl.n	800b23a <__smakebuf_r+0x1c>
 800b22a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b22e:	6023      	str	r3, [r4, #0]
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	2301      	movs	r3, #1
 800b234:	6163      	str	r3, [r4, #20]
 800b236:	b003      	add	sp, #12
 800b238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23a:	466a      	mov	r2, sp
 800b23c:	ab01      	add	r3, sp, #4
 800b23e:	f7ff ffc9 	bl	800b1d4 <__swhatbuf_r>
 800b242:	9f00      	ldr	r7, [sp, #0]
 800b244:	4605      	mov	r5, r0
 800b246:	4639      	mov	r1, r7
 800b248:	4630      	mov	r0, r6
 800b24a:	f7fd fcfb 	bl	8008c44 <_malloc_r>
 800b24e:	b948      	cbnz	r0, 800b264 <__smakebuf_r+0x46>
 800b250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b254:	059a      	lsls	r2, r3, #22
 800b256:	d4ee      	bmi.n	800b236 <__smakebuf_r+0x18>
 800b258:	f023 0303 	bic.w	r3, r3, #3
 800b25c:	f043 0302 	orr.w	r3, r3, #2
 800b260:	81a3      	strh	r3, [r4, #12]
 800b262:	e7e2      	b.n	800b22a <__smakebuf_r+0xc>
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	6020      	str	r0, [r4, #0]
 800b274:	b15b      	cbz	r3, 800b28e <__smakebuf_r+0x70>
 800b276:	4630      	mov	r0, r6
 800b278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b27c:	f000 f81e 	bl	800b2bc <_isatty_r>
 800b280:	b128      	cbz	r0, 800b28e <__smakebuf_r+0x70>
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	f023 0303 	bic.w	r3, r3, #3
 800b288:	f043 0301 	orr.w	r3, r3, #1
 800b28c:	81a3      	strh	r3, [r4, #12]
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	431d      	orrs	r5, r3
 800b292:	81a5      	strh	r5, [r4, #12]
 800b294:	e7cf      	b.n	800b236 <__smakebuf_r+0x18>
	...

0800b298 <_fstat_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	2300      	movs	r3, #0
 800b29c:	4d06      	ldr	r5, [pc, #24]	@ (800b2b8 <_fstat_r+0x20>)
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	602b      	str	r3, [r5, #0]
 800b2a6:	f7f7 f89b 	bl	80023e0 <_fstat>
 800b2aa:	1c43      	adds	r3, r0, #1
 800b2ac:	d102      	bne.n	800b2b4 <_fstat_r+0x1c>
 800b2ae:	682b      	ldr	r3, [r5, #0]
 800b2b0:	b103      	cbz	r3, 800b2b4 <_fstat_r+0x1c>
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	bd38      	pop	{r3, r4, r5, pc}
 800b2b6:	bf00      	nop
 800b2b8:	2000103c 	.word	0x2000103c

0800b2bc <_isatty_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4d05      	ldr	r5, [pc, #20]	@ (800b2d8 <_isatty_r+0x1c>)
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4608      	mov	r0, r1
 800b2c6:	602b      	str	r3, [r5, #0]
 800b2c8:	f7f7 f899 	bl	80023fe <_isatty>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_isatty_r+0x1a>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_isatty_r+0x1a>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	2000103c 	.word	0x2000103c

0800b2dc <log>:
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	f000 f835 	bl	800b350 <__ieee754_log>
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	460f      	mov	r7, r1
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f5 fb83 	bl	80009fc <__aeabi_dcmpun>
 800b2f6:	b998      	cbnz	r0, 800b320 <log+0x44>
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f5 fb72 	bl	80009e8 <__aeabi_dcmpgt>
 800b304:	b960      	cbnz	r0, 800b320 <log+0x44>
 800b306:	2200      	movs	r2, #0
 800b308:	2300      	movs	r3, #0
 800b30a:	4620      	mov	r0, r4
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7f5 fb43 	bl	8000998 <__aeabi_dcmpeq>
 800b312:	b140      	cbz	r0, 800b326 <log+0x4a>
 800b314:	f7fd ff00 	bl	8009118 <__errno>
 800b318:	2322      	movs	r3, #34	@ 0x22
 800b31a:	2600      	movs	r6, #0
 800b31c:	4f06      	ldr	r7, [pc, #24]	@ (800b338 <log+0x5c>)
 800b31e:	6003      	str	r3, [r0, #0]
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b326:	f7fd fef7 	bl	8009118 <__errno>
 800b32a:	2321      	movs	r3, #33	@ 0x21
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	4803      	ldr	r0, [pc, #12]	@ (800b33c <log+0x60>)
 800b330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b334:	f000 b804 	b.w	800b340 <nan>
 800b338:	fff00000 	.word	0xfff00000
 800b33c:	0800c2a3 	.word	0x0800c2a3

0800b340 <nan>:
 800b340:	2000      	movs	r0, #0
 800b342:	4901      	ldr	r1, [pc, #4]	@ (800b348 <nan+0x8>)
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	7ff80000 	.word	0x7ff80000
 800b34c:	00000000 	.word	0x00000000

0800b350 <__ieee754_log>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	460d      	mov	r5, r1
 800b35e:	b087      	sub	sp, #28
 800b360:	da24      	bge.n	800b3ac <__ieee754_log+0x5c>
 800b362:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800b366:	4304      	orrs	r4, r0
 800b368:	d108      	bne.n	800b37c <__ieee754_log+0x2c>
 800b36a:	2200      	movs	r2, #0
 800b36c:	2300      	movs	r3, #0
 800b36e:	2000      	movs	r0, #0
 800b370:	49cb      	ldr	r1, [pc, #812]	@ (800b6a0 <__ieee754_log+0x350>)
 800b372:	f7f5 f9d3 	bl	800071c <__aeabi_ddiv>
 800b376:	b007      	add	sp, #28
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	2900      	cmp	r1, #0
 800b37e:	da04      	bge.n	800b38a <__ieee754_log+0x3a>
 800b380:	f7f4 feea 	bl	8000158 <__aeabi_dsub>
 800b384:	2200      	movs	r2, #0
 800b386:	2300      	movs	r3, #0
 800b388:	e7f3      	b.n	800b372 <__ieee754_log+0x22>
 800b38a:	2200      	movs	r2, #0
 800b38c:	4bc5      	ldr	r3, [pc, #788]	@ (800b6a4 <__ieee754_log+0x354>)
 800b38e:	f7f5 f89b 	bl	80004c8 <__aeabi_dmul>
 800b392:	460b      	mov	r3, r1
 800b394:	460d      	mov	r5, r1
 800b396:	4602      	mov	r2, r0
 800b398:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800b39c:	48c2      	ldr	r0, [pc, #776]	@ (800b6a8 <__ieee754_log+0x358>)
 800b39e:	4285      	cmp	r5, r0
 800b3a0:	dd06      	ble.n	800b3b0 <__ieee754_log+0x60>
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f7f4 fed9 	bl	800015c <__adddf3>
 800b3aa:	e7e4      	b.n	800b376 <__ieee754_log+0x26>
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	e7f5      	b.n	800b39c <__ieee754_log+0x4c>
 800b3b0:	152c      	asrs	r4, r5, #20
 800b3b2:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800b3b6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b3ba:	440c      	add	r4, r1
 800b3bc:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 800b3c0:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800b3c4:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 800b3c8:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800b3cc:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 800b3d0:	ea41 0305 	orr.w	r3, r1, r5
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4bb4      	ldr	r3, [pc, #720]	@ (800b6ac <__ieee754_log+0x35c>)
 800b3dc:	f7f4 febc 	bl	8000158 <__aeabi_dsub>
 800b3e0:	1cab      	adds	r3, r5, #2
 800b3e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	468b      	mov	fp, r1
 800b3ec:	f04f 0200 	mov.w	r2, #0
 800b3f0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800b3f4:	dc53      	bgt.n	800b49e <__ieee754_log+0x14e>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f7f5 face 	bl	8000998 <__aeabi_dcmpeq>
 800b3fc:	b1d0      	cbz	r0, 800b434 <__ieee754_log+0xe4>
 800b3fe:	2c00      	cmp	r4, #0
 800b400:	f000 8120 	beq.w	800b644 <__ieee754_log+0x2f4>
 800b404:	4620      	mov	r0, r4
 800b406:	f7f4 fff5 	bl	80003f4 <__aeabi_i2d>
 800b40a:	a391      	add	r3, pc, #580	@ (adr r3, 800b650 <__ieee754_log+0x300>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	4606      	mov	r6, r0
 800b412:	460f      	mov	r7, r1
 800b414:	f7f5 f858 	bl	80004c8 <__aeabi_dmul>
 800b418:	a38f      	add	r3, pc, #572	@ (adr r3, 800b658 <__ieee754_log+0x308>)
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	4604      	mov	r4, r0
 800b420:	460d      	mov	r5, r1
 800b422:	4630      	mov	r0, r6
 800b424:	4639      	mov	r1, r7
 800b426:	f7f5 f84f 	bl	80004c8 <__aeabi_dmul>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	e7b8      	b.n	800b3a6 <__ieee754_log+0x56>
 800b434:	a38a      	add	r3, pc, #552	@ (adr r3, 800b660 <__ieee754_log+0x310>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	4650      	mov	r0, sl
 800b43c:	4659      	mov	r1, fp
 800b43e:	f7f5 f843 	bl	80004c8 <__aeabi_dmul>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	2000      	movs	r0, #0
 800b448:	4999      	ldr	r1, [pc, #612]	@ (800b6b0 <__ieee754_log+0x360>)
 800b44a:	f7f4 fe85 	bl	8000158 <__aeabi_dsub>
 800b44e:	4652      	mov	r2, sl
 800b450:	4606      	mov	r6, r0
 800b452:	460f      	mov	r7, r1
 800b454:	465b      	mov	r3, fp
 800b456:	4650      	mov	r0, sl
 800b458:	4659      	mov	r1, fp
 800b45a:	f7f5 f835 	bl	80004c8 <__aeabi_dmul>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	4630      	mov	r0, r6
 800b464:	4639      	mov	r1, r7
 800b466:	f7f5 f82f 	bl	80004c8 <__aeabi_dmul>
 800b46a:	4606      	mov	r6, r0
 800b46c:	460f      	mov	r7, r1
 800b46e:	b914      	cbnz	r4, 800b476 <__ieee754_log+0x126>
 800b470:	4632      	mov	r2, r6
 800b472:	463b      	mov	r3, r7
 800b474:	e0a0      	b.n	800b5b8 <__ieee754_log+0x268>
 800b476:	4620      	mov	r0, r4
 800b478:	f7f4 ffbc 	bl	80003f4 <__aeabi_i2d>
 800b47c:	a374      	add	r3, pc, #464	@ (adr r3, 800b650 <__ieee754_log+0x300>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	4680      	mov	r8, r0
 800b484:	4689      	mov	r9, r1
 800b486:	f7f5 f81f 	bl	80004c8 <__aeabi_dmul>
 800b48a:	a373      	add	r3, pc, #460	@ (adr r3, 800b658 <__ieee754_log+0x308>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	4604      	mov	r4, r0
 800b492:	460d      	mov	r5, r1
 800b494:	4640      	mov	r0, r8
 800b496:	4649      	mov	r1, r9
 800b498:	f7f5 f816 	bl	80004c8 <__aeabi_dmul>
 800b49c:	e0a5      	b.n	800b5ea <__ieee754_log+0x29a>
 800b49e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4a2:	f7f4 fe5b 	bl	800015c <__adddf3>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f5 f935 	bl	800071c <__aeabi_ddiv>
 800b4b2:	e9cd 0100 	strd	r0, r1, [sp]
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7f4 ff9c 	bl	80003f4 <__aeabi_i2d>
 800b4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	f7f4 fffe 	bl	80004c8 <__aeabi_dmul>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4d4:	f7f4 fff8 	bl	80004c8 <__aeabi_dmul>
 800b4d8:	a363      	add	r3, pc, #396	@ (adr r3, 800b668 <__ieee754_log+0x318>)
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	4680      	mov	r8, r0
 800b4e0:	4689      	mov	r9, r1
 800b4e2:	f7f4 fff1 	bl	80004c8 <__aeabi_dmul>
 800b4e6:	a362      	add	r3, pc, #392	@ (adr r3, 800b670 <__ieee754_log+0x320>)
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f4 fe36 	bl	800015c <__adddf3>
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	464b      	mov	r3, r9
 800b4f4:	f7f4 ffe8 	bl	80004c8 <__aeabi_dmul>
 800b4f8:	a35f      	add	r3, pc, #380	@ (adr r3, 800b678 <__ieee754_log+0x328>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f4 fe2d 	bl	800015c <__adddf3>
 800b502:	4642      	mov	r2, r8
 800b504:	464b      	mov	r3, r9
 800b506:	f7f4 ffdf 	bl	80004c8 <__aeabi_dmul>
 800b50a:	a35d      	add	r3, pc, #372	@ (adr r3, 800b680 <__ieee754_log+0x330>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f4 fe24 	bl	800015c <__adddf3>
 800b514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b518:	f7f4 ffd6 	bl	80004c8 <__aeabi_dmul>
 800b51c:	a35a      	add	r3, pc, #360	@ (adr r3, 800b688 <__ieee754_log+0x338>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b526:	4640      	mov	r0, r8
 800b528:	4649      	mov	r1, r9
 800b52a:	f7f4 ffcd 	bl	80004c8 <__aeabi_dmul>
 800b52e:	a358      	add	r3, pc, #352	@ (adr r3, 800b690 <__ieee754_log+0x340>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	f7f4 fe12 	bl	800015c <__adddf3>
 800b538:	4642      	mov	r2, r8
 800b53a:	464b      	mov	r3, r9
 800b53c:	f7f4 ffc4 	bl	80004c8 <__aeabi_dmul>
 800b540:	a355      	add	r3, pc, #340	@ (adr r3, 800b698 <__ieee754_log+0x348>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f4 fe09 	bl	800015c <__adddf3>
 800b54a:	4642      	mov	r2, r8
 800b54c:	464b      	mov	r3, r9
 800b54e:	f7f4 ffbb 	bl	80004c8 <__aeabi_dmul>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b55a:	f7f4 fdff 	bl	800015c <__adddf3>
 800b55e:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800b562:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800b566:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800b56a:	3551      	adds	r5, #81	@ 0x51
 800b56c:	4335      	orrs	r5, r6
 800b56e:	2d00      	cmp	r5, #0
 800b570:	4680      	mov	r8, r0
 800b572:	4689      	mov	r9, r1
 800b574:	dd48      	ble.n	800b608 <__ieee754_log+0x2b8>
 800b576:	2200      	movs	r2, #0
 800b578:	4b4d      	ldr	r3, [pc, #308]	@ (800b6b0 <__ieee754_log+0x360>)
 800b57a:	4650      	mov	r0, sl
 800b57c:	4659      	mov	r1, fp
 800b57e:	f7f4 ffa3 	bl	80004c8 <__aeabi_dmul>
 800b582:	4652      	mov	r2, sl
 800b584:	465b      	mov	r3, fp
 800b586:	f7f4 ff9f 	bl	80004c8 <__aeabi_dmul>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4606      	mov	r6, r0
 800b590:	460f      	mov	r7, r1
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f4 fde1 	bl	800015c <__adddf3>
 800b59a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b59e:	f7f4 ff93 	bl	80004c8 <__aeabi_dmul>
 800b5a2:	4680      	mov	r8, r0
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	b964      	cbnz	r4, 800b5c2 <__ieee754_log+0x272>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	f7f4 fdd2 	bl	8000158 <__aeabi_dsub>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	4659      	mov	r1, fp
 800b5bc:	f7f4 fdcc 	bl	8000158 <__aeabi_dsub>
 800b5c0:	e6d9      	b.n	800b376 <__ieee754_log+0x26>
 800b5c2:	a323      	add	r3, pc, #140	@ (adr r3, 800b650 <__ieee754_log+0x300>)
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5cc:	f7f4 ff7c 	bl	80004c8 <__aeabi_dmul>
 800b5d0:	a321      	add	r3, pc, #132	@ (adr r3, 800b658 <__ieee754_log+0x308>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	460d      	mov	r5, r1
 800b5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5de:	f7f4 ff73 	bl	80004c8 <__aeabi_dmul>
 800b5e2:	4642      	mov	r2, r8
 800b5e4:	464b      	mov	r3, r9
 800b5e6:	f7f4 fdb9 	bl	800015c <__adddf3>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	f7f4 fdb1 	bl	8000158 <__aeabi_dsub>
 800b5f6:	4652      	mov	r2, sl
 800b5f8:	465b      	mov	r3, fp
 800b5fa:	f7f4 fdad 	bl	8000158 <__aeabi_dsub>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	e7d9      	b.n	800b5bc <__ieee754_log+0x26c>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	4650      	mov	r0, sl
 800b60e:	4659      	mov	r1, fp
 800b610:	f7f4 fda2 	bl	8000158 <__aeabi_dsub>
 800b614:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b618:	f7f4 ff56 	bl	80004c8 <__aeabi_dmul>
 800b61c:	4606      	mov	r6, r0
 800b61e:	460f      	mov	r7, r1
 800b620:	2c00      	cmp	r4, #0
 800b622:	f43f af25 	beq.w	800b470 <__ieee754_log+0x120>
 800b626:	a30a      	add	r3, pc, #40	@ (adr r3, 800b650 <__ieee754_log+0x300>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b630:	f7f4 ff4a 	bl	80004c8 <__aeabi_dmul>
 800b634:	a308      	add	r3, pc, #32	@ (adr r3, 800b658 <__ieee754_log+0x308>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	4604      	mov	r4, r0
 800b63c:	460d      	mov	r5, r1
 800b63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b642:	e729      	b.n	800b498 <__ieee754_log+0x148>
 800b644:	2000      	movs	r0, #0
 800b646:	2100      	movs	r1, #0
 800b648:	e695      	b.n	800b376 <__ieee754_log+0x26>
 800b64a:	bf00      	nop
 800b64c:	f3af 8000 	nop.w
 800b650:	fee00000 	.word	0xfee00000
 800b654:	3fe62e42 	.word	0x3fe62e42
 800b658:	35793c76 	.word	0x35793c76
 800b65c:	3dea39ef 	.word	0x3dea39ef
 800b660:	55555555 	.word	0x55555555
 800b664:	3fd55555 	.word	0x3fd55555
 800b668:	df3e5244 	.word	0xdf3e5244
 800b66c:	3fc2f112 	.word	0x3fc2f112
 800b670:	96cb03de 	.word	0x96cb03de
 800b674:	3fc74664 	.word	0x3fc74664
 800b678:	94229359 	.word	0x94229359
 800b67c:	3fd24924 	.word	0x3fd24924
 800b680:	55555593 	.word	0x55555593
 800b684:	3fe55555 	.word	0x3fe55555
 800b688:	d078c69f 	.word	0xd078c69f
 800b68c:	3fc39a09 	.word	0x3fc39a09
 800b690:	1d8e78af 	.word	0x1d8e78af
 800b694:	3fcc71c5 	.word	0x3fcc71c5
 800b698:	9997fa04 	.word	0x9997fa04
 800b69c:	3fd99999 	.word	0x3fd99999
 800b6a0:	c3500000 	.word	0xc3500000
 800b6a4:	43500000 	.word	0x43500000
 800b6a8:	7fefffff 	.word	0x7fefffff
 800b6ac:	3ff00000 	.word	0x3ff00000
 800b6b0:	3fe00000 	.word	0x3fe00000

0800b6b4 <_init>:
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6b6:	bf00      	nop
 800b6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ba:	bc08      	pop	{r3}
 800b6bc:	469e      	mov	lr, r3
 800b6be:	4770      	bx	lr

0800b6c0 <_fini>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	bf00      	nop
 800b6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c6:	bc08      	pop	{r3}
 800b6c8:	469e      	mov	lr, r3
 800b6ca:	4770      	bx	lr
